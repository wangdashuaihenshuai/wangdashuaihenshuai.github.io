(this["webpackJsonpmy-app"] = this["webpackJsonpmy-app"] || []).push([[2],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(11);
} else {}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(35);
} else {}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var require;var require;var _defineProperty = __webpack_require__(17);

var _get = __webpack_require__(18);

var _getPrototypeOf = __webpack_require__(5);

var _classCallCheck = __webpack_require__(20);

var _createClass = __webpack_require__(21);

var _inherits = __webpack_require__(22);

var _createSuper = __webpack_require__(24);

var _slicedToArray = __webpack_require__(29);

/**
 * gpu.js
 * http://gpu.rocks/
 *
 * GPU Accelerated JavaScript
 *
 * @version 2.11.3
 * @date Wed Apr 14 2021 16:49:13 GMT-0400 (Eastern Daylight Time)
 *
 * @license MIT
 * The MIT License
 *
 * Copyright (c) 2021 gpu.js Team
 */
(function (f) {
  if (true) {
    module.exports = f();
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.acorn = {}));
      })(this, function (exports) {
        'use strict';

        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        };
        var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
        var keywords = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        };
        var keywordRelationalOperator = /^in(stanceof)?$/;
        var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
        var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
        var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];

        function isInAstralSet(code, set) {
          var pos = 0x10000;

          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];

            if (pos > code) {
              return false;
            }

            pos += set[i + 1];

            if (pos >= code) {
              return true;
            }
          }
        }

        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }

        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36;
          }

          if (code < 58) {
            return true;
          }

          if (code < 65) {
            return false;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
        }

        var TokenType = function TokenType(label, conf) {
          if (conf === void 0) conf = {};
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop || null;
          this.updateContext = null;
        };

        function binop(name, prec) {
          return new TokenType(name, {
            beforeExpr: true,
            binop: prec
          });
        }

        var beforeExpr = {
          beforeExpr: true
        },
            startsExpr = {
          startsExpr: true
        };
        var keywords$1 = {};

        function kw(name, options) {
          if (options === void 0) options = {};
          options.keyword = name;
          return keywords$1[name] = new TokenType(name, options);
        }

        var types = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr: true,
            startsExpr: true
          }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", {
            beforeExpr: true,
            startsExpr: true
          }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", {
            beforeExpr: true,
            startsExpr: true
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", {
            beforeExpr: true,
            startsExpr: true
          }),
          eq: new TokenType("=", {
            beforeExpr: true,
            isAssign: true
          }),
          assign: new TokenType("_=", {
            beforeExpr: true,
            isAssign: true
          }),
          incDec: new TokenType("++/--", {
            prefix: true,
            postfix: true,
            startsExpr: true
          }),
          prefix: new TokenType("!/~", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: true,
            binop: 9,
            prefix: true,
            startsExpr: true
          }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", {
            beforeExpr: true
          }),
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", {
            isLoop: true,
            beforeExpr: true
          }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", {
            isLoop: true
          }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", {
            isLoop: true
          }),
          _with: kw("with"),
          _new: kw("new", {
            beforeExpr: true,
            startsExpr: true
          }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", {
            beforeExpr: true,
            binop: 7
          }),
          _instanceof: kw("instanceof", {
            beforeExpr: true,
            binop: 7
          }),
          _typeof: kw("typeof", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _void: kw("void", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _delete: kw("delete", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          })
        };
        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");

        function isNewLine(code, ecma2019String) {
          return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
        }

        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        var ref = Object.prototype;
        var hasOwnProperty = ref.hasOwnProperty;
        var toString = ref.toString;

        function has(obj, propName) {
          return hasOwnProperty.call(obj, propName);
        }

        var isArray = Array.isArray || function (obj) {
          return toString.call(obj) === "[object Array]";
        };

        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }

        var Position = function Position(line, col) {
          this.line = line;
          this.column = col;
        };

        Position.prototype.offset = function offset(n) {
          return new Position(this.line, this.column + n);
        };

        var SourceLocation = function SourceLocation(p, start, end) {
          this.start = start;
          this.end = end;

          if (p.sourceFile !== null) {
            this.source = p.sourceFile;
          }
        };

        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0;;) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);

            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }
        }

        var defaultOptions = {
          ecmaVersion: 10,
          sourceType: "script",
          onInsertedSemicolon: null,
          onTrailingComma: null,
          allowReserved: null,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowAwaitOutsideFunction: false,
          allowHashBang: false,
          locations: false,
          onToken: null,
          onComment: null,
          ranges: false,
          program: null,
          sourceFile: null,
          directSourceFile: null,
          preserveParens: false
        };

        function getOptions(opts) {
          var options = {};

          for (var opt in defaultOptions) {
            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
          }

          if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009;
          }

          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5;
          }

          if (isArray(options.onToken)) {
            var tokens = options.onToken;

            options.onToken = function (token) {
              return tokens.push(token);
            };
          }

          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment);
          }

          return options;
        }

        function pushComment(options, array) {
          return function (block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start: start,
              end: end
            };

            if (options.locations) {
              comment.loc = new SourceLocation(this, startLoc, endLoc);
            }

            if (options.ranges) {
              comment.range = [start, end];
            }

            array.push(comment);
          };
        }

        var SCOPE_TOP = 1,
            SCOPE_FUNCTION = 2,
            SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
            SCOPE_ASYNC = 4,
            SCOPE_GENERATOR = 8,
            SCOPE_ARROW = 16,
            SCOPE_SIMPLE_CATCH = 32,
            SCOPE_SUPER = 64,
            SCOPE_DIRECT_SUPER = 128;

        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
        }

        var BIND_NONE = 0,
            BIND_VAR = 1,
            BIND_LEXICAL = 2,
            BIND_FUNCTION = 3,
            BIND_SIMPLE_CATCH = 4,
            BIND_OUTSIDE = 5;

        var Parser = function Parser(options, input, startPos) {
          this.options = options = getOptions(options);
          this.sourceFile = options.sourceFile;
          this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
          var reserved = "";

          if (options.allowReserved !== true) {
            for (var v = options.ecmaVersion;; v--) {
              if (reserved = reservedWords[v]) {
                break;
              }
            }

            if (options.sourceType === "module") {
              reserved += " await";
            }
          }

          this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict);
          this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
          this.input = String(input);
          this.containsEsc = false;

          if (startPos) {
            this.pos = startPos;
            this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
          } else {
            this.pos = this.lineStart = 0;
            this.curLine = 1;
          }

          this.type = types.eof;
          this.value = null;
          this.start = this.end = this.pos;
          this.startLoc = this.endLoc = this.curPosition();
          this.lastTokEndLoc = this.lastTokStartLoc = null;
          this.lastTokStart = this.lastTokEnd = this.pos;
          this.context = this.initialContext();
          this.exprAllowed = true;
          this.inModule = options.sourceType === "module";
          this.strict = this.inModule || this.strictDirective(this.pos);
          this.potentialArrowAt = -1;
          this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
          this.labels = [];
          this.undefinedExports = {};

          if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
            this.skipLineComment(2);
          }

          this.scopeStack = [];
          this.enterScope(SCOPE_TOP);
          this.regexpState = null;
        };

        var prototypeAccessors = {
          inFunction: {
            configurable: true
          },
          inGenerator: {
            configurable: true
          },
          inAsync: {
            configurable: true
          },
          allowSuper: {
            configurable: true
          },
          allowDirectSuper: {
            configurable: true
          },
          treatFunctionsAsVar: {
            configurable: true
          }
        };

        Parser.prototype.parse = function parse() {
          var node = this.options.program || this.startNode();
          this.nextToken();
          return this.parseTopLevel(node);
        };

        prototypeAccessors.inFunction.get = function () {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        };

        prototypeAccessors.inGenerator.get = function () {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
        };

        prototypeAccessors.inAsync.get = function () {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
        };

        prototypeAccessors.allowSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
        };

        prototypeAccessors.allowDirectSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
        };

        prototypeAccessors.treatFunctionsAsVar.get = function () {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        };

        Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
          return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
        };

        Parser.extend = function extend() {
          var plugins = [],
              len = arguments.length;

          while (len--) {
            plugins[len] = arguments[len];
          }

          var cls = this;

          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls);
          }

          return cls;
        };

        Parser.parse = function parse(input, options) {
          return new this(options, input).parse();
        };

        Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
          var parser = new this(options, input, pos);
          parser.nextToken();
          return parser.parseExpression();
        };

        Parser.tokenizer = function tokenizer(input, options) {
          return new this(options, input);
        };

        Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp = Parser.prototype;
        var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;

        pp.strictDirective = function (start) {
          for (;;) {
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));

            if (!match) {
              return false;
            }

            if ((match[1] || match[2]) === "use strict") {
              return true;
            }

            start += match[0].length;
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;

            if (this.input[start] === ";") {
              start++;
            }
          }
        };

        pp.eat = function (type) {
          if (this.type === type) {
            this.next();
            return true;
          } else {
            return false;
          }
        };

        pp.isContextual = function (name) {
          return this.type === types.name && this.value === name && !this.containsEsc;
        };

        pp.eatContextual = function (name) {
          if (!this.isContextual(name)) {
            return false;
          }

          this.next();
          return true;
        };

        pp.expectContextual = function (name) {
          if (!this.eatContextual(name)) {
            this.unexpected();
          }
        };

        pp.canInsertSemicolon = function () {
          return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp.insertSemicolon = function () {
          if (this.canInsertSemicolon()) {
            if (this.options.onInsertedSemicolon) {
              this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
            }

            return true;
          }
        };

        pp.semicolon = function () {
          if (!this.eat(types.semi) && !this.insertSemicolon()) {
            this.unexpected();
          }
        };

        pp.afterTrailingComma = function (tokType, notNext) {
          if (this.type === tokType) {
            if (this.options.onTrailingComma) {
              this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
            }

            if (!notNext) {
              this.next();
            }

            return true;
          }
        };

        pp.expect = function (type) {
          this.eat(type) || this.unexpected();
        };

        pp.unexpected = function (pos) {
          this.raise(pos != null ? pos : this.start, "Unexpected token");
        };

        function DestructuringErrors() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        }

        pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return;
          }

          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          }

          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;

          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern");
          }
        };

        pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false;
          }

          var shorthandAssign = refDestructuringErrors.shorthandAssign;
          var doubleProto = refDestructuringErrors.doubleProto;

          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0;
          }

          if (shorthandAssign >= 0) {
            this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
          }

          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
          }
        };

        pp.checkYieldAwaitInDefaultParams = function () {
          if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
            this.raise(this.yieldPos, "Yield expression cannot be a default value");
          }

          if (this.awaitPos) {
            this.raise(this.awaitPos, "Await expression cannot be a default value");
          }
        };

        pp.isSimpleAssignTarget = function (expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression);
          }

          return expr.type === "Identifier" || expr.type === "MemberExpression";
        };

        var pp$1 = Parser.prototype;

        pp$1.parseTopLevel = function (node) {
          var exports = {};

          if (!node.body) {
            node.body = [];
          }

          while (this.type !== types.eof) {
            var stmt = this.parseStatement(null, true, exports);
            node.body.push(stmt);
          }

          if (this.inModule) {
            for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
              var name = list[i];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          }

          this.adaptDirectivePrologue(node.body);
          this.next();
          node.sourceType = this.options.sourceType;
          return this.finishNode(node, "Program");
        };

        var loopLabel = {
          kind: "loop"
        },
            switchLabel = {
          kind: "switch"
        };

        pp$1.isLet = function (context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length,
              nextCh = this.input.charCodeAt(next);

          if (nextCh === 91) {
            return true;
          }

          if (context) {
            return false;
          }

          if (nextCh === 123) {
            return true;
          }

          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1;

            while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
              ++pos;
            }

            var ident = this.input.slice(next, pos);

            if (!keywordRelationalOperator.test(ident)) {
              return true;
            }
          }

          return false;
        };

        pp$1.isAsyncFunction = function () {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length;
          return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
        };

        pp$1.parseStatement = function (context, topLevel, exports) {
          var starttype = this.type,
              node = this.startNode(),
              kind;

          if (this.isLet(context)) {
            starttype = types._var;
            kind = "let";
          }

          switch (starttype) {
            case types._break:
            case types._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);

            case types._debugger:
              return this.parseDebuggerStatement(node);

            case types._do:
              return this.parseDoStatement(node);

            case types._for:
              return this.parseForStatement(node);

            case types._function:
              if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
                this.unexpected();
              }

              return this.parseFunctionStatement(node, false, !context);

            case types._class:
              if (context) {
                this.unexpected();
              }

              return this.parseClass(node, true);

            case types._if:
              return this.parseIfStatement(node);

            case types._return:
              return this.parseReturnStatement(node);

            case types._switch:
              return this.parseSwitchStatement(node);

            case types._throw:
              return this.parseThrowStatement(node);

            case types._try:
              return this.parseTryStatement(node);

            case types._const:
            case types._var:
              kind = kind || this.value;

              if (context && kind !== "var") {
                this.unexpected();
              }

              return this.parseVarStatement(node, kind);

            case types._while:
              return this.parseWhileStatement(node);

            case types._with:
              return this.parseWithStatement(node);

            case types.braceL:
              return this.parseBlock(true, node);

            case types.semi:
              return this.parseEmptyStatement(node);

            case types._export:
            case types._import:
              if (this.options.ecmaVersion > 10 && starttype === types._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input);
                var next = this.pos + skip[0].length,
                    nextCh = this.input.charCodeAt(next);

                if (nextCh === 40) {
                  return this.parseExpressionStatement(node, this.parseExpression());
                }
              }

              if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) {
                  this.raise(this.start, "'import' and 'export' may only appear at the top level");
                }

                if (!this.inModule) {
                  this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                }
              }

              return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);

            default:
              if (this.isAsyncFunction()) {
                if (context) {
                  this.unexpected();
                }

                this.next();
                return this.parseFunctionStatement(node, true, !context);
              }

              var maybeName = this.value,
                  expr = this.parseExpression();

              if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
                return this.parseLabeledStatement(node, maybeName, expr, context);
              } else {
                return this.parseExpressionStatement(node, expr);
              }

          }
        };

        pp$1.parseBreakContinueStatement = function (node, keyword) {
          var isBreak = keyword === "break";
          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.label = null;
          } else if (this.type !== types.name) {
            this.unexpected();
          } else {
            node.label = this.parseIdent();
            this.semicolon();
          }

          var i = 0;

          for (; i < this.labels.length; ++i) {
            var lab = this.labels[i];

            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break;
              }

              if (node.label && isBreak) {
                break;
              }
            }
          }

          if (i === this.labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword);
          }

          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        };

        pp$1.parseDebuggerStatement = function (node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        };

        pp$1.parseDoStatement = function (node) {
          this.next();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("do");
          this.labels.pop();
          this.expect(types._while);
          node.test = this.parseParenExpression();

          if (this.options.ecmaVersion >= 6) {
            this.eat(types.semi);
          } else {
            this.semicolon();
          }

          return this.finishNode(node, "DoWhileStatement");
        };

        pp$1.parseForStatement = function (node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
          this.labels.push(loopLabel);
          this.enterScope(0);
          this.expect(types.parenL);

          if (this.type === types.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, null);
          }

          var isLet = this.isLet();

          if (this.type === types._var || this.type === types._const || isLet) {
            var init$1 = this.startNode(),
                kind = isLet ? "let" : this.value;
            this.next();
            this.parseVar(init$1, true, kind);
            this.finishNode(init$1, "VariableDeclaration");

            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
              if (this.options.ecmaVersion >= 9) {
                if (this.type === types._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt);
                  }
                } else {
                  node.await = awaitAt > -1;
                }
              }

              return this.parseForIn(node, init$1);
            }

            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, init$1);
          }

          var refDestructuringErrors = new DestructuringErrors();
          var init = this.parseExpression(true, refDestructuringErrors);

          if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }

            this.toAssignable(init, false, refDestructuringErrors);
            this.checkLVal(init);
            return this.parseForIn(node, init);
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }

          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }

          return this.parseFor(node, init);
        };

        pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
          this.next();
          return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        };

        pp$1.parseIfStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          node.consequent = this.parseStatement("if");
          node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
          return this.finishNode(node, "IfStatement");
        };

        pp$1.parseReturnStatement = function (node) {
          if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
            this.raise(this.start, "'return' outside of function");
          }

          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }

          return this.finishNode(node, "ReturnStatement");
        };

        pp$1.parseSwitchStatement = function (node) {
          this.next();
          node.discriminant = this.parseParenExpression();
          node.cases = [];
          this.expect(types.braceL);
          this.labels.push(switchLabel);
          this.enterScope(0);
          var cur;

          for (var sawDefault = false; this.type !== types.braceR;) {
            if (this.type === types._case || this.type === types._default) {
              var isCase = this.type === types._case;

              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }

              node.cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();

              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                }

                sawDefault = true;
                cur.test = null;
              }

              this.expect(types.colon);
            } else {
              if (!cur) {
                this.unexpected();
              }

              cur.consequent.push(this.parseStatement(null));
            }
          }

          this.exitScope();

          if (cur) {
            this.finishNode(cur, "SwitchCase");
          }

          this.next();
          this.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        };

        pp$1.parseThrowStatement = function (node) {
          this.next();

          if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
            this.raise(this.lastTokEnd, "Illegal newline after throw");
          }

          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        };

        var empty = [];

        pp$1.parseTryStatement = function (node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;

          if (this.type === types._catch) {
            var clause = this.startNode();
            this.next();

            if (this.eat(types.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = clause.param.type === "Identifier";
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
              this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
              this.expect(types.parenR);
            } else {
              if (this.options.ecmaVersion < 10) {
                this.unexpected();
              }

              clause.param = null;
              this.enterScope(0);
            }

            clause.body = this.parseBlock(false);
            this.exitScope();
            node.handler = this.finishNode(clause, "CatchClause");
          }

          node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;

          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause");
          }

          return this.finishNode(node, "TryStatement");
        };

        pp$1.parseVarStatement = function (node, kind) {
          this.next();
          this.parseVar(node, false, kind);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        };

        pp$1.parseWhileStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("while");
          this.labels.pop();
          return this.finishNode(node, "WhileStatement");
        };

        pp$1.parseWithStatement = function (node) {
          if (this.strict) {
            this.raise(this.start, "'with' in strict mode");
          }

          this.next();
          node.object = this.parseParenExpression();
          node.body = this.parseStatement("with");
          return this.finishNode(node, "WithStatement");
        };

        pp$1.parseEmptyStatement = function (node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        };

        pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
          for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1];

            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared");
            }
          }

          var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;

          for (var i = this.labels.length - 1; i >= 0; i--) {
            var label$1 = this.labels[i];

            if (label$1.statementStart === node.start) {
              label$1.statementStart = this.start;
              label$1.kind = kind;
            } else {
              break;
            }
          }

          this.labels.push({
            name: maybeName,
            kind: kind,
            statementStart: this.start
          });
          node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
          this.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        };

        pp$1.parseExpressionStatement = function (node, expr) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        };

        pp$1.parseBlock = function (createNewLexicalScope, node) {
          if (createNewLexicalScope === void 0) createNewLexicalScope = true;
          if (node === void 0) node = this.startNode();
          node.body = [];
          this.expect(types.braceL);

          if (createNewLexicalScope) {
            this.enterScope(0);
          }

          while (!this.eat(types.braceR)) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }

          if (createNewLexicalScope) {
            this.exitScope();
          }

          return this.finishNode(node, "BlockStatement");
        };

        pp$1.parseFor = function (node, init) {
          node.init = init;
          this.expect(types.semi);
          node.test = this.type === types.semi ? null : this.parseExpression();
          this.expect(types.semi);
          node.update = this.type === types.parenR ? null : this.parseExpression();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, "ForStatement");
        };

        pp$1.parseForIn = function (node, init) {
          var isForIn = this.type === types._in;
          this.next();

          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
          } else if (init.type === "AssignmentPattern") {
            this.raise(init.start, "Invalid left-hand side in for-loop");
          }

          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        };

        pp$1.parseVar = function (node, isFor, kind) {
          node.declarations = [];
          node.kind = kind;

          for (;;) {
            var decl = this.startNode();
            this.parseVarId(decl, kind);

            if (this.eat(types.eq)) {
              decl.init = this.parseMaybeAssign(isFor);
            } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
              this.unexpected();
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
              this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
            } else {
              decl.init = null;
            }

            node.declarations.push(this.finishNode(decl, "VariableDeclarator"));

            if (!this.eat(types.comma)) {
              break;
            }
          }

          return node;
        };

        pp$1.parseVarId = function (decl, kind) {
          decl.id = this.parseBindingAtom();
          this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
        };

        var FUNC_STATEMENT = 1,
            FUNC_HANGING_STATEMENT = 2,
            FUNC_NULLABLE_ID = 4;

        pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
          this.initFunction(node);

          if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
            if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected();
            }

            node.generator = this.eat(types.star);
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          if (statement & FUNC_STATEMENT) {
            node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();

            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
            }
          }

          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(node.async, node.generator));

          if (!(statement & FUNC_STATEMENT)) {
            node.id = this.type === types.name ? this.parseIdent() : null;
          }

          this.parseFunctionParams(node);
          this.parseFunctionBody(node, allowExpressionBody, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        };

        pp$1.parseFunctionParams = function (node) {
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
        };

        pp$1.parseClass = function (node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true;
          this.parseClassId(node, isStatement);
          this.parseClassSuper(node);
          var classBody = this.startNode();
          var hadConstructor = false;
          classBody.body = [];
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            var element = this.parseClassElement(node.superClass !== null);

            if (element) {
              classBody.body.push(element);

              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class");
                }

                hadConstructor = true;
              }
            }
          }

          node.body = this.finishNode(classBody, "ClassBody");
          this.strict = oldStrict;
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        };

        pp$1.parseClassElement = function (constructorAllowsSuper) {
          var this$1 = this;

          if (this.eat(types.semi)) {
            return null;
          }

          var method = this.startNode();

          var tryContextual = function tryContextual(k, noLineBreak) {
            if (noLineBreak === void 0) noLineBreak = false;
            var start = this$1.start,
                startLoc = this$1.startLoc;

            if (!this$1.eatContextual(k)) {
              return false;
            }

            if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
              return true;
            }

            if (method.key) {
              this$1.unexpected();
            }

            method.computed = false;
            method.key = this$1.startNodeAt(start, startLoc);
            method.key.name = k;
            this$1.finishNode(method.key, "Identifier");
            return false;
          };

          method.kind = "method";
          method.static = tryContextual("static");
          var isGenerator = this.eat(types.star);
          var isAsync = false;

          if (!isGenerator) {
            if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
              isAsync = true;
              isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            } else if (tryContextual("get")) {
              method.kind = "get";
            } else if (tryContextual("set")) {
              method.kind = "set";
            }
          }

          if (!method.key) {
            this.parsePropertyName(method);
          }

          var key = method.key;
          var allowsDirectSuper = false;

          if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
            if (method.kind !== "method") {
              this.raise(key.start, "Constructor can't have get/set modifier");
            }

            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator");
            }

            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method");
            }

            method.kind = "constructor";
            allowsDirectSuper = constructorAllowsSuper;
          } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
            this.raise(key.start, "Classes may not have a static property named prototype");
          }

          this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);

          if (method.kind === "get" && method.value.params.length !== 0) {
            this.raiseRecoverable(method.value.start, "getter should have no params");
          }

          if (method.kind === "set" && method.value.params.length !== 1) {
            this.raiseRecoverable(method.value.start, "setter should have exactly one param");
          }

          if (method.kind === "set" && method.value.params[0].type === "RestElement") {
            this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
          }

          return method;
        };

        pp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
          method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return this.finishNode(method, "MethodDefinition");
        };

        pp$1.parseClassId = function (node, isStatement) {
          if (this.type === types.name) {
            node.id = this.parseIdent();

            if (isStatement) {
              this.checkLVal(node.id, BIND_LEXICAL, false);
            }
          } else {
            if (isStatement === true) {
              this.unexpected();
            }

            node.id = null;
          }
        };

        pp$1.parseClassSuper = function (node) {
          node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
        };

        pp$1.parseExport = function (node, exports) {
          this.next();

          if (this.eat(types.star)) {
            this.expectContextual("from");

            if (this.type !== types.string) {
              this.unexpected();
            }

            node.source = this.parseExprAtom();
            this.semicolon();
            return this.finishNode(node, "ExportAllDeclaration");
          }

          if (this.eat(types._default)) {
            this.checkExport(exports, "default", this.lastTokStart);
            var isAsync;

            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next();

              if (isAsync) {
                this.next();
              }

              node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
            } else if (this.type === types._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else {
              node.declaration = this.parseMaybeAssign();
              this.semicolon();
            }

            return this.finishNode(node, "ExportDefaultDeclaration");
          }

          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null);

            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports, node.declaration.declarations);
            } else {
              this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
            }

            node.specifiers = [];
            node.source = null;
          } else {
            node.declaration = null;
            node.specifiers = this.parseExportSpecifiers(exports);

            if (this.eatContextual("from")) {
              if (this.type !== types.string) {
                this.unexpected();
              }

              node.source = this.parseExprAtom();
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                var spec = list[i];
                this.checkUnreserved(spec.local);
                this.checkLocalExport(spec.local);
              }

              node.source = null;
            }

            this.semicolon();
          }

          return this.finishNode(node, "ExportNamedDeclaration");
        };

        pp$1.checkExport = function (exports, name, pos) {
          if (!exports) {
            return;
          }

          if (has(exports, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
          }

          exports[name] = true;
        };

        pp$1.checkPatternExport = function (exports, pat) {
          var type = pat.type;

          if (type === "Identifier") {
            this.checkExport(exports, pat.name, pat.start);
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkPatternExport(exports, prop);
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];

              if (elt) {
                this.checkPatternExport(exports, elt);
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports, pat.value);
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports, pat.left);
          } else if (type === "RestElement") {
            this.checkPatternExport(exports, pat.argument);
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports, pat.expression);
          }
        };

        pp$1.checkVariableExport = function (exports, decls) {
          if (!exports) {
            return;
          }

          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i];
            this.checkPatternExport(exports, decl.id);
          }
        };

        pp$1.shouldParseExportStatement = function () {
          return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
        };

        pp$1.parseExportSpecifiers = function (exports) {
          var nodes = [],
              first = true;
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node = this.startNode();
            node.local = this.parseIdent(true);
            node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
            this.checkExport(exports, node.exported.name, node.exported.start);
            nodes.push(this.finishNode(node, "ExportSpecifier"));
          }

          return nodes;
        };

        pp$1.parseImport = function (node) {
          this.next();

          if (this.type === types.string) {
            node.specifiers = empty;
            node.source = this.parseExprAtom();
          } else {
            node.specifiers = this.parseImportSpecifiers();
            this.expectContextual("from");
            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
          }

          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        };

        pp$1.parseImportSpecifiers = function () {
          var nodes = [],
              first = true;

          if (this.type === types.name) {
            var node = this.startNode();
            node.local = this.parseIdent();
            this.checkLVal(node.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));

            if (!this.eat(types.comma)) {
              return nodes;
            }
          }

          if (this.type === types.star) {
            var node$1 = this.startNode();
            this.next();
            this.expectContextual("as");
            node$1.local = this.parseIdent();
            this.checkLVal(node$1.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
            return nodes;
          }

          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node$2 = this.startNode();
            node$2.imported = this.parseIdent(true);

            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent();
            } else {
              this.checkUnreserved(node$2.imported);
              node$2.local = node$2.imported;
            }

            this.checkLVal(node$2.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }

          return nodes;
        };

        pp$1.adaptDirectivePrologue = function (statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1);
          }
        };

        pp$1.isDirectiveCandidate = function (statement) {
          return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === "\"" || this.input[statement.start] === "'");
        };

        var pp$2 = Parser.prototype;

        pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) {
            switch (node.type) {
              case "Identifier":
                if (this.inAsync && node.name === "await") {
                  this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                }

                break;

              case "ObjectPattern":
              case "ArrayPattern":
              case "RestElement":
                break;

              case "ObjectExpression":
                node.type = "ObjectPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                  var prop = list[i];
                  this.toAssignable(prop, isBinding);

                  if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                    this.raise(prop.argument.start, "Unexpected token");
                  }
                }

                break;

              case "Property":
                if (node.kind !== "init") {
                  this.raise(node.key.start, "Object pattern can't contain getter or setter");
                }

                this.toAssignable(node.value, isBinding);
                break;

              case "ArrayExpression":
                node.type = "ArrayPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                this.toAssignableList(node.elements, isBinding);
                break;

              case "SpreadElement":
                node.type = "RestElement";
                this.toAssignable(node.argument, isBinding);

                if (node.argument.type === "AssignmentPattern") {
                  this.raise(node.argument.start, "Rest elements cannot have a default value");
                }

                break;

              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                }

                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isBinding);

              case "AssignmentPattern":
                break;

              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;

              case "MemberExpression":
                if (!isBinding) {
                  break;
                }

              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }

          return node;
        };

        pp$2.toAssignableList = function (exprList, isBinding) {
          var end = exprList.length;

          for (var i = 0; i < end; i++) {
            var elt = exprList[i];

            if (elt) {
              this.toAssignable(elt, isBinding);
            }
          }

          if (end) {
            var last = exprList[end - 1];

            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
              this.unexpected(last.argument.start);
            }
          }

          return exprList;
        };

        pp$2.parseSpread = function (refDestructuringErrors) {
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          return this.finishNode(node, "SpreadElement");
        };

        pp$2.parseRestBinding = function () {
          var node = this.startNode();
          this.next();

          if (this.options.ecmaVersion === 6 && this.type !== types.name) {
            this.unexpected();
          }

          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        };

        pp$2.parseBindingAtom = function () {
          if (this.options.ecmaVersion >= 6) {
            switch (this.type) {
              case types.bracketL:
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(types.bracketR, true, true);
                return this.finishNode(node, "ArrayPattern");

              case types.braceL:
                return this.parseObj(true);
            }
          }

          return this.parseIdent();
        };

        pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(types.comma);
            }

            if (allowEmpty && this.type === types.comma) {
              elts.push(null);
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            } else if (this.type === types.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest);
              elts.push(rest);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              this.expect(close);
              break;
            } else {
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem);
              elts.push(elem);
            }
          }

          return elts;
        };

        pp$2.parseBindingListItem = function (param) {
          return param;
        };

        pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
          left = left || this.parseBindingAtom();

          if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
            return left;
          }

          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, "AssignmentPattern");
        };

        pp$2.checkLVal = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE;

          switch (expr.type) {
            case "Identifier":
              if (bindingType === BIND_LEXICAL && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }

              if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
              }

              if (checkClashes) {
                if (has(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }

                checkClashes[expr.name] = true;
              }

              if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
                this.declareName(expr.name, bindingType, expr.start);
              }

              break;

            case "MemberExpression":
              if (bindingType) {
                this.raiseRecoverable(expr.start, "Binding member expression");
              }

              break;

            case "ObjectPattern":
              for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.checkLVal(prop, bindingType, checkClashes);
              }

              break;

            case "Property":
              this.checkLVal(expr.value, bindingType, checkClashes);
              break;

            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];

                if (elem) {
                  this.checkLVal(elem, bindingType, checkClashes);
                }
              }

              break;

            case "AssignmentPattern":
              this.checkLVal(expr.left, bindingType, checkClashes);
              break;

            case "RestElement":
              this.checkLVal(expr.argument, bindingType, checkClashes);
              break;

            case "ParenthesizedExpression":
              this.checkLVal(expr.expression, bindingType, checkClashes);
              break;

            default:
              this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
          }
        };

        var pp$3 = Parser.prototype;

        pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return;
          }

          if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return;
          }

          var key = prop.key;
          var name;

          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;

            case "Literal":
              name = String(key.value);
              break;

            default:
              return;
          }

          var kind = prop.kind;

          if (this.options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors) {
                  if (refDestructuringErrors.doubleProto < 0) {
                    refDestructuringErrors.doubleProto = key.start;
                  }
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                }
              }

              propHash.proto = true;
            }

            return;
          }

          name = "$" + name;
          var other = propHash[name];

          if (other) {
            var redefinition;

            if (kind === "init") {
              redefinition = this.strict && other.init || other.get || other.set;
            } else {
              redefinition = other.init || other[kind];
            }

            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property");
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            };
          }

          other[kind] = true;
        };

        pp$3.parseExpression = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

          if (this.type === types.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            node.expressions = [expr];

            while (this.eat(types.comma)) {
              node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
            }

            return this.finishNode(node, "SequenceExpression");
          }

          return expr;
        };

        pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) {
              return this.parseYield(noIn);
            } else {
              this.exprAllowed = false;
            }
          }

          var ownDestructuringErrors = false,
              oldParenAssign = -1,
              oldTrailingComma = -1;

          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
            oldTrailingComma = refDestructuringErrors.trailingComma;
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
          } else {
            refDestructuringErrors = new DestructuringErrors();
            ownDestructuringErrors = true;
          }

          var startPos = this.start,
              startLoc = this.startLoc;

          if (this.type === types.parenL || this.type === types.name) {
            this.potentialArrowAt = this.start;
          }

          var left = this.parseMaybeConditional(noIn, refDestructuringErrors);

          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startPos, startLoc);
          }

          if (this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            node.operator = this.value;
            node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;

            if (!ownDestructuringErrors) {
              refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
            }

            if (refDestructuringErrors.shorthandAssign >= node.left.start) {
              refDestructuringErrors.shorthandAssign = -1;
            }

            this.checkLVal(left);
            this.next();
            node.right = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "AssignmentExpression");
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true);
            }
          }

          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
          }

          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma;
          }

          return left;
        };

        pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprOps(noIn, refDestructuringErrors);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          if (this.eat(types.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssign();
            this.expect(types.colon);
            node.alternate = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "ConditionalExpression");
          }

          return expr;
        };

        pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeUnary(refDestructuringErrors, false);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
        };

        pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
          var prec = this.type.binop;

          if (prec != null && (!noIn || this.type !== types._in)) {
            if (prec > minPrec) {
              var logical = this.type === types.logicalOR || this.type === types.logicalAND;
              var op = this.value;
              this.next();
              var startPos = this.start,
                  startLoc = this.startLoc;
              var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
              var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
            }
          }

          return left;
        };

        pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.operator = op;
          node.right = right;
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        };

        pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
          var startPos = this.start,
              startLoc = this.startLoc,
              expr;

          if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
            expr = this.parseAwait();
            sawUnary = true;
          } else if (this.type.prefix) {
            var node = this.startNode(),
                update = this.type === types.incDec;
            node.operator = this.value;
            node.prefix = true;
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refDestructuringErrors, true);

            if (update) {
              this.checkLVal(node.argument);
            } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
            } else {
              sawUnary = true;
            }

            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors);

            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr;
            }

            while (this.type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value;
              node$1.prefix = false;
              node$1.argument = expr;
              this.checkLVal(expr);
              this.next();
              expr = this.finishNode(node$1, "UpdateExpression");
            }
          }

          if (!sawUnary && this.eat(types.starstar)) {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
          } else {
            return expr;
          }
        };

        pp$3.parseExprSubscripts = function (refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprAtom(refDestructuringErrors);

          if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
            return expr;
          }

          var result = this.parseSubscripts(expr, startPos, startLoc);

          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1;
            }

            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1;
            }
          }

          return result;
        };

        pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
          var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";

          while (true) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);

            if (element === base || element.type === "ArrowFunctionExpression") {
              return element;
            }

            base = element;
          }
        };

        pp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow) {
          var computed = this.eat(types.bracketL);

          if (computed || this.eat(types.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
            node.computed = !!computed;

            if (computed) {
              this.expect(types.bracketR);
            }

            base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0;
            this.awaitPos = 0;
            this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);

            if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();

              if (this.awaitIdentPos > 0) {
                this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
              }

              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;
            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base;
            node$1.arguments = exprList;
            base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types.backQuote) {
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base;
            node$2.quasi = this.parseTemplate({
              isTagged: true
            });
            base = this.finishNode(node$2, "TaggedTemplateExpression");
          }

          return base;
        };

        pp$3.parseExprAtom = function (refDestructuringErrors) {
          if (this.type === types.slash) {
            this.readRegexp();
          }

          var node,
              canBeArrow = this.potentialArrowAt === this.start;

          switch (this.type) {
            case types._super:
              if (!this.allowSuper) {
                this.raise(this.start, "'super' keyword outside a method");
              }

              node = this.startNode();
              this.next();

              if (this.type === types.parenL && !this.allowDirectSuper) {
                this.raise(node.start, "super() call outside constructor of a subclass");
              }

              if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
                this.unexpected();
              }

              return this.finishNode(node, "Super");

            case types._this:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");

            case types.name:
              var startPos = this.start,
                  startLoc = this.startLoc,
                  containsEsc = this.containsEsc;
              var id = this.parseIdent(false);

              if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
              }

              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types.arrow)) {
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                }

                if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
                  id = this.parseIdent(false);

                  if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                    this.unexpected();
                  }

                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                }
              }

              return id;

            case types.regexp:
              var value = this.value;
              node = this.parseLiteral(value.value);
              node.regex = {
                pattern: value.pattern,
                flags: value.flags
              };
              return node;

            case types.num:
            case types.string:
              return this.parseLiteral(this.value);

            case types._null:
            case types._true:
            case types._false:
              node = this.startNode();
              node.value = this.type === types._null ? null : this.type === types._true;
              node.raw = this.type.keyword;
              this.next();
              return this.finishNode(node, "Literal");

            case types.parenL:
              var start = this.start,
                  expr = this.parseParenAndDistinguishExpression(canBeArrow);

              if (refDestructuringErrors) {
                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                  refDestructuringErrors.parenthesizedAssign = start;
                }

                if (refDestructuringErrors.parenthesizedBind < 0) {
                  refDestructuringErrors.parenthesizedBind = start;
                }
              }

              return expr;

            case types.bracketL:
              node = this.startNode();
              this.next();
              node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
              return this.finishNode(node, "ArrayExpression");

            case types.braceL:
              return this.parseObj(false, refDestructuringErrors);

            case types._function:
              node = this.startNode();
              this.next();
              return this.parseFunction(node, 0);

            case types._class:
              return this.parseClass(this.startNode(), false);

            case types._new:
              return this.parseNew();

            case types.backQuote:
              return this.parseTemplate();

            case types._import:
              if (this.options.ecmaVersion >= 11) {
                return this.parseExprImport();
              } else {
                return this.unexpected();
              }

            default:
              this.unexpected();
          }
        };

        pp$3.parseExprImport = function () {
          var node = this.startNode();
          this.next();

          switch (this.type) {
            case types.parenL:
              return this.parseDynamicImport(node);

            default:
              this.unexpected();
          }
        };

        pp$3.parseDynamicImport = function (node) {
          this.next();
          node.source = this.parseMaybeAssign();

          if (!this.eat(types.parenR)) {
            var errorPos = this.start;

            if (this.eat(types.comma) && this.eat(types.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }

          return this.finishNode(node, "ImportExpression");
        };

        pp$3.parseLiteral = function (value) {
          var node = this.startNode();
          node.value = value;
          node.raw = this.input.slice(this.start, this.end);

          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1);
          }

          this.next();
          return this.finishNode(node, "Literal");
        };

        pp$3.parseParenExpression = function () {
          this.expect(types.parenL);
          var val = this.parseExpression();
          this.expect(types.parenR);
          return val;
        };

        pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
          var startPos = this.start,
              startLoc = this.startLoc,
              val,
              allowTrailingComma = this.options.ecmaVersion >= 8;

          if (this.options.ecmaVersion >= 6) {
            this.next();
            var innerStartPos = this.start,
                innerStartLoc = this.startLoc;
            var exprList = [],
                first = true,
                lastIsComma = false;
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                spreadStart;
            this.yieldPos = 0;
            this.awaitPos = 0;

            while (this.type !== types.parenR) {
              first ? first = false : this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                lastIsComma = true;
                break;
              } else if (this.type === types.ellipsis) {
                spreadStart = this.start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));

                if (this.type === types.comma) {
                  this.raise(this.start, "Comma is not permitted after the rest element");
                }

                break;
              } else {
                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
              }
            }

            var innerEndPos = this.start,
                innerEndLoc = this.startLoc;
            this.expect(types.parenR);

            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              return this.parseParenArrowList(startPos, startLoc, exprList);
            }

            if (!exprList.length || lastIsComma) {
              this.unexpected(this.lastTokStart);
            }

            if (spreadStart) {
              this.unexpected(spreadStart);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
          } else {
            val = this.parseParenExpression();
          }

          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            par.expression = val;
            return this.finishNode(par, "ParenthesizedExpression");
          } else {
            return val;
          }
        };

        pp$3.parseParenItem = function (item) {
          return item;
        };

        pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
        };

        var empty$1 = [];

        pp$3.parseNew = function () {
          if (this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          }

          var node = this.startNode();
          var meta = this.parseIdent(true);

          if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            node.property = this.parseIdent(true);

            if (node.property.name !== "target" || containsEsc) {
              this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
            }

            if (!this.inNonArrowFunction()) {
              this.raiseRecoverable(node.start, "new.target can only be used in functions");
            }

            return this.finishNode(node, "MetaProperty");
          }

          var startPos = this.start,
              startLoc = this.startLoc,
              isImport = this.type === types._import;
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()");
          }

          if (this.eat(types.parenL)) {
            node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
          } else {
            node.arguments = empty$1;
          }

          return this.finishNode(node, "NewExpression");
        };

        pp$3.parseTemplateElement = function (ref) {
          var isTagged = ref.isTagged;
          var elem = this.startNode();

          if (this.type === types.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
            }

            elem.value = {
              raw: this.value,
              cooked: null
            };
          } else {
            elem.value = {
              raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
              cooked: this.value
            };
          }

          this.next();
          elem.tail = this.type === types.backQuote;
          return this.finishNode(elem, "TemplateElement");
        };

        pp$3.parseTemplate = function (ref) {
          if (ref === void 0) ref = {};
          var isTagged = ref.isTagged;
          if (isTagged === void 0) isTagged = false;
          var node = this.startNode();
          this.next();
          node.expressions = [];
          var curElt = this.parseTemplateElement({
            isTagged: isTagged
          });
          node.quasis = [curElt];

          while (!curElt.tail) {
            if (this.type === types.eof) {
              this.raise(this.pos, "Unterminated template literal");
            }

            this.expect(types.dollarBraceL);
            node.expressions.push(this.parseExpression());
            this.expect(types.braceR);
            node.quasis.push(curElt = this.parseTemplateElement({
              isTagged: isTagged
            }));
          }

          this.next();
          return this.finishNode(node, "TemplateLiteral");
        };

        pp$3.isAsyncProp = function (prop) {
          return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp$3.parseObj = function (isPattern, refDestructuringErrors) {
          var node = this.startNode(),
              first = true,
              propHash = {};
          node.properties = [];
          this.next();

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var prop = this.parseProperty(isPattern, refDestructuringErrors);

            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors);
            }

            node.properties.push(prop);
          }

          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        };

        pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
          var prop = this.startNode(),
              isGenerator,
              isAsync,
              startPos,
              startLoc;

          if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              return this.finishNode(prop, "RestElement");
            }

            if (this.type === types.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = this.start;
              }

              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = this.start;
              }
            }

            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);

            if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }

            return this.finishNode(prop, "SpreadElement");
          }

          if (this.options.ecmaVersion >= 6) {
            prop.method = false;
            prop.shorthand = false;

            if (isPattern || refDestructuringErrors) {
              startPos = this.start;
              startLoc = this.startLoc;
            }

            if (!isPattern) {
              isGenerator = this.eat(types.star);
            }
          }

          var containsEsc = this.containsEsc;
          this.parsePropertyName(prop);

          if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            this.parsePropertyName(prop, refDestructuringErrors);
          } else {
            isAsync = false;
          }

          this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
          return this.finishNode(prop, "Property");
        };

        pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types.colon) {
            this.unexpected();
          }

          if (this.eat(types.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
            prop.kind = "init";
          } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
            if (isPattern) {
              this.unexpected();
            }

            prop.kind = "init";
            prop.method = true;
            prop.value = this.parseMethod(isGenerator, isAsync);
          } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types.comma && this.type !== types.braceR) {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            prop.kind = prop.key.name;
            this.parsePropertyName(prop);
            prop.value = this.parseMethod(false);
            var paramCount = prop.kind === "get" ? 0 : 1;

            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;

              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params");
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param");
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
              }
            }
          } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            this.checkUnreserved(prop.key);

            if (prop.key.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = startPos;
            }

            prop.kind = "init";

            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else if (this.type === types.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = this.start;
              }

              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else {
              prop.value = prop.key;
            }

            prop.shorthand = true;
          } else {
            this.unexpected();
          }
        };

        pp$3.parsePropertyName = function (prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
            }
          }

          return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
        };

        pp$3.initFunction = function (node) {
          node.id = null;

          if (this.options.ecmaVersion >= 6) {
            node.generator = node.expression = false;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = false;
          }
        };

        pp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(),
              oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.initFunction(node);

          if (this.options.ecmaVersion >= 6) {
            node.generator = isGenerator;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
          this.parseFunctionBody(node, false, true);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "FunctionExpression");
        };

        pp$3.parseArrowExpression = function (node, params, isAsync) {
          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
          this.initFunction(node);

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          node.params = this.toAssignableList(params, true);
          this.parseFunctionBody(node, true, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "ArrowFunctionExpression");
        };

        pp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {
          var isExpression = isArrowFunction && this.type !== types.braceL;
          var oldStrict = this.strict,
              useStrict = false;

          if (isExpression) {
            node.body = this.parseMaybeAssign();
            node.expression = true;
            this.checkParams(node, false);
          } else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective(this.end);

              if (useStrict && nonSimple) {
                this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
              }
            }

            var oldLabels = this.labels;
            this.labels = [];

            if (useStrict) {
              this.strict = true;
            }

            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
            node.body = this.parseBlock(false);
            node.expression = false;
            this.adaptDirectivePrologue(node.body.body);
            this.labels = oldLabels;
          }

          this.exitScope();

          if (this.strict && node.id) {
            this.checkLVal(node.id, BIND_OUTSIDE);
          }

          this.strict = oldStrict;
        };

        pp$3.isSimpleParamList = function (params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i];

            if (param.type !== "Identifier") {
              return false;
            }
          }

          return true;
        };

        pp$3.checkParams = function (node, allowDuplicates) {
          var nameHash = {};

          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i];
            this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
          }
        };

        pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (!first) {
              this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break;
              }
            } else {
              first = false;
            }

            var elt = void 0;

            if (allowEmpty && this.type === types.comma) {
              elt = null;
            } else if (this.type === types.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors);

              if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                refDestructuringErrors.trailingComma = this.start;
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors);
            }

            elts.push(elt);
          }

          return elts;
        };

        pp$3.checkUnreserved = function (ref) {
          var start = ref.start;
          var end = ref.end;
          var name = ref.name;

          if (this.inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
          }

          if (this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
          }

          if (this.keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'");
          }

          if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
            return;
          }

          var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

          if (re.test(name)) {
            if (!this.inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
            }

            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
          }
        };

        pp$3.parseIdent = function (liberal, isBinding) {
          var node = this.startNode();

          if (this.type === types.name) {
            node.name = this.value;
          } else if (this.type.keyword) {
            node.name = this.type.keyword;

            if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
              this.context.pop();
            }
          } else {
            this.unexpected();
          }

          this.next(!!liberal);
          this.finishNode(node, "Identifier");

          if (!liberal) {
            this.checkUnreserved(node);

            if (node.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = node.start;
            }
          }

          return node;
        };

        pp$3.parseYield = function (noIn) {
          if (!this.yieldPos) {
            this.yieldPos = this.start;
          }

          var node = this.startNode();
          this.next();

          if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
            node.delegate = false;
            node.argument = null;
          } else {
            node.delegate = this.eat(types.star);
            node.argument = this.parseMaybeAssign(noIn);
          }

          return this.finishNode(node, "YieldExpression");
        };

        pp$3.parseAwait = function () {
          if (!this.awaitPos) {
            this.awaitPos = this.start;
          }

          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeUnary(null, false);
          return this.finishNode(node, "AwaitExpression");
        };

        var pp$4 = Parser.prototype;

        pp$4.raise = function (pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          err.pos = pos;
          err.loc = loc;
          err.raisedAt = this.pos;
          throw err;
        };

        pp$4.raiseRecoverable = pp$4.raise;

        pp$4.curPosition = function () {
          if (this.options.locations) {
            return new Position(this.curLine, this.pos - this.lineStart);
          }
        };

        var pp$5 = Parser.prototype;

        var Scope = function Scope(flags) {
          this.flags = flags;
          this.var = [];
          this.lexical = [];
          this.functions = [];
        };

        pp$5.enterScope = function (flags) {
          this.scopeStack.push(new Scope(flags));
        };

        pp$5.exitScope = function () {
          this.scopeStack.pop();
        };

        pp$5.treatFunctionsAsVarInScope = function (scope) {
          return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
        };

        pp$5.declareName = function (name, bindingType, pos) {
          var redeclared = false;

          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
            scope.lexical.push(name);

            if (this.inModule && scope.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope();
            scope$1.lexical.push(name);
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope();

            if (this.treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1;
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
            }

            scope$2.functions.push(name);
          } else {
            for (var i = this.scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = this.scopeStack[i];

              if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }

              scope$3.var.push(name);

              if (this.inModule && scope$3.flags & SCOPE_TOP) {
                delete this.undefinedExports[name];
              }

              if (scope$3.flags & SCOPE_VAR) {
                break;
              }
            }
          }

          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
          }
        };

        pp$5.checkLocalExport = function (id) {
          if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
            this.undefinedExports[id.name] = id;
          }
        };

        pp$5.currentScope = function () {
          return this.scopeStack[this.scopeStack.length - 1];
        };

        pp$5.currentVarScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR) {
              return scope;
            }
          }
        };

        pp$5.currentThisScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope;
            }
          }
        };

        var Node = function Node(parser, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;

          if (parser.options.locations) {
            this.loc = new SourceLocation(parser, loc);
          }

          if (parser.options.directSourceFile) {
            this.sourceFile = parser.options.directSourceFile;
          }

          if (parser.options.ranges) {
            this.range = [pos, 0];
          }
        };

        var pp$6 = Parser.prototype;

        pp$6.startNode = function () {
          return new Node(this, this.start, this.startLoc);
        };

        pp$6.startNodeAt = function (pos, loc) {
          return new Node(this, pos, loc);
        };

        function finishNodeAt(node, type, pos, loc) {
          node.type = type;
          node.end = pos;

          if (this.options.locations) {
            node.loc.end = loc;
          }

          if (this.options.ranges) {
            node.range[1] = pos;
          }

          return node;
        }

        pp$6.finishNode = function (node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        };

        pp$6.finishNodeAt = function (node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        };

        var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
          this.token = token;
          this.isExpr = !!isExpr;
          this.preserveSpace = !!preserveSpace;
          this.override = override;
          this.generator = !!generator;
        };

        var types$1 = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function (p) {
            return p.tryReadTemplateToken();
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        };
        var pp$7 = Parser.prototype;

        pp$7.initialContext = function () {
          return [types$1.b_stat];
        };

        pp$7.braceIsBlock = function (prevType) {
          var parent = this.curContext();

          if (parent === types$1.f_expr || parent === types$1.f_stat) {
            return true;
          }

          if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
            return !parent.isExpr;
          }

          if (prevType === types._return || prevType === types.name && this.exprAllowed) {
            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
          }

          if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
            return true;
          }

          if (prevType === types.braceL) {
            return parent === types$1.b_stat;
          }

          if (prevType === types._var || prevType === types._const || prevType === types.name) {
            return false;
          }

          return !this.exprAllowed;
        };

        pp$7.inGeneratorContext = function () {
          for (var i = this.context.length - 1; i >= 1; i--) {
            var context = this.context[i];

            if (context.token === "function") {
              return context.generator;
            }
          }

          return false;
        };

        pp$7.updateContext = function (prevType) {
          var update,
              type = this.type;

          if (type.keyword && prevType === types.dot) {
            this.exprAllowed = false;
          } else if (update = type.updateContext) {
            update.call(this, prevType);
          } else {
            this.exprAllowed = type.beforeExpr;
          }
        };

        types.parenR.updateContext = types.braceR.updateContext = function () {
          if (this.context.length === 1) {
            this.exprAllowed = true;
            return;
          }

          var out = this.context.pop();

          if (out === types$1.b_stat && this.curContext().token === "function") {
            out = this.context.pop();
          }

          this.exprAllowed = !out.isExpr;
        };

        types.braceL.updateContext = function (prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
          this.exprAllowed = true;
        };

        types.dollarBraceL.updateContext = function () {
          this.context.push(types$1.b_tmpl);
          this.exprAllowed = true;
        };

        types.parenL.updateContext = function (prevType) {
          var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
          this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
          this.exprAllowed = true;
        };

        types.incDec.updateContext = function () {};

        types._function.updateContext = types._class.updateContext = function (prevType) {
          if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
            this.context.push(types$1.f_expr);
          } else {
            this.context.push(types$1.f_stat);
          }

          this.exprAllowed = false;
        };

        types.backQuote.updateContext = function () {
          if (this.curContext() === types$1.q_tmpl) {
            this.context.pop();
          } else {
            this.context.push(types$1.q_tmpl);
          }

          this.exprAllowed = false;
        };

        types.star.updateContext = function (prevType) {
          if (prevType === types._function) {
            var index = this.context.length - 1;

            if (this.context[index] === types$1.f_expr) {
              this.context[index] = types$1.f_expr_gen;
            } else {
              this.context[index] = types$1.f_gen;
            }
          }

          this.exprAllowed = true;
        };

        types.name.updateContext = function (prevType) {
          var allowed = false;

          if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
            if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
              allowed = true;
            }
          }

          this.exprAllowed = allowed;
        };

        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
        var ecma11BinaryProperties = ecma10BinaryProperties;
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties
        };
        var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
        var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
        var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
        var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues
        };
        var data = {};

        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = {
            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          };
          d.nonBinary.Script_Extensions = d.nonBinary.Script;
          d.nonBinary.gc = d.nonBinary.General_Category;
          d.nonBinary.sc = d.nonBinary.Script;
          d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }

        buildUnicodeData(9);
        buildUnicodeData(10);
        buildUnicodeData(11);
        var pp$8 = Parser.prototype;

        var RegExpValidationState = function RegExpValidationState(parser) {
          this.parser = parser;
          this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
          this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
          this.source = "";
          this.flags = "";
          this.start = 0;
          this.switchU = false;
          this.switchN = false;
          this.pos = 0;
          this.lastIntValue = 0;
          this.lastStringValue = "";
          this.lastAssertionIsQuantifiable = false;
          this.numCapturingParens = 0;
          this.maxBackReference = 0;
          this.groupNames = [];
          this.backReferenceNames = [];
        };

        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1;
          this.start = start | 0;
          this.source = pattern + "";
          this.flags = flags;
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        };

        RegExpValidationState.prototype.raise = function raise(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        };

        RegExpValidationState.prototype.at = function at(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return -1;
          }

          var c = s.charCodeAt(i);

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
            return c;
          }

          var next = s.charCodeAt(i + 1);
          return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;
        };

        RegExpValidationState.prototype.nextIndex = function nextIndex(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return l;
          }

          var c = s.charCodeAt(i),
              next;

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {
            return i + 1;
          }

          return i + 2;
        };

        RegExpValidationState.prototype.current = function current() {
          return this.at(this.pos);
        };

        RegExpValidationState.prototype.lookahead = function lookahead() {
          return this.at(this.nextIndex(this.pos));
        };

        RegExpValidationState.prototype.advance = function advance() {
          this.pos = this.nextIndex(this.pos);
        };

        RegExpValidationState.prototype.eat = function eat(ch) {
          if (this.current() === ch) {
            this.advance();
            return true;
          }

          return false;
        };

        function codePointToString(ch) {
          if (ch <= 0xFFFF) {
            return String.fromCharCode(ch);
          }

          ch -= 0x10000;
          return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
        }

        pp$8.validateRegExpFlags = function (state) {
          var validFlags = state.validFlags;
          var flags = state.flags;

          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i);

            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag");
            }

            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag");
            }
          }
        };

        pp$8.validateRegExpPattern = function (state) {
          this.regexp_pattern(state);

          if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true;
            this.regexp_pattern(state);
          }
        };

        pp$8.regexp_pattern = function (state) {
          state.pos = 0;
          state.lastIntValue = 0;
          state.lastStringValue = "";
          state.lastAssertionIsQuantifiable = false;
          state.numCapturingParens = 0;
          state.maxBackReference = 0;
          state.groupNames.length = 0;
          state.backReferenceNames.length = 0;
          this.regexp_disjunction(state);

          if (state.pos !== state.source.length) {
            if (state.eat(0x29)) {
              state.raise("Unmatched ')'");
            }

            if (state.eat(0x5D) || state.eat(0x7D)) {
              state.raise("Lone quantifier brackets");
            }
          }

          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape");
          }

          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i];

            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced");
            }
          }
        };

        pp$8.regexp_disjunction = function (state) {
          this.regexp_alternative(state);

          while (state.eat(0x7C)) {
            this.regexp_alternative(state);
          }

          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          if (state.eat(0x7B)) {
            state.raise("Lone quantifier brackets");
          }
        };

        pp$8.regexp_alternative = function (state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
        };

        pp$8.regexp_eatTerm = function (state) {
          if (this.regexp_eatAssertion(state)) {
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              if (state.switchU) {
                state.raise("Invalid quantifier");
              }
            }

            return true;
          }

          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatAssertion = function (state) {
          var start = state.pos;
          state.lastAssertionIsQuantifiable = false;

          if (state.eat(0x5E) || state.eat(0x24)) {
            return true;
          }

          if (state.eat(0x5C)) {
            if (state.eat(0x42) || state.eat(0x62)) {
              return true;
            }

            state.pos = start;
          }

          if (state.eat(0x28) && state.eat(0x3F)) {
            var lookbehind = false;

            if (this.options.ecmaVersion >= 9) {
              lookbehind = state.eat(0x3C);
            }

            if (state.eat(0x3D) || state.eat(0x21)) {
              this.regexp_disjunction(state);

              if (!state.eat(0x29)) {
                state.raise("Unterminated group");
              }

              state.lastAssertionIsQuantifiable = !lookbehind;
              return true;
            }
          }

          state.pos = start;
          return false;
        };

        pp$8.regexp_eatQuantifier = function (state, noError) {
          if (noError === void 0) noError = false;

          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(0x3F);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatQuantifierPrefix = function (state, noError) {
          return state.eat(0x2A) || state.eat(0x2B) || state.eat(0x3F) || this.regexp_eatBracedQuantifier(state, noError);
        };

        pp$8.regexp_eatBracedQuantifier = function (state, noError) {
          var start = state.pos;

          if (state.eat(0x7B)) {
            var min = 0,
                max = -1;

            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue;

              if (state.eat(0x2C) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue;
              }

              if (state.eat(0x7D)) {
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier");
                }

                return true;
              }
            }

            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatAtom = function (state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        };

        pp$8.regexp_eatReverseSolidusAtomEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatUncapturingGroup = function (state) {
          var start = state.pos;

          if (state.eat(0x28)) {
            if (state.eat(0x3F) && state.eat(0x3A)) {
              this.regexp_disjunction(state);

              if (state.eat(0x29)) {
                return true;
              }

              state.raise("Unterminated group");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatCapturingGroup = function (state) {
          if (state.eat(0x28)) {
            if (this.options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state);
            } else if (state.current() === 0x3F) {
              state.raise("Invalid group");
            }

            this.regexp_disjunction(state);

            if (state.eat(0x29)) {
              state.numCapturingParens += 1;
              return true;
            }

            state.raise("Unterminated group");
          }

          return false;
        };

        pp$8.regexp_eatExtendedAtom = function (state) {
          return state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        };

        pp$8.regexp_eatInvalidBracedQuantifier = function (state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          return false;
        };

        pp$8.regexp_eatSyntaxCharacter = function (state) {
          var ch = state.current();

          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        function isSyntaxCharacter(ch) {
          return ch === 0x24 || ch >= 0x28 && ch <= 0x2B || ch === 0x2E || ch === 0x3F || ch >= 0x5B && ch <= 0x5E || ch >= 0x7B && ch <= 0x7D;
        }

        pp$8.regexp_eatPatternCharacters = function (state) {
          var start = state.pos;
          var ch = 0;

          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance();
          }

          return state.pos !== start;
        };

        pp$8.regexp_eatExtendedPatternCharacter = function (state) {
          var ch = state.current();

          if (ch !== -1 && ch !== 0x24 && !(ch >= 0x28 && ch <= 0x2B) && ch !== 0x2E && ch !== 0x3F && ch !== 0x5B && ch !== 0x5E && ch !== 0x7C) {
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_groupSpecifier = function (state) {
          if (state.eat(0x3F)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name");
              }

              state.groupNames.push(state.lastStringValue);
              return;
            }

            state.raise("Invalid group");
          }
        };

        pp$8.regexp_eatGroupName = function (state) {
          state.lastStringValue = "";

          if (state.eat(0x3C)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E)) {
              return true;
            }

            state.raise("Invalid capture group name");
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierName = function (state) {
          state.lastStringValue = "";

          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);

            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString(state.lastIntValue);
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierStart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 0x24 || ch === 0x5F;
        }

        pp$8.regexp_eatRegExpIdentifierPart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierPart(ch) {
          return isIdentifierChar(ch, true) || ch === 0x24 || ch === 0x5F || ch === 0x200C || ch === 0x200D;
        }

        pp$8.regexp_eatAtomEscape = function (state) {
          if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
            return true;
          }

          if (state.switchU) {
            if (state.current() === 0x63) {
              state.raise("Invalid unicode escape");
            }

            state.raise("Invalid escape");
          }

          return false;
        };

        pp$8.regexp_eatBackReference = function (state) {
          var start = state.pos;

          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;

            if (state.switchU) {
              if (n > state.maxBackReference) {
                state.maxBackReference = n;
              }

              return true;
            }

            if (n <= state.numCapturingParens) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatKGroupName = function (state) {
          if (state.eat(0x6B)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue);
              return true;
            }

            state.raise("Invalid named reference");
          }

          return false;
        };

        pp$8.regexp_eatCharacterEscape = function (state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        };

        pp$8.regexp_eatCControlLetter = function (state) {
          var start = state.pos;

          if (state.eat(0x63)) {
            if (this.regexp_eatControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatZero = function (state) {
          if (state.current() === 0x30 && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlEscape = function (state) {
          var ch = state.current();

          if (ch === 0x74) {
            state.lastIntValue = 0x09;
            state.advance();
            return true;
          }

          if (ch === 0x6E) {
            state.lastIntValue = 0x0A;
            state.advance();
            return true;
          }

          if (ch === 0x76) {
            state.lastIntValue = 0x0B;
            state.advance();
            return true;
          }

          if (ch === 0x66) {
            state.lastIntValue = 0x0C;
            state.advance();
            return true;
          }

          if (ch === 0x72) {
            state.lastIntValue = 0x0D;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlLetter = function (state) {
          var ch = state.current();

          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        function isControlLetter(ch) {
          return ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A;
        }

        pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x75)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;

              if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
                var leadSurrogateEnd = state.pos;

                if (state.eat(0x5C) && state.eat(0x75) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;

                  if (trail >= 0xDC00 && trail <= 0xDFFF) {
                    state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                    return true;
                  }
                }

                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
              }

              return true;
            }

            if (state.switchU && state.eat(0x7B) && this.regexp_eatHexDigits(state) && state.eat(0x7D) && isValidUnicode(state.lastIntValue)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid unicode escape");
            }

            state.pos = start;
          }

          return false;
        };

        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 0x10FFFF;
        }

        pp$8.regexp_eatIdentityEscape = function (state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true;
            }

            if (state.eat(0x2F)) {
              state.lastIntValue = 0x2F;
              return true;
            }

            return false;
          }

          var ch = state.current();

          if (ch !== 0x63 && (!state.switchN || ch !== 0x6B)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatDecimalEscape = function (state) {
          state.lastIntValue = 0;
          var ch = state.current();

          if (ch >= 0x31 && ch <= 0x39) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
              state.advance();
            } while ((ch = state.current()) >= 0x30 && ch <= 0x39);

            return true;
          }

          return false;
        };

        pp$8.regexp_eatCharacterClassEscape = function (state) {
          var ch = state.current();

          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1;
            state.advance();
            return true;
          }

          if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50 || ch === 0x70)) {
            state.lastIntValue = -1;
            state.advance();

            if (state.eat(0x7B) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D)) {
              return true;
            }

            state.raise("Invalid property name");
          }

          return false;
        };

        function isCharacterClassEscape(ch) {
          return ch === 0x64 || ch === 0x44 || ch === 0x73 || ch === 0x53 || ch === 0x77 || ch === 0x57;
        }

        pp$8.regexp_eatUnicodePropertyValueExpression = function (state) {
          var start = state.pos;

          if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D)) {
            var name = state.lastStringValue;

            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
              return true;
            }
          }

          state.pos = start;

          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
            return true;
          }

          return false;
        };

        pp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
          if (!has(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name");
          }

          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value");
          }
        };

        pp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name");
          }
        };

        pp$8.regexp_eatUnicodePropertyName = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyNameCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 0x5F;
        }

        pp$8.regexp_eatUnicodePropertyValue = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyValueCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }

        pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
          return this.regexp_eatUnicodePropertyValue(state);
        };

        pp$8.regexp_eatCharacterClass = function (state) {
          if (state.eat(0x5B)) {
            state.eat(0x5E);
            this.regexp_classRanges(state);

            if (state.eat(0x5D)) {
              return true;
            }

            state.raise("Unterminated character class");
          }

          return false;
        };

        pp$8.regexp_classRanges = function (state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue;

            if (state.eat(0x2D) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;

              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class");
              }

              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class");
              }
            }
          }
        };

        pp$8.regexp_eatClassAtom = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatClassEscape(state)) {
              return true;
            }

            if (state.switchU) {
              var ch$1 = state.current();

              if (ch$1 === 0x63 || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape");
              }

              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          var ch = state.current();

          if (ch !== 0x5D) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatClassEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x62)) {
            state.lastIntValue = 0x08;
            return true;
          }

          if (state.switchU && state.eat(0x2D)) {
            state.lastIntValue = 0x2D;
            return true;
          }

          if (!state.switchU && state.eat(0x63)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        };

        pp$8.regexp_eatClassControlLetter = function (state) {
          var ch = state.current();

          if (isDecimalDigit(ch) || ch === 0x5F) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatHexEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x78)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatDecimalDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isDecimalDigit(ch = state.current())) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
            state.advance();
          }

          return state.pos !== start;
        };

        function isDecimalDigit(ch) {
          return ch >= 0x30 && ch <= 0x39;
        }

        pp$8.regexp_eatHexDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isHexDigit(ch = state.current())) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return state.pos !== start;
        };

        function isHexDigit(ch) {
          return ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66;
        }

        function hexToInt(ch) {
          if (ch >= 0x41 && ch <= 0x46) {
            return 10 + (ch - 0x41);
          }

          if (ch >= 0x61 && ch <= 0x66) {
            return 10 + (ch - 0x61);
          }

          return ch - 0x30;
        }

        pp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;

            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;

              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
              } else {
                state.lastIntValue = n1 * 8 + n2;
              }
            } else {
              state.lastIntValue = n1;
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatOctalDigit = function (state) {
          var ch = state.current();

          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 0x30;
            state.advance();
            return true;
          }

          state.lastIntValue = 0;
          return false;
        };

        function isOctalDigit(ch) {
          return ch >= 0x30 && ch <= 0x37;
        }

        pp$8.regexp_eatFixedHexDigits = function (state, length) {
          var start = state.pos;
          state.lastIntValue = 0;

          for (var i = 0; i < length; ++i) {
            var ch = state.current();

            if (!isHexDigit(ch)) {
              state.pos = start;
              return false;
            }

            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return true;
        };

        var Token = function Token(p) {
          this.type = p.type;
          this.value = p.value;
          this.start = p.start;
          this.end = p.end;

          if (p.options.locations) {
            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
          }

          if (p.options.ranges) {
            this.range = [p.start, p.end];
          }
        };

        var pp$9 = Parser.prototype;

        pp$9.next = function (ignoreEscapeSequenceInKeyword) {
          if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
            this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
          }

          if (this.options.onToken) {
            this.options.onToken(new Token(this));
          }

          this.lastTokEnd = this.end;
          this.lastTokStart = this.start;
          this.lastTokEndLoc = this.endLoc;
          this.lastTokStartLoc = this.startLoc;
          this.nextToken();
        };

        pp$9.getToken = function () {
          this.next();
          return new Token(this);
        };

        if (typeof Symbol !== "undefined") {
          pp$9[Symbol.iterator] = function () {
            var this$1 = this;
            return {
              next: function next() {
                var token = this$1.getToken();
                return {
                  done: token.type === types.eof,
                  value: token
                };
              }
            };
          };
        }

        pp$9.curContext = function () {
          return this.context[this.context.length - 1];
        };

        pp$9.nextToken = function () {
          var curContext = this.curContext();

          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace();
          }

          this.start = this.pos;

          if (this.options.locations) {
            this.startLoc = this.curPosition();
          }

          if (this.pos >= this.input.length) {
            return this.finishToken(types.eof);
          }

          if (curContext.override) {
            return curContext.override(this);
          } else {
            this.readToken(this.fullCharCodeAtPos());
          }
        };

        pp$9.readToken = function (code) {
          if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
            return this.readWord();
          }

          return this.getTokenFromCode(code);
        };

        pp$9.fullCharCodeAtPos = function () {
          var code = this.input.charCodeAt(this.pos);

          if (code <= 0xd7ff || code >= 0xe000) {
            return code;
          }

          var next = this.input.charCodeAt(this.pos + 1);
          return (code << 10) + next - 0x35fdc00;
        };

        pp$9.skipBlockComment = function () {
          var startLoc = this.options.onComment && this.curPosition();
          var start = this.pos,
              end = this.input.indexOf("*/", this.pos += 2);

          if (end === -1) {
            this.raise(this.pos - 2, "Unterminated comment");
          }

          this.pos = end + 2;

          if (this.options.locations) {
            lineBreakG.lastIndex = start;
            var match;

            while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
              ++this.curLine;
              this.lineStart = match.index + match[0].length;
            }
          }

          if (this.options.onComment) {
            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipLineComment = function (startSkip) {
          var start = this.pos;
          var startLoc = this.options.onComment && this.curPosition();
          var ch = this.input.charCodeAt(this.pos += startSkip);

          while (this.pos < this.input.length && !isNewLine(ch)) {
            ch = this.input.charCodeAt(++this.pos);
          }

          if (this.options.onComment) {
            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipSpace = function () {
          loop: while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);

            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;

              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }

              case 10:
              case 8232:
              case 8233:
                ++this.pos;

                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }

                break;

              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;

                  case 47:
                    this.skipLineComment(2);
                    break;

                  default:
                    break loop;
                }

                break;

              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }

            }
          }
        };

        pp$9.finishToken = function (type, val) {
          this.end = this.pos;

          if (this.options.locations) {
            this.endLoc = this.curPosition();
          }

          var prevType = this.type;
          this.type = type;
          this.value = val;
          this.updateContext(prevType);
        };

        pp$9.readToken_dot = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next >= 48 && next <= 57) {
            return this.readNumber(true);
          }

          var next2 = this.input.charCodeAt(this.pos + 2);

          if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            this.pos += 3;
            return this.finishToken(types.ellipsis);
          } else {
            ++this.pos;
            return this.finishToken(types.dot);
          }
        };

        pp$9.readToken_slash = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (this.exprAllowed) {
            ++this.pos;
            return this.readRegexp();
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.slash, 1);
        };

        pp$9.readToken_mult_modulo_exp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;
          var tokentype = code === 42 ? types.star : types.modulo;

          if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size;
            tokentype = types.starstar;
            next = this.input.charCodeAt(this.pos + 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, size + 1);
          }

          return this.finishOp(tokentype, size);
        };

        pp$9.readToken_pipe_amp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
        };

        pp$9.readToken_caret = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.bitwiseXOR, 1);
        };

        pp$9.readToken_plus_min = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
              this.skipLineComment(3);
              this.skipSpace();
              return this.nextToken();
            }

            return this.finishOp(types.incDec, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.plusMin, 1);
        };

        pp$9.readToken_lt_gt = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;

          if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;

            if (this.input.charCodeAt(this.pos + size) === 61) {
              return this.finishOp(types.assign, size + 1);
            }

            return this.finishOp(types.bitShift, size);
          }

          if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            return this.nextToken();
          }

          if (next === 61) {
            size = 2;
          }

          return this.finishOp(types.relational, size);
        };

        pp$9.readToken_eq_excl = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
          }

          if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
            this.pos += 2;
            return this.finishToken(types.arrow);
          }

          return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
        };

        pp$9.getTokenFromCode = function (code) {
          switch (code) {
            case 46:
              return this.readToken_dot();

            case 40:
              ++this.pos;
              return this.finishToken(types.parenL);

            case 41:
              ++this.pos;
              return this.finishToken(types.parenR);

            case 59:
              ++this.pos;
              return this.finishToken(types.semi);

            case 44:
              ++this.pos;
              return this.finishToken(types.comma);

            case 91:
              ++this.pos;
              return this.finishToken(types.bracketL);

            case 93:
              ++this.pos;
              return this.finishToken(types.bracketR);

            case 123:
              ++this.pos;
              return this.finishToken(types.braceL);

            case 125:
              ++this.pos;
              return this.finishToken(types.braceR);

            case 58:
              ++this.pos;
              return this.finishToken(types.colon);

            case 63:
              ++this.pos;
              return this.finishToken(types.question);

            case 96:
              if (this.options.ecmaVersion < 6) {
                break;
              }

              ++this.pos;
              return this.finishToken(types.backQuote);

            case 48:
              var next = this.input.charCodeAt(this.pos + 1);

              if (next === 120 || next === 88) {
                return this.readRadixNumber(16);
              }

              if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) {
                  return this.readRadixNumber(8);
                }

                if (next === 98 || next === 66) {
                  return this.readRadixNumber(2);
                }
              }

            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);

            case 34:
            case 39:
              return this.readString(code);

            case 47:
              return this.readToken_slash();

            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);

            case 124:
            case 38:
              return this.readToken_pipe_amp(code);

            case 94:
              return this.readToken_caret();

            case 43:
            case 45:
              return this.readToken_plus_min(code);

            case 60:
            case 62:
              return this.readToken_lt_gt(code);

            case 61:
            case 33:
              return this.readToken_eq_excl(code);

            case 126:
              return this.finishOp(types.prefix, 1);
          }

          this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };

        pp$9.finishOp = function (type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          this.pos += size;
          return this.finishToken(type, str);
        };

        pp$9.readRegexp = function () {
          var escaped,
              inClass,
              start = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(start, "Unterminated regular expression");
            }

            var ch = this.input.charAt(this.pos);

            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression");
            }

            if (!escaped) {
              if (ch === "[") {
                inClass = true;
              } else if (ch === "]" && inClass) {
                inClass = false;
              } else if (ch === "/" && !inClass) {
                break;
              }

              escaped = ch === "\\";
            } else {
              escaped = false;
            }

            ++this.pos;
          }

          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos;
          var flags = this.readWord1();

          if (this.containsEsc) {
            this.unexpected(flagsStart);
          }

          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags);
          this.validateRegExpFlags(state);
          this.validateRegExpPattern(state);
          var value = null;

          try {
            value = new RegExp(pattern, flags);
          } catch (e) {}

          return this.finishToken(types.regexp, {
            pattern: pattern,
            flags: flags,
            value: value
          });
        };

        pp$9.readInt = function (radix, len) {
          var start = this.pos,
              total = 0;

          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
            var code = this.input.charCodeAt(this.pos),
                val = void 0;

            if (code >= 97) {
              val = code - 97 + 10;
            } else if (code >= 65) {
              val = code - 65 + 10;
            } else if (code >= 48 && code <= 57) {
              val = code - 48;
            } else {
              val = Infinity;
            }

            if (val >= radix) {
              break;
            }

            ++this.pos;
            total = total * radix + val;
          }

          if (this.pos === start || len != null && this.pos - start !== len) {
            return null;
          }

          return total;
        };

        pp$9.readRadixNumber = function (radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);

          if (val == null) {
            this.raise(this.start + 2, "Expected number in radix " + radix);
          }

          if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
            val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
            ++this.pos;
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          return this.finishToken(types.num, val);
        };

        pp$9.readNumber = function (startsWithDot) {
          var start = this.pos;

          if (!startsWithDot && this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }

          var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;

          if (octal && this.strict) {
            this.raise(start, "Invalid number");
          }

          var next = this.input.charCodeAt(this.pos);

          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
            var str$1 = this.input.slice(start, this.pos);
            var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
            ++this.pos;

            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.pos, "Identifier directly after number");
            }

            return this.finishToken(types.num, val$1);
          }

          if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
            octal = false;
          }

          if (next === 46 && !octal) {
            ++this.pos;
            this.readInt(10);
            next = this.input.charCodeAt(this.pos);
          }

          if ((next === 69 || next === 101) && !octal) {
            next = this.input.charCodeAt(++this.pos);

            if (next === 43 || next === 45) {
              ++this.pos;
            }

            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }
          }

          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          var str = this.input.slice(start, this.pos);
          var val = octal ? parseInt(str, 8) : parseFloat(str);
          return this.finishToken(types.num, val);
        };

        pp$9.readCodePoint = function () {
          var ch = this.input.charCodeAt(this.pos),
              code;

          if (ch === 123) {
            if (this.options.ecmaVersion < 6) {
              this.unexpected();
            }

            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
            ++this.pos;

            if (code > 0x10FFFF) {
              this.invalidStringToken(codePos, "Code point out of bounds");
            }
          } else {
            code = this.readHexChar(4);
          }

          return code;
        };

        function codePointToString$1(code) {
          if (code <= 0xFFFF) {
            return String.fromCharCode(code);
          }

          code -= 0x10000;
          return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
        }

        pp$9.readString = function (quote) {
          var out = "",
              chunkStart = ++this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated string constant");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === quote) {
              break;
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(false);
              chunkStart = this.pos;
            } else {
              if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
                this.raise(this.start, "Unterminated string constant");
              }

              ++this.pos;
            }
          }

          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(types.string, out);
        };

        var INVALID_TEMPLATE_ESCAPE_ERROR = {};

        pp$9.tryReadTemplateToken = function () {
          this.inTemplateElement = true;

          try {
            this.readTmplToken();
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken();
            } else {
              throw err;
            }
          }

          this.inTemplateElement = false;
        };

        pp$9.invalidStringToken = function (position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          } else {
            this.raise(position, message);
          }
        };

        pp$9.readTmplToken = function () {
          var out = "",
              chunkStart = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated template");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
              if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
                if (ch === 36) {
                  this.pos += 2;
                  return this.finishToken(types.dollarBraceL);
                } else {
                  ++this.pos;
                  return this.finishToken(types.backQuote);
                }
              }

              out += this.input.slice(chunkStart, this.pos);
              return this.finishToken(types.template, out);
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(true);
              chunkStart = this.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              ++this.pos;

              switch (ch) {
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }

                case 10:
                  out += "\n";
                  break;

                default:
                  out += String.fromCharCode(ch);
                  break;
              }

              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }

              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
        };

        pp$9.readInvalidTemplateToken = function () {
          for (; this.pos < this.input.length; this.pos++) {
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;

              case "$":
                if (this.input[this.pos + 1] !== "{") {
                  break;
                }

              case "`":
                return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          }

          this.raise(this.start, "Unterminated template");
        };

        pp$9.readEscapedChar = function (inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          ++this.pos;

          switch (ch) {
            case 110:
              return "\n";

            case 114:
              return "\r";

            case 120:
              return String.fromCharCode(this.readHexChar(2));

            case 117:
              return codePointToString$1(this.readCodePoint());

            case 116:
              return "\t";

            case 98:
              return "\b";

            case 118:
              return "\x0B";

            case 102:
              return "\f";

            case 13:
              if (this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
              }

            case 10:
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }

              return "";

            case 56:
            case 57:
              if (inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
                return null;
              }

            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                var octal = parseInt(octalStr, 8);

                if (octal > 255) {
                  octalStr = octalStr.slice(0, -1);
                  octal = parseInt(octalStr, 8);
                }

                this.pos += octalStr.length - 1;
                ch = this.input.charCodeAt(this.pos);

                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                  this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
                }

                return String.fromCharCode(octal);
              }

              if (isNewLine(ch)) {
                return "";
              }

              return String.fromCharCode(ch);
          }
        };

        pp$9.readHexChar = function (len) {
          var codePos = this.pos;
          var n = this.readInt(16, len);

          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence");
          }

          return n;
        };

        pp$9.readWord1 = function () {
          this.containsEsc = false;
          var word = "",
              first = true,
              chunkStart = this.pos;
          var astral = this.options.ecmaVersion >= 6;

          while (this.pos < this.input.length) {
            var ch = this.fullCharCodeAtPos();

            if (isIdentifierChar(ch, astral)) {
              this.pos += ch <= 0xffff ? 1 : 2;
            } else if (ch === 92) {
              this.containsEsc = true;
              word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;

              if (this.input.charCodeAt(++this.pos) !== 117) {
                this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
              }

              ++this.pos;
              var esc = this.readCodePoint();

              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape");
              }

              word += codePointToString$1(esc);
              chunkStart = this.pos;
            } else {
              break;
            }

            first = false;
          }

          return word + this.input.slice(chunkStart, this.pos);
        };

        pp$9.readWord = function () {
          var word = this.readWord1();
          var type = types.name;

          if (this.keywords.test(word)) {
            type = keywords$1[word];
          }

          return this.finishToken(type, word);
        };

        var version = "7.1.0";
        Parser.acorn = {
          Parser: Parser,
          version: version,
          defaultOptions: defaultOptions,
          Position: Position,
          SourceLocation: SourceLocation,
          getLineInfo: getLineInfo,
          Node: Node,
          TokenType: TokenType,
          tokTypes: types,
          keywordTypes: keywords$1,
          TokContext: TokContext,
          tokContexts: types$1,
          isIdentifierChar: isIdentifierChar,
          isIdentifierStart: isIdentifierStart,
          Token: Token,
          isNewLine: isNewLine,
          lineBreak: lineBreak,
          lineBreakG: lineBreakG,
          nonASCIIwhitespace: nonASCIIwhitespace
        };

        function parse(input, options) {
          return Parser.parse(input, options);
        }

        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options);
        }

        function tokenizer(input, options) {
          return Parser.tokenizer(input, options);
        }

        exports.Node = Node;
        exports.Parser = Parser;
        exports.Position = Position;
        exports.SourceLocation = SourceLocation;
        exports.TokContext = TokContext;
        exports.Token = Token;
        exports.TokenType = TokenType;
        exports.defaultOptions = defaultOptions;
        exports.getLineInfo = getLineInfo;
        exports.isIdentifierChar = isIdentifierChar;
        exports.isIdentifierStart = isIdentifierStart;
        exports.isNewLine = isNewLine;
        exports.keywordTypes = keywords$1;
        exports.lineBreak = lineBreak;
        exports.lineBreakG = lineBreakG;
        exports.nonASCIIwhitespace = nonASCIIwhitespace;
        exports.parse = parse;
        exports.parseExpressionAt = parseExpressionAt;
        exports.tokContexts = types$1;
        exports.tokTypes = types;
        exports.tokenizer = tokenizer;
        exports.version = version;
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      });
    }, {}],
    2: [function (require, module, exports) {}, {}],
    3: [function (require, module, exports) {
      function glWiretap(gl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$contextName = options.contextName,
            contextName = _options$contextName === void 0 ? 'gl' : _options$contextName,
            throwGetError = options.throwGetError,
            useTrackablePrimitives = options.useTrackablePrimitives,
            readPixelsFile = options.readPixelsFile,
            _options$recording = options.recording,
            recording = _options$recording === void 0 ? [] : _options$recording,
            _options$variables = options.variables,
            variables = _options$variables === void 0 ? {} : _options$variables,
            onReadPixels = options.onReadPixels,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        var proxy = new Proxy(gl, {
          get: listen
        });
        var contextVariables = [];
        var entityNames = {};
        var imageCount = 0;
        var indent = '';
        var readPixelsVariableName;
        return proxy;

        function listen(obj, property) {
          switch (property) {
            case 'addComment':
              return addComment;

            case 'checkThrowError':
              return checkThrowError;

            case 'getReadPixelsVariableName':
              return readPixelsVariableName;

            case 'insertVariable':
              return insertVariable;

            case 'reset':
              return reset;

            case 'setIndent':
              return setIndent;

            case 'toString':
              return toString;

            case 'getContextVariableName':
              return getContextVariableName;
          }

          if (typeof gl[property] === 'function') {
            return function () {
              switch (property) {
                case 'getError':
                  if (throwGetError) {
                    recording.push("".concat(indent, "if (").concat(contextName, ".getError() !== ").concat(contextName, ".NONE) throw new Error('error');"));
                  } else {
                    recording.push("".concat(indent).concat(contextName, ".getError();"));
                  }

                  return gl.getError();

                case 'getExtension':
                  {
                    var variableName = "".concat(contextName, "Variables").concat(contextVariables.length);
                    recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(contextName, ".getExtension('").concat(arguments[0], "');"));
                    var extension = gl.getExtension(arguments[0]);

                    if (extension && typeof extension === 'object') {
                      var tappedExtension = glExtensionWiretap(extension, {
                        getEntity: getEntity,
                        useTrackablePrimitives: useTrackablePrimitives,
                        recording: recording,
                        contextName: variableName,
                        contextVariables: contextVariables,
                        variables: variables,
                        indent: indent,
                        onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                      });
                      contextVariables.push(tappedExtension);
                      return tappedExtension;
                    } else {
                      contextVariables.push(null);
                    }

                    return extension;
                  }

                case 'readPixels':
                  var i = contextVariables.indexOf(arguments[6]);
                  var targetVariableName;

                  if (i === -1) {
                    var _variableName = getVariableName(arguments[6]);

                    if (_variableName) {
                      targetVariableName = _variableName;
                      recording.push("".concat(indent).concat(_variableName));
                    } else {
                      targetVariableName = "".concat(contextName, "Variable").concat(contextVariables.length);
                      contextVariables.push(arguments[6]);
                      recording.push("".concat(indent, "const ").concat(targetVariableName, " = new ").concat(arguments[6].constructor.name, "(").concat(arguments[6].length, ");"));
                    }
                  } else {
                    targetVariableName = "".concat(contextName, "Variable").concat(i);
                  }

                  readPixelsVariableName = targetVariableName;
                  var argumentAsStrings = [arguments[0], arguments[1], arguments[2], arguments[3], getEntity(arguments[4]), getEntity(arguments[5]), targetVariableName];
                  recording.push("".concat(indent).concat(contextName, ".readPixels(").concat(argumentAsStrings.join(', '), ");"));

                  if (readPixelsFile) {
                    writePPM(arguments[2], arguments[3]);
                  }

                  if (onReadPixels) {
                    onReadPixels(targetVariableName, argumentAsStrings);
                  }

                  return gl.readPixels.apply(gl, arguments);

                case 'drawBuffers':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffers([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return gl.drawBuffers(arguments[0]);
              }

              var result = gl[property].apply(gl, arguments);

              switch (typeof result) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                    break;
                  }

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          entityNames[gl[property]] = property;
          return gl[property];
        }

        function toString() {
          return recording.join('\n');
        }

        function reset() {
          while (recording.length > 0) {
            recording.pop();
          }
        }

        function insertVariable(name, value) {
          variables[name] = value;
        }

        function getEntity(value) {
          var name = entityNames[value];

          if (name) {
            return contextName + '.' + name;
          }

          return value;
        }

        function setIndent(spaces) {
          indent = ' '.repeat(spaces);
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          contextVariables.push(value);
          return variableName;
        }

        function writePPM(width, height) {
          var sourceVariable = "".concat(contextName, "Variable").concat(contextVariables.length);
          var imageVariable = "imageDatum".concat(imageCount);
          recording.push("".concat(indent, "let ").concat(imageVariable, " = [\"P3\\n# ").concat(readPixelsFile, ".ppm\\n\", ").concat(width, ", ' ', ").concat(height, ", \"\\n255\\n\"].join(\"\");"));
          recording.push("".concat(indent, "for (let i = 0; i < ").concat(imageVariable, ".length; i += 4) {"));
          recording.push("".concat(indent, "  ").concat(imageVariable, " += ").concat(sourceVariable, "[i] + ' ' + ").concat(sourceVariable, "[i + 1] + ' ' + ").concat(sourceVariable, "[i + 2] + ' ';"));
          recording.push("".concat(indent, "}"));
          recording.push("".concat(indent, "if (typeof require !== \"undefined\") {"));
          recording.push("".concat(indent, "  require('fs').writeFileSync('./").concat(readPixelsFile, ".ppm', ").concat(imageVariable, ");"));
          recording.push("".concat(indent, "}"));
          imageCount++;
        }

        function addComment(value) {
          recording.push("".concat(indent, "// ").concat(value));
        }

        function checkThrowError() {
          recording.push("".concat(indent, "(() => {\n").concat(indent, "const error = ").concat(contextName, ".getError();\n").concat(indent, "if (error !== ").concat(contextName, ".NONE) {\n").concat(indent, "  const names = Object.getOwnPropertyNames(gl);\n").concat(indent, "  for (let i = 0; i < names.length; i++) {\n").concat(indent, "    const name = names[i];\n").concat(indent, "    if (").concat(contextName, "[name] === error) {\n").concat(indent, "      throw new Error('").concat(contextName, " threw ' + name);\n").concat(indent, "    }\n").concat(indent, "  }\n").concat(indent, "}\n").concat(indent, "})();"));
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function getVariableName(value) {
          if (variables) {
            for (var _name in variables) {
              if (variables[_name] === value) {
                return _name;
              }
            }
          }

          return null;
        }

        function getContextVariableName(value) {
          var i = contextVariables.indexOf(value);

          if (i !== -1) {
            return "".concat(contextName, "Variable").concat(i);
          }

          return null;
        }
      }

      function glExtensionWiretap(extension, options) {
        var proxy = new Proxy(extension, {
          get: listen
        });
        var extensionEntityNames = {};
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            useTrackablePrimitives = options.useTrackablePrimitives,
            recording = options.recording,
            variables = options.variables,
            indent = options.indent,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return proxy;

        function listen(obj, property) {
          if (typeof obj[property] === 'function') {
            return function () {
              switch (property) {
                case 'drawBuffersWEBGL':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffersWEBGL([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getExtensionEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return extension.drawBuffersWEBGL(arguments[0]);
              }

              var result = extension[property].apply(extension, arguments);

              switch (typeof result) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result);
                  }

                  break;

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          extensionEntityNames[extension[property]] = property;
          return extension[property];
        }

        function getExtensionEntity(value) {
          if (extensionEntityNames.hasOwnProperty(value)) {
            return "".concat(contextName, ".").concat(extensionEntityNames[value]);
          }

          return getEntity(value);
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getExtensionEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          contextVariables.push(value);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          return variableName;
        }
      }

      function argumentsToString(args, options) {
        var variables = options.variables,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return Array.from(args).map(function (arg) {
          var variableName = getVariableName(arg);

          if (variableName) {
            return variableName;
          }

          return argumentToString(arg, options);
        }).join(', ');

        function getVariableName(value) {
          if (variables) {
            for (var _name2 in variables) {
              if (!variables.hasOwnProperty(_name2)) continue;

              if (variables[_name2] === value) {
                return _name2;
              }
            }
          }

          if (onUnrecognizedArgumentLookup) {
            return onUnrecognizedArgumentLookup(value);
          }

          return null;
        }
      }

      function argumentToString(arg, options) {
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            addVariable = options.addVariable,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;

        if (typeof arg === 'undefined') {
          return 'undefined';
        }

        if (arg === null) {
          return 'null';
        }

        var i = contextVariables.indexOf(arg);

        if (i > -1) {
          return "".concat(contextName, "Variable").concat(i);
        }

        switch (arg.constructor.name) {
          case 'String':
            var hasLines = /\n/.test(arg);
            var hasSingleQuotes = /'/.test(arg);
            var hasDoubleQuotes = /"/.test(arg);

            if (hasLines) {
              return '`' + arg + '`';
            } else if (hasSingleQuotes && !hasDoubleQuotes) {
              return '"' + arg + '"';
            } else if (!hasSingleQuotes && hasDoubleQuotes) {
              return "'" + arg + "'";
            } else {
              return '\'' + arg + '\'';
            }

          case 'Number':
            return getEntity(arg);

          case 'Boolean':
            return getEntity(arg);

          case 'Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "([").concat(Array.from(arg).join(','), "])"));

          case 'Float32Array':
          case 'Uint8Array':
          case 'Uint16Array':
          case 'Int32Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "(").concat(JSON.stringify(Array.from(arg)), ")"));

          default:
            if (onUnrecognizedArgumentLookup) {
              var instantiationString = onUnrecognizedArgumentLookup(arg);

              if (instantiationString) {
                return instantiationString;
              }
            }

            throw new Error("unrecognized argument type ".concat(arg.constructor.name));
        }
      }

      function trackablePrimitive(value) {
        return new value.constructor(value);
      }

      if (typeof module !== 'undefined') {
        module.exports = {
          glWiretap: glWiretap,
          glExtensionWiretap: glExtensionWiretap
        };
      }

      if (typeof window !== 'undefined') {
        glWiretap.glExtensionWiretap = glExtensionWiretap;
        window.glWiretap = glWiretap;
      }
    }, {}],
    4: [function (require, module, exports) {
      function setupArguments(args) {
        var newArguments = new Array(args.length);

        for (var i = 0; i < args.length; i++) {
          var arg = args[i];

          if (arg.toArray) {
            newArguments[i] = arg.toArray();
          } else {
            newArguments[i] = arg;
          }
        }

        return newArguments;
      }

      function mock1D() {
        var args = setupArguments(arguments);
        var row = new Float32Array(this.output.x);

        for (var x = 0; x < this.output.x; x++) {
          this.thread.x = x;
          this.thread.y = 0;
          this.thread.z = 0;
          row[x] = this._fn.apply(this, args);
        }

        return row;
      }

      function mock2D() {
        var args = setupArguments(arguments);
        var matrix = new Array(this.output.y);

        for (var y = 0; y < this.output.y; y++) {
          var row = new Float32Array(this.output.x);

          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;
            row[x] = this._fn.apply(this, args);
          }

          matrix[y] = row;
        }

        return matrix;
      }

      function mock2DGraphical() {
        var args = setupArguments(arguments);

        for (var y = 0; y < this.output.y; y++) {
          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;

            this._fn.apply(this, args);
          }
        }
      }

      function mock3D() {
        var args = setupArguments(arguments);
        var cube = new Array(this.output.z);

        for (var z = 0; z < this.output.z; z++) {
          var matrix = new Array(this.output.y);

          for (var y = 0; y < this.output.y; y++) {
            var row = new Float32Array(this.output.x);

            for (var x = 0; x < this.output.x; x++) {
              this.thread.x = x;
              this.thread.y = y;
              this.thread.z = z;
              row[x] = this._fn.apply(this, args);
            }

            matrix[y] = row;
          }

          cube[z] = matrix;
        }

        return cube;
      }

      function apiDecorate(kernel) {
        kernel.setOutput = function (output) {
          kernel.output = setupOutput(output);

          if (kernel.graphical) {
            setupGraphical(kernel);
          }
        };

        kernel.toJSON = function () {
          throw new Error('Not usable with gpuMock');
        };

        kernel.setConstants = function (flag) {
          kernel.constants = flag;
          return kernel;
        };

        kernel.setGraphical = function (flag) {
          kernel.graphical = flag;
          return kernel;
        };

        kernel.setCanvas = function (flag) {
          kernel.canvas = flag;
          return kernel;
        };

        kernel.setContext = function (flag) {
          kernel.context = flag;
          return kernel;
        };

        kernel.destroy = function () {};

        kernel.validateSettings = function () {};

        if (kernel.graphical && kernel.output) {
          setupGraphical(kernel);
        }

        kernel.exec = function () {
          var _arguments = arguments;
          return new Promise(function (resolve, reject) {
            try {
              resolve(kernel.apply(kernel, _arguments));
            } catch (e) {
              reject(e);
            }
          });
        };

        kernel.getPixels = function (flip) {
          var _kernel$output = kernel.output,
              x = _kernel$output.x,
              y = _kernel$output.y;
          return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);
        };

        kernel.color = function (r, g, b, a) {
          if (typeof a === 'undefined') {
            a = 1;
          }

          r = Math.floor(r * 255);
          g = Math.floor(g * 255);
          b = Math.floor(b * 255);
          a = Math.floor(a * 255);
          var width = kernel.output.x;
          var height = kernel.output.y;
          var x = kernel.thread.x;
          var y = height - kernel.thread.y - 1;
          var index = x + y * width;
          kernel._colorData[index * 4 + 0] = r;
          kernel._colorData[index * 4 + 1] = g;
          kernel._colorData[index * 4 + 2] = b;
          kernel._colorData[index * 4 + 3] = a;
        };

        var mockMethod = function mockMethod() {
          return kernel;
        };

        var methods = ['setWarnVarUsage', 'setArgumentTypes', 'setTactic', 'setOptimizeFloatMemory', 'setDebug', 'setLoopMaxIterations', 'setConstantTypes', 'setFunctions', 'setNativeFunctions', 'setInjectedNative', 'setPipeline', 'setPrecision', 'setOutputToTexture', 'setImmutable', 'setStrictIntegers', 'setDynamicOutput', 'setHardcodeConstants', 'setDynamicArguments', 'setUseLegacyEncoder', 'setWarnVarUsage', 'addSubKernel'];

        for (var i = 0; i < methods.length; i++) {
          kernel[methods[i]] = mockMethod;
        }

        return kernel;
      }

      function setupGraphical(kernel) {
        var _kernel$output2 = kernel.output,
            x = _kernel$output2.x,
            y = _kernel$output2.y;

        if (kernel.context && kernel.context.createImageData) {
          var data = new Uint8ClampedArray(x * y * 4);
          kernel._imageData = kernel.context.createImageData(x, y);
          kernel._colorData = data;
        } else {
          var _data = new Uint8ClampedArray(x * y * 4);

          kernel._imageData = {
            data: _data
          };
          kernel._colorData = _data;
        }
      }

      function setupOutput(output) {
        var result = null;

        if (output.length) {
          if (output.length === 3) {
            var _output = _slicedToArray(output, 3),
                x = _output[0],
                y = _output[1],
                z = _output[2];

            result = {
              x: x,
              y: y,
              z: z
            };
          } else if (output.length === 2) {
            var _output2 = _slicedToArray(output, 2),
                _x = _output2[0],
                _y = _output2[1];

            result = {
              x: _x,
              y: _y
            };
          } else {
            var _output3 = _slicedToArray(output, 1),
                _x2 = _output3[0];

            result = {
              x: _x2
            };
          }
        } else {
          result = output;
        }

        return result;
      }

      function gpuMock(fn) {
        var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var output = settings.output ? setupOutput(settings.output) : null;

        function kernel() {
          if (kernel.output.z) {
            return mock3D.apply(kernel, arguments);
          } else if (kernel.output.y) {
            if (kernel.graphical) {
              return mock2DGraphical.apply(kernel, arguments);
            }

            return mock2D.apply(kernel, arguments);
          } else {
            return mock1D.apply(kernel, arguments);
          }
        }

        kernel._fn = fn;
        kernel.constants = settings.constants || null;
        kernel.context = settings.context || null;
        kernel.canvas = settings.canvas || null;
        kernel.graphical = settings.graphical || false;
        kernel._imageData = null;
        kernel._colorData = null;
        kernel.output = output;
        kernel.thread = {
          x: 0,
          y: 0,
          z: 0
        };
        return apiDecorate(kernel);
      }

      function flipPixels(pixels, width, height) {
        var halfHeight = height / 2 | 0;
        var bytesPerRow = width * 4;
        var temp = new Uint8ClampedArray(width * 4);
        var result = pixels.slice(0);

        for (var y = 0; y < halfHeight; ++y) {
          var topOffset = y * bytesPerRow;
          var bottomOffset = (height - y - 1) * bytesPerRow;
          temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
          result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
          result.set(temp, bottomOffset);
        }

        return result;
      }

      module.exports = {
        gpuMock: gpuMock
      };
    }, {}],
    5: [function (require, module, exports) {
      var _require = require('./utils'),
          utils = _require.utils;

      function alias(name, source) {
        var fnString = source.toString();
        return new Function("return function ".concat(name, " (").concat(utils.getArgumentNamesFromString(fnString).join(', '), ") {\n  ").concat(utils.getFunctionBodyFromString(fnString), "\n}"))();
      }

      module.exports = {
        alias: alias
      };
    }, {
      "./utils": 114
    }],
    6: [function (require, module, exports) {
      var _require2 = require('../function-node'),
          FunctionNode = _require2.FunctionNode;

      var CPUFunctionNode = /*#__PURE__*/function (_FunctionNode) {
        "use strict";

        _inherits(CPUFunctionNode, _FunctionNode);

        var _super = _createSuper(CPUFunctionNode);

        function CPUFunctionNode() {
          _classCallCheck(this, CPUFunctionNode);

          return _super.apply(this, arguments);
        }

        _createClass(CPUFunctionNode, [{
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (!this.isRootKernel) {
              retArr.push('function');
              retArr.push(' ');
              retArr.push(this.name);
              retArr.push('(');

              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                retArr.push('user_');
                retArr.push(argumentName);
              }

              retArr.push(') {\n');
            }

            for (var _i = 0; _i < ast.body.body.length; ++_i) {
              this.astGeneric(ast.body.body[_i], retArr);
              retArr.push('\n');
            }

            if (!this.isRootKernel) {
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            var type = this.returnType || this.getType(ast.argument);

            if (!this.returnType) {
              this.returnType = type;
            }

            if (this.isRootKernel) {
              retArr.push(this.leadingReturnStatement);
              this.astGeneric(ast.argument, retArr);
              retArr.push(';\n');
              retArr.push(this.followingReturnStatement);
              retArr.push('continue;\n');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = "));
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push('return ');
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            retArr.push(ast.value);
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            retArr.push('(');
            this.astGeneric(ast.left, retArr);
            retArr.push(ast.operator);
            this.astGeneric(ast.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            switch (idtNode.name) {
              case 'Infinity':
                retArr.push('Infinity');
                break;

              default:
                if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
                  retArr.push('constants_' + idtNode.name);
                } else {
                  retArr.push('user_' + idtNode.name);
                }

            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              this.pushState('in-for-loop-init');
              this.astGeneric(forNode.init, initArr);

              for (var i = 0; i < initArr.length; i++) {
                if (initArr[i].includes && initArr[i].includes(',')) {
                  isSafe = false;
                }
              }

              this.popState('in-for-loop-init');
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.astGeneric(forNode.test, testArr);
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              retArr.push("for (".concat(initArr.join(''), ";").concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), ';\n');
              }

              retArr.push("for (let ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            retArr.push('if (');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') {\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('} else {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            var declaration = this.getDeclaration(assNode.left);

            if (declaration && !declaration.assignable) {
              throw this.astErrorOutput("Variable ".concat(assNode.left.name, " is not assignable here"), assNode);
            }

            this.astGeneric(assNode.left, retArr);
            retArr.push(assNode.operator);
            this.astGeneric(assNode.right, retArr);
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i2 = 0; _i2 < bNode.body.length; _i2++) {
                this.astGeneric(bNode.body[_i2], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            retArr.push("".concat(varDecNode.kind, " "));
            var declarations = varDecNode.declarations;

            for (var i = 0; i < declarations.length; i++) {
              if (i > 0) {
                retArr.push(',');
              }

              var declaration = declarations[i];
              var info = this.getDeclaration(declaration.id);

              if (!info.valueType) {
                info.valueType = this.getType(declaration.init);
              }

              this.astGeneric(declaration, retArr);
            }

            if (!this.isState('in-for-loop-init')) {
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            var discriminant = ast.discriminant,
                cases = ast.cases;
            retArr.push('switch (');
            this.astGeneric(discriminant, retArr);
            retArr.push(') {\n');

            for (var i = 0; i < cases.length; i++) {
              if (cases[i].test === null) {
                retArr.push('default:\n');
                this.astGeneric(cases[i].consequent, retArr);

                if (cases[i].consequent && cases[i].consequent.length > 0) {
                  retArr.push('break;\n');
                }

                continue;
              }

              retArr.push('case ');
              this.astGeneric(cases[i].test, retArr);
              retArr.push(':\n');

              if (cases[i].consequent && cases[i].consequent.length > 0) {
                this.astGeneric(cases[i].consequent, retArr);
                retArr.push('break;\n');
              }
            }

            retArr.push('\n}');
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('_this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres = this.getMemberExpressionDetails(mNode),
                signature = _this$getMemberExpres.signature,
                type = _this$getMemberExpres.type,
                property = _this$getMemberExpres.property,
                xProperty = _this$getMemberExpres.xProperty,
                yProperty = _this$getMemberExpres.yProperty,
                zProperty = _this$getMemberExpres.zProperty,
                name = _this$getMemberExpres.name,
                origin = _this$getMemberExpres.origin;

            switch (signature) {
              case 'this.thread.value':
                retArr.push("_this.thread.".concat(name));
                return retArr;

              case 'this.output.value':
                switch (name) {
                  case 'x':
                    retArr.push('outputX');
                    break;

                  case 'y':
                    retArr.push('outputY');
                    break;

                  case 'z':
                    retArr.push('outputZ');
                    break;

                  default:
                    throw this.astErrorOutput('Unexpected expression', mNode);
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(name, "[0]"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(name, "[1]"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(name, "[2]"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(name, "[3]"));
                    return retArr;
                }

                break;

              case 'this.constants.value':
              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
                break;

              case 'fn()[]':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                this.astGeneric(mNode.property, retArr);
                retArr.push(']');
                return retArr;

              case 'fn()[][]':
                this.astGeneric(mNode.object.object, retArr);
                retArr.push('[');
                this.astGeneric(mNode.object.property, retArr);
                retArr.push(']');
                retArr.push('[');
                this.astGeneric(mNode.property, retArr);
                retArr.push(']');
                return retArr;

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (!mNode.computed) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(name));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(name);

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
              case 'Matrix(2)':
              case 'Matrix(3)':
              case 'Matrix(4)':
              case 'HTMLImageArray':
              case 'ArrayTexture(1)':
              case 'ArrayTexture(2)':
              case 'ArrayTexture(3)':
              case 'ArrayTexture(4)':
              case 'HTMLImage':
              default:
                var size;
                var isInput;

                if (origin === 'constants') {
                  var constant = this.constants[name];
                  isInput = this.constantTypes[name] === 'Input';
                  size = isInput ? constant.size : null;
                } else {
                  isInput = this.isInput(name);
                  size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;
                }

                retArr.push("".concat(markupName));

                if (zProperty && yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(zProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0], ")+("));
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(zProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (typeof xProperty !== 'undefined') {
                  retArr.push('[');
                  this.astGeneric(xProperty, retArr);
                  retArr.push(']');
                }

            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (ast.type !== 'CallExpression') {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = this.astMemberExpressionUnroll(ast.callee);

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            var isMathFunction = this.isAstMathFunction(ast);

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');
            var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

            for (var i = 0; i < ast.arguments.length; ++i) {
              var argument = ast.arguments[i];
              var argumentType = this.getType(argument);

              if (!targetTypes[i]) {
                this.triggerImplyArgumentType(functionName, i, argumentType, this);
              }

              if (i > 0) {
                retArr.push(', ');
              }

              this.astGeneric(argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var returnType = this.getType(arrNode);
            var arrLen = arrNode.elements.length;
            var elements = [];

            for (var i = 0; i < arrLen; ++i) {
              var element = [];
              this.astGeneric(arrNode.elements[i], element);
              elements.push(element.join(''));
            }

            switch (returnType) {
              case 'Matrix(2)':
              case 'Matrix(3)':
              case 'Matrix(4)':
                retArr.push("[".concat(elements.join(', '), "]"));
                break;

              default:
                retArr.push("new Float32Array([".concat(elements.join(', '), "])"));
            }

            return retArr;
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            retArr.push('debugger;');
            return retArr;
          }
        }]);

        return CPUFunctionNode;
      }(FunctionNode);

      module.exports = {
        CPUFunctionNode: CPUFunctionNode
      };
    }, {
      "../function-node": 10
    }],
    7: [function (require, module, exports) {
      var _require3 = require('../../utils'),
          utils = _require3.utils;

      function constantsToString(constants, types) {
        var results = [];

        for (var _name3 in types) {
          if (!types.hasOwnProperty(_name3)) continue;
          var type = types[_name3];
          var constant = constants[_name3];

          switch (type) {
            case 'Number':
            case 'Integer':
            case 'Float':
            case 'Boolean':
              results.push("".concat(_name3, ":").concat(constant));
              break;

            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
            case 'Matrix(2)':
            case 'Matrix(3)':
            case 'Matrix(4)':
              results.push("".concat(_name3, ":new ").concat(constant.constructor.name, "(").concat(JSON.stringify(Array.from(constant)), ")"));
              break;
          }
        }

        return "{ ".concat(results.join(), " }");
      }

      function cpuKernelString(cpuKernel, name) {
        var header = [];
        var thisProperties = [];
        var beforeReturn = [];
        var useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());
        header.push('  const { context, canvas, constants: incomingConstants } = settings;', "  const output = new Int32Array(".concat(JSON.stringify(Array.from(cpuKernel.output)), ");"), "  const _constantTypes = ".concat(JSON.stringify(cpuKernel.constantTypes), ";"), "  const _constants = ".concat(constantsToString(cpuKernel.constants, cpuKernel.constantTypes), ";"));
        thisProperties.push('    constants: _constants,', '    context,', '    output,', '    thread: {x: 0, y: 0, z: 0},');

        if (cpuKernel.graphical) {
          header.push("  const _imageData = context.createImageData(".concat(cpuKernel.output[0], ", ").concat(cpuKernel.output[1], ");"));
          header.push("  const _colorData = new Uint8ClampedArray(".concat(cpuKernel.output[0], " * ").concat(cpuKernel.output[1], " * 4);"));
          var colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency(object, name) {
              return null;
            }
          });
          var getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency() {
              return null;
            }
          });
          thisProperties.push('    _imageData,', '    _colorData,', "    color: ".concat(colorFn, ","));
          beforeReturn.push("  kernel.getPixels = ".concat(getPixelsFn, ";"));
        }

        var constantTypes = [];
        var constantKeys = Object.keys(cpuKernel.constantTypes);

        for (var i = 0; i < constantKeys.length; i++) {
          constantTypes.push(cpuKernel.constantTypes[constantKeys]);
        }

        if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {
          var flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {
            doNotDefine: ['canvas'],
            findDependency: function findDependency(object, name) {
              if (object === 'this') {
                return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();
              }

              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return;

                case 'context':
                  return 'context';
              }
            }
          });
          beforeReturn.push(flattenedImageTo3DArray);
          thisProperties.push("    _mediaTo2DArray,");
          thisProperties.push("    _imageTo3DArray,");
        } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {
          var flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {
            findDependency: function findDependency(object, name) {
              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return 'settings.canvas';

                case 'context':
                  return 'settings.context';
              }

              throw new Error('unhandled thisLookup');
            }
          });
          beforeReturn.push(flattenedImageTo2DArray);
          thisProperties.push("    _mediaTo2DArray,");
        }

        return "function(settings) {\n".concat(header.join('\n'), "\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n").concat(cpuKernel._kernelString, "\n  })\n    .apply({ ").concat(thisProperties.join('\n'), " });\n  ").concat(beforeReturn.join('\n'), "\n  return kernel;\n}");
      }

      module.exports = {
        cpuKernelString: cpuKernelString
      };
    }, {
      "../../utils": 114
    }],
    8: [function (require, module, exports) {
      var _require4 = require('../kernel'),
          Kernel = _require4.Kernel;

      var _require5 = require('../function-builder'),
          FunctionBuilder = _require5.FunctionBuilder;

      var _require6 = require('./function-node'),
          CPUFunctionNode = _require6.CPUFunctionNode;

      var _require7 = require('../../utils'),
          utils = _require7.utils;

      var _require8 = require('./kernel-string'),
          cpuKernelString = _require8.cpuKernelString;

      var CPUKernel = /*#__PURE__*/function (_Kernel) {
        "use strict";

        _inherits(CPUKernel, _Kernel);

        var _super2 = _createSuper(CPUKernel);

        function CPUKernel(source, settings) {
          var _this;

          _classCallCheck(this, CPUKernel);

          _this = _super2.call(this, source, settings);

          _this.mergeSettings(source.settings || settings);

          _this._imageData = null;
          _this._colorData = null;
          _this._kernelString = null;
          _this._prependedString = [];
          _this.thread = {
            x: 0,
            y: 0,
            z: 0
          };
          _this.translatedSources = null;
          return _this;
        }

        _createClass(CPUKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              return document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            if (!this.canvas) return null;
            return this.canvas.getContext('2d');
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            return [];
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              if (argType === 'Array') {
                this.output = utils.getDimensions(argType);
              } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {
                this.output = args[0].output;
              } else {
                throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }
            }

            this.checkOutput();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';

            if (this.subKernels) {
              var followingReturnStatement = [];

              for (var i = 0; i < this.subKernels.length; i++) {
                var _name4 = this.subKernels[i].name;
                followingReturnStatement.push(this.output.length > 1 ? "resultX_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n") : "result_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n"));
              }

              this.followingReturnStatement = followingReturnStatement.join('');
            }

            var functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);
            this.translatedSources = functionBuilder.getPrototypes('kernel');

            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }
          }
        }, {
          key: "build",
          value: function build() {
            if (this.built) return;
            this.setupConstants();
            this.setupArguments(arguments);
            this.validateSettings(arguments);
            this.translateSource();

            if (this.graphical) {
              var canvas = this.canvas,
                  output = this.output;

              if (!canvas) {
                throw new Error('no canvas available for using graphical output');
              }

              var width = output[0];
              var height = output[1] || 1;
              canvas.width = width;
              canvas.height = height;
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }

            var kernelString = this.getKernelString();
            this.kernelString = kernelString;

            if (this.debug) {
              console.log('Function output:');
              console.log(kernelString);
            }

            try {
              this.run = new Function([], kernelString).bind(this)();
            } catch (e) {
              console.error('An error occurred compiling the javascript: ', e);
            }

            this.buildSignature(arguments);
            this.built = true;
          }
        }, {
          key: "color",
          value: function color(r, g, b, a) {
            if (typeof a === 'undefined') {
              a = 1;
            }

            r = Math.floor(r * 255);
            g = Math.floor(g * 255);
            b = Math.floor(b * 255);
            a = Math.floor(a * 255);
            var width = this.output[0];
            var height = this.output[1];
            var x = this.thread.x;
            var y = height - this.thread.y - 1;
            var index = x + y * width;
            this._colorData[index * 4 + 0] = r;
            this._colorData[index * 4 + 1] = g;
            this._colorData[index * 4 + 2] = b;
            this._colorData[index * 4 + 3] = a;
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            if (this._kernelString !== null) return this._kernelString;
            var kernelThreadString = null;
            var translatedSources = this.translatedSources;

            if (translatedSources.length > 1) {
              translatedSources = translatedSources.filter(function (fn) {
                if (/^function/.test(fn)) return fn;
                kernelThreadString = fn;
                return false;
              });
            } else {
              kernelThreadString = translatedSources.shift();
            }

            return this._kernelString = "  const LOOP_MAX = ".concat(this._getLoopMaxString(), ";\n  ").concat(this.injectedNative || '', "\n  const _this = this;\n  ").concat(this._resultKernelHeader(), "\n  ").concat(this._processConstants(), "\n  return (").concat(this.argumentNames.map(function (argumentName) {
              return 'user_' + argumentName;
            }).join(', '), ") => {\n    ").concat(this._prependedString.join(''), "\n    ").concat(this._earlyThrows(), "\n    ").concat(this._processArguments(), "\n    ").concat(this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString), "\n    ").concat(translatedSources.length > 0 ? translatedSources.join('\n') : '', "\n  };");
          }
        }, {
          key: "toString",
          value: function toString() {
            return cpuKernelString(this);
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";") : ' 1000;';
          }
        }, {
          key: "_processConstants",
          value: function _processConstants() {
            if (!this.constants) return '';
            var result = [];

            for (var p in this.constants) {
              var type = this.constantTypes[p];

              switch (type) {
                case 'HTMLCanvas':
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    const constants_".concat(p, " = this._mediaTo2DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    const constants_".concat(p, " = this._imageTo3DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'Input':
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ".value;\n"));
                  break;

                default:
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ";\n"));
              }
            }

            return result.join('');
          }
        }, {
          key: "_earlyThrows",
          value: function _earlyThrows() {
            var _this2 = this;

            if (this.graphical) return '';
            if (this.immutable) return '';
            if (!this.pipeline) return '';
            var arrayArguments = [];

            for (var i = 0; i < this.argumentTypes.length; i++) {
              if (this.argumentTypes[i] === 'Array') {
                arrayArguments.push(this.argumentNames[i]);
              }
            }

            if (arrayArguments.length === 0) return '';
            var checks = [];

            var _loop = function _loop(_i3) {
              var argumentName = arrayArguments[_i3];

              var checkSubKernels = _this2._mapSubKernels(function (subKernel) {
                return "user_".concat(argumentName, " === result_").concat(subKernel.name);
              }).join(' || ');

              checks.push("user_".concat(argumentName, " === result").concat(checkSubKernels ? " || ".concat(checkSubKernels) : ''));
            };

            for (var _i3 = 0; _i3 < arrayArguments.length; _i3++) {
              _loop(_i3);
            }

            return "if (".concat(checks.join(' || '), ") throw new Error('Source and destination arrays are the same.  Use immutable = true');");
          }
        }, {
          key: "_processArguments",
          value: function _processArguments() {
            var result = [];

            for (var i = 0; i < this.argumentTypes.length; i++) {
              var variableName = "user_".concat(this.argumentNames[i]);

              switch (this.argumentTypes[i]) {
                case 'HTMLCanvas':
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    ".concat(variableName, " = this._mediaTo2DArray(").concat(variableName, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    ".concat(variableName, " = this._imageTo3DArray(").concat(variableName, ");\n"));
                  break;

                case 'Input':
                  result.push("    ".concat(variableName, " = ").concat(variableName, ".value;\n"));
                  break;

                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                  result.push("\n    if (".concat(variableName, ".toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(").concat(variableName, ");\n      if (textureIndex !== -1) {\n        ").concat(variableName, " = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(").concat(variableName, ");\n        ").concat(variableName, " = ").concat(variableName, ".toArray();\n        _this.arrayCache.push(").concat(variableName, ");\n      }\n    }"));
                  break;
              }
            }

            return result.join('');
          }
        }, {
          key: "_mediaTo2DArray",
          value: function _mediaTo2DArray(media) {
            var canvas = this.canvas;
            var width = media.width > 0 ? media.width : media.videoWidth;
            var height = media.height > 0 ? media.height : media.videoHeight;

            if (canvas.width < width) {
              canvas.width = width;
            }

            if (canvas.height < height) {
              canvas.height = height;
            }

            var ctx = this.context;
            ctx.drawImage(media, 0, 0, width, height);
            var pixelsData = ctx.getImageData(0, 0, width, height).data;
            var imageArray = new Array(height);
            var index = 0;

            for (var y = height - 1; y >= 0; y--) {
              var row = imageArray[y] = new Array(width);

              for (var x = 0; x < width; x++) {
                var pixel = new Float32Array(4);
                pixel[0] = pixelsData[index++] / 255;
                pixel[1] = pixelsData[index++] / 255;
                pixel[2] = pixelsData[index++] / 255;
                pixel[3] = pixelsData[index++] / 255;
                row[x] = pixel;
              }
            }

            return imageArray;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var _this$output = _slicedToArray(this.output, 2),
                width = _this$output[0],
                height = _this$output[1];

            return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);
          }
        }, {
          key: "_imageTo3DArray",
          value: function _imageTo3DArray(images) {
            var imagesArray = new Array(images.length);

            for (var i = 0; i < images.length; i++) {
              imagesArray[i] = this._mediaTo2DArray(images[i]);
            }

            return imagesArray;
          }
        }, {
          key: "_resultKernelHeader",
          value: function _resultKernelHeader() {
            if (this.graphical) return '';
            if (this.immutable) return '';
            if (!this.pipeline) return '';

            switch (this.output.length) {
              case 1:
                return this._mutableKernel1DResults();

              case 2:
                return this._mutableKernel2DResults();

              case 3:
                return this._mutableKernel3DResults();
            }
          }
        }, {
          key: "_resultKernelBody",
          value: function _resultKernelBody(kernelString) {
            switch (this.output.length) {
              case 1:
                return (!this.immutable && this.pipeline ? this._resultMutableKernel1DLoop(kernelString) : this._resultImmutableKernel1DLoop(kernelString)) + this._kernelOutput();

              case 2:
                return (!this.immutable && this.pipeline ? this._resultMutableKernel2DLoop(kernelString) : this._resultImmutableKernel2DLoop(kernelString)) + this._kernelOutput();

              case 3:
                return (!this.immutable && this.pipeline ? this._resultMutableKernel3DLoop(kernelString) : this._resultImmutableKernel3DLoop(kernelString)) + this._kernelOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalKernelBody",
          value: function _graphicalKernelBody(kernelThreadString) {
            switch (this.output.length) {
              case 2:
                return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalOutput",
          value: function _graphicalOutput() {
            return "\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;";
          }
        }, {
          key: "_getKernelResultTypeConstructorString",
          value: function _getKernelResultTypeConstructorString() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return 'Float32Array';

              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                return 'Array';

              default:
                if (this.graphical) {
                  return 'Float32Array';
                }

                throw new Error("unhandled returnType ".concat(this.returnType));
            }
          }
        }, {
          key: "_resultImmutableKernel1DLoop",
          value: function _resultImmutableKernel1DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const result = new ".concat(constructorString, "(outputX);\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new ").concat(constructorString, "(outputX);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ").concat(kernelString, "\n    }");
          }
        }, {
          key: "_mutableKernel1DResults",
          value: function _mutableKernel1DResults() {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const result = new ".concat(constructorString, "(outputX);\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new ").concat(constructorString, "(outputX);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '));
          }
        }, {
          key: "_resultMutableKernel1DLoop",
          value: function _resultMutableKernel1DLoop(kernelString) {
            return "  const outputX = _this.output[0];\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ".concat(kernelString, "\n    }");
          }
        }, {
          key: "_resultImmutableKernel2DLoop",
          value: function _resultImmutableKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ").concat(constructorString, "(outputX);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_mutableKernel2DResults",
          value: function _mutableKernel2DResults() {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      const resultX = result[y] = new ").concat(constructorString, "(outputX);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n    }");
          }
        }, {
          key: "_resultMutableKernel2DLoop",
          value: function _resultMutableKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y];\n      ".concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_graphicalKernel2DLoop",
          value: function _graphicalKernel2DLoop(kernelString) {
            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ".concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_resultImmutableKernel3DLoop",
          value: function _resultImmutableKernel3DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputZ);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultY_".concat(subKernel.name, " = result_").concat(subKernel.name, "[z] = new Array(outputY);\n");
            }).join('      '), "\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ").concat(constructorString, "(outputX);\n        ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = resultY_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join('        '), "\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ").concat(kernelString, "\n        }\n      }\n    }");
          }
        }, {
          key: "_mutableKernel3DResults",
          value: function _mutableKernel3DResults() {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputZ);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let z = 0; z < outputZ; z++) {\n      const resultY = result[z] = new Array(outputY);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultY_".concat(subKernel.name, " = result_").concat(subKernel.name, "[z] = new Array(outputY);\n");
            }).join('      '), "\n      for (let y = 0; y < outputY; y++) {\n        const resultX = resultY[y] = new ").concat(constructorString, "(outputX);\n        ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = resultY_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join('        '), "\n      }\n    }");
          }
        }, {
          key: "_resultMutableKernel3DLoop",
          value: function _resultMutableKernel3DLoop(kernelString) {
            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z];\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y];\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ".concat(kernelString, "\n        }\n      }\n    }");
          }
        }, {
          key: "_kernelOutput",
          value: function _kernelOutput() {
            if (!this.subKernels) {
              return '\n    return result;';
            }

            return "\n    return {\n      result: result,\n      ".concat(this.subKernels.map(function (subKernel) {
              return "".concat(subKernel.property, ": result_").concat(subKernel.name);
            }).join(',\n      '), "\n    };");
          }
        }, {
          key: "_mapSubKernels",
          value: function _mapSubKernels(fn) {
            return this.subKernels === null ? [''] : this.subKernels.map(fn);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReference) {
            if (removeCanvasReference) {
              delete this.canvas;
            }
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(CPUKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();
            return json;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(CPUKernel.prototype), "setOutput", this).call(this, output);

            var _this$output2 = _slicedToArray(this.output, 2),
                width = _this$output2[0],
                height = _this$output2[1];

            if (this.graphical) {
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            if (this._kernelString) throw new Error('Kernel already built');

            this._prependedString.push(value);
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            return this._prependedString.indexOf(value) > -1;
          }
        }], [{
          key: "getFeatures",
          value: function getFeatures() {
            return this.features;
          }
        }, {
          key: "features",
          get: function get() {
            return Object.freeze({
              kernelMap: true,
              isIntegerDivisionAccurate: true
            });
          }
        }, {
          key: "isSupported",
          get: function get() {
            return true;
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            return false;
          }
        }, {
          key: "mode",
          get: function get() {
            return 'cpu';
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            return null;
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            throw new Error("Looking up native function return type not supported on ".concat(this.name));
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel) {
            return combinedKernel;
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            return 'cpu' + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {}
        }]);

        return CPUKernel;
      }(Kernel);

      module.exports = {
        CPUKernel: CPUKernel
      };
    }, {
      "../../utils": 114,
      "../function-builder": 9,
      "../kernel": 36,
      "./function-node": 6,
      "./kernel-string": 7
    }],
    9: [function (require, module, exports) {
      var FunctionBuilder = /*#__PURE__*/function () {
        "use strict";

        function FunctionBuilder(settings) {
          _classCallCheck(this, FunctionBuilder);

          settings = settings || {};
          this.kernel = settings.kernel;
          this.rootNode = settings.rootNode;
          this.functionNodes = settings.functionNodes || [];
          this.subKernelNodes = settings.subKernelNodes || [];
          this.nativeFunctions = settings.nativeFunctions || [];
          this.functionMap = {};
          this.nativeFunctionNames = [];
          this.lookupChain = [];
          this.functionNodeDependencies = {};
          this.functionCalls = {};

          if (this.rootNode) {
            this.functionMap['kernel'] = this.rootNode;
          }

          if (this.functionNodes) {
            for (var i = 0; i < this.functionNodes.length; i++) {
              this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];
            }
          }

          if (this.subKernelNodes) {
            for (var _i4 = 0; _i4 < this.subKernelNodes.length; _i4++) {
              this.functionMap[this.subKernelNodes[_i4].name] = this.subKernelNodes[_i4];
            }
          }

          if (this.nativeFunctions) {
            for (var _i5 = 0; _i5 < this.nativeFunctions.length; _i5++) {
              var nativeFunction = this.nativeFunctions[_i5];
              this.nativeFunctionNames.push(nativeFunction.name);
            }
          }
        }

        _createClass(FunctionBuilder, [{
          key: "addFunctionNode",
          value: function addFunctionNode(functionNode) {
            if (!functionNode.name) throw new Error('functionNode.name needs set');
            this.functionMap[functionNode.name] = functionNode;

            if (functionNode.isRootKernel) {
              this.rootNode = functionNode;
            }
          }
        }, {
          key: "traceFunctionCalls",
          value: function traceFunctionCalls(functionName, retList) {
            functionName = functionName || 'kernel';
            retList = retList || [];

            if (this.nativeFunctionNames.indexOf(functionName) > -1) {
              var nativeFunctionIndex = retList.indexOf(functionName);

              if (nativeFunctionIndex === -1) {
                retList.push(functionName);
              } else {
                var dependantNativeFunctionName = retList.splice(nativeFunctionIndex, 1)[0];
                retList.push(dependantNativeFunctionName);
              }

              return retList;
            }

            var functionNode = this.functionMap[functionName];

            if (functionNode) {
              var functionIndex = retList.indexOf(functionName);

              if (functionIndex === -1) {
                retList.push(functionName);
                functionNode.toString();

                for (var i = 0; i < functionNode.calledFunctions.length; ++i) {
                  this.traceFunctionCalls(functionNode.calledFunctions[i], retList);
                }
              } else {
                var dependantFunctionName = retList.splice(functionIndex, 1)[0];
                retList.push(dependantFunctionName);
              }
            }

            return retList;
          }
        }, {
          key: "getPrototypeString",
          value: function getPrototypeString(functionName) {
            return this.getPrototypes(functionName).join('\n');
          }
        }, {
          key: "getPrototypes",
          value: function getPrototypes(functionName) {
            if (this.rootNode) {
              this.rootNode.toString();
            }

            if (functionName) {
              return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
            }

            return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "getStringFromFunctionNames",
          value: function getStringFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var node = this.functionMap[functionList[i]];

              if (node) {
                ret.push(this.functionMap[functionList[i]].toString());
              }
            }

            return ret.join('\n');
          }
        }, {
          key: "getPrototypesFromFunctionNames",
          value: function getPrototypesFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var functionName = functionList[i];
              var functionIndex = this.nativeFunctionNames.indexOf(functionName);

              if (functionIndex > -1) {
                ret.push(this.nativeFunctions[functionIndex].source);
                continue;
              }

              var node = this.functionMap[functionName];

              if (node) {
                ret.push(node.toString());
              }
            }

            return ret;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var _this3 = this;

            return this.traceFunctionCalls(this.rootNode.name).reverse().map(function (name) {
              var nativeIndex = _this3.nativeFunctions.indexOf(name);

              if (nativeIndex > -1) {
                return {
                  name: name,
                  source: _this3.nativeFunctions[nativeIndex].source
                };
              } else if (_this3.functionMap[name]) {
                return _this3.functionMap[name].toJSON();
              } else {
                throw new Error("function ".concat(name, " not found"));
              }
            });
          }
        }, {
          key: "fromJSON",
          value: function fromJSON(jsonFunctionNodes, FunctionNode) {
            this.functionMap = {};

            for (var i = 0; i < jsonFunctionNodes.length; i++) {
              var jsonFunctionNode = jsonFunctionNodes[i];
              this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);
            }

            return this;
          }
        }, {
          key: "getString",
          value: function getString(functionName) {
            if (functionName) {
              return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());
            }

            return this.getStringFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "lookupReturnType",
          value: function lookupReturnType(functionName, ast, requestingNode) {
            if (ast.type !== 'CallExpression') {
              throw new Error("expected ast type of \"CallExpression\", but is ".concat(ast.type));
            }

            if (this._isNativeFunction(functionName)) {
              return this._lookupNativeFunctionReturnType(functionName);
            } else if (this._isFunction(functionName)) {
              var node = this._getFunction(functionName);

              if (node.returnType) {
                return node.returnType;
              } else {
                for (var i = 0; i < this.lookupChain.length; i++) {
                  if (this.lookupChain[i].ast === ast) {
                    if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {
                      var args = ast.arguments;

                      for (var j = 0; j < args.length; j++) {
                        this.lookupChain.push({
                          name: requestingNode.name,
                          ast: args[i],
                          requestingNode: requestingNode
                        });
                        node.argumentTypes[j] = requestingNode.getType(args[j]);
                        this.lookupChain.pop();
                      }

                      return node.returnType = node.getType(node.getJsAST());
                    }

                    throw new Error('circlical logic detected!');
                  }
                }

                this.lookupChain.push({
                  name: requestingNode.name,
                  ast: ast,
                  requestingNode: requestingNode
                });
                var type = node.getType(node.getJsAST());
                this.lookupChain.pop();
                return node.returnType = type;
              }
            }

            return null;
          }
        }, {
          key: "_getFunction",
          value: function _getFunction(functionName) {
            if (!this._isFunction(functionName)) {
              new Error("Function ".concat(functionName, " not found"));
            }

            return this.functionMap[functionName];
          }
        }, {
          key: "_isFunction",
          value: function _isFunction(functionName) {
            return Boolean(this.functionMap[functionName]);
          }
        }, {
          key: "_getNativeFunction",
          value: function _getNativeFunction(functionName) {
            for (var i = 0; i < this.nativeFunctions.length; i++) {
              if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];
            }

            return null;
          }
        }, {
          key: "_isNativeFunction",
          value: function _isNativeFunction(functionName) {
            return Boolean(this._getNativeFunction(functionName));
          }
        }, {
          key: "_lookupNativeFunctionReturnType",
          value: function _lookupNativeFunctionReturnType(functionName) {
            var nativeFunction = this._getNativeFunction(functionName);

            if (nativeFunction) {
              return nativeFunction.returnType;
            }

            throw new Error("Native function ".concat(functionName, " not found"));
          }
        }, {
          key: "lookupFunctionArgumentTypes",
          value: function lookupFunctionArgumentTypes(functionName) {
            if (this._isNativeFunction(functionName)) {
              return this._getNativeFunction(functionName).argumentTypes;
            } else if (this._isFunction(functionName)) {
              return this._getFunction(functionName).argumentTypes;
            }

            return null;
          }
        }, {
          key: "lookupFunctionArgumentName",
          value: function lookupFunctionArgumentName(functionName, argumentIndex) {
            return this._getFunction(functionName).argumentNames[argumentIndex];
          }
        }, {
          key: "lookupFunctionArgumentBitRatio",
          value: function lookupFunctionArgumentBitRatio(functionName, argumentName) {
            if (!this._isFunction(functionName)) {
              throw new Error('function not found');
            }

            if (this.rootNode.name === functionName) {
              var _i6 = this.rootNode.argumentNames.indexOf(argumentName);

              if (_i6 !== -1) {
                return this.rootNode.argumentBitRatios[_i6];
              }
            }

            var node = this._getFunction(functionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error('argument not found');
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error('argument bit ratio not found');
            }

            return bitRatio;
          }
        }, {
          key: "needsArgumentType",
          value: function needsArgumentType(functionName, i) {
            if (!this._isFunction(functionName)) return false;

            var fnNode = this._getFunction(functionName);

            return !fnNode.argumentTypes[i];
          }
        }, {
          key: "assignArgumentType",
          value: function assignArgumentType(functionName, i, argumentType, requestingNode) {
            if (!this._isFunction(functionName)) return;

            var fnNode = this._getFunction(functionName);

            if (!fnNode.argumentTypes[i]) {
              fnNode.argumentTypes[i] = argumentType;
            }
          }
        }, {
          key: "assignArgumentBitRatio",
          value: function assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
            var node = this._getFunction(functionName);

            if (this._isNativeFunction(calleeFunctionName)) return null;

            var calleeNode = this._getFunction(calleeFunctionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error("Argument ".concat(argumentName, " not found in arguments from function ").concat(functionName));
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error("Bit ratio for argument ".concat(argumentName, " not found in function ").concat(functionName));
            }

            if (!calleeNode.argumentBitRatios) {
              calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);
            }

            var calleeBitRatio = calleeNode.argumentBitRatios[i];

            if (typeof calleeBitRatio === 'number') {
              if (calleeBitRatio !== bitRatio) {
                throw new Error("Incompatible bit ratio found at function ".concat(functionName, " at argument ").concat(argumentName));
              }

              return calleeBitRatio;
            }

            calleeNode.argumentBitRatios[i] = bitRatio;
            return bitRatio;
          }
        }, {
          key: "trackFunctionCall",
          value: function trackFunctionCall(functionName, calleeFunctionName, args) {
            if (!this.functionNodeDependencies[functionName]) {
              this.functionNodeDependencies[functionName] = new Set();
              this.functionCalls[functionName] = [];
            }

            this.functionNodeDependencies[functionName].add(calleeFunctionName);
            this.functionCalls[functionName].push(args);
          }
        }, {
          key: "getKernelResultType",
          value: function getKernelResultType() {
            return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);
          }
        }, {
          key: "getSubKernelResultType",
          value: function getSubKernelResultType(index) {
            var subKernelNode = this.subKernelNodes[index];
            var called = false;

            for (var functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {
              var functionCall = this.rootNode.functionCalls[functionCallIndex];

              if (functionCall.ast.callee.name === subKernelNode.name) {
                called = true;
              }
            }

            if (!called) {
              throw new Error("SubKernel ".concat(subKernelNode.name, " never called by kernel"));
            }

            return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());
          }
        }, {
          key: "getReturnTypes",
          value: function getReturnTypes() {
            var result = _defineProperty({}, this.rootNode.name, this.rootNode.getType(this.rootNode.ast));

            var list = this.traceFunctionCalls(this.rootNode.name);

            for (var i = 0; i < list.length; i++) {
              var functionName = list[i];
              var functionNode = this.functionMap[functionName];
              result[functionName] = functionNode.getType(functionNode.ast);
            }

            return result;
          }
        }], [{
          key: "fromKernel",
          value: function fromKernel(kernel, FunctionNode, extraNodeOptions) {
            var kernelArguments = kernel.kernelArguments,
                kernelConstants = kernel.kernelConstants,
                argumentNames = kernel.argumentNames,
                argumentSizes = kernel.argumentSizes,
                argumentBitRatios = kernel.argumentBitRatios,
                constants = kernel.constants,
                constantBitRatios = kernel.constantBitRatios,
                debug = kernel.debug,
                loopMaxIterations = kernel.loopMaxIterations,
                nativeFunctions = kernel.nativeFunctions,
                output = kernel.output,
                optimizeFloatMemory = kernel.optimizeFloatMemory,
                precision = kernel.precision,
                plugins = kernel.plugins,
                source = kernel.source,
                subKernels = kernel.subKernels,
                functions = kernel.functions,
                leadingReturnStatement = kernel.leadingReturnStatement,
                followingReturnStatement = kernel.followingReturnStatement,
                dynamicArguments = kernel.dynamicArguments,
                dynamicOutput = kernel.dynamicOutput;
            var argumentTypes = new Array(kernelArguments.length);
            var constantTypes = {};

            for (var i = 0; i < kernelArguments.length; i++) {
              argumentTypes[i] = kernelArguments[i].type;
            }

            for (var _i7 = 0; _i7 < kernelConstants.length; _i7++) {
              var kernelConstant = kernelConstants[_i7];
              constantTypes[kernelConstant.name] = kernelConstant.type;
            }

            var needsArgumentType = function needsArgumentType(functionName, index) {
              return functionBuilder.needsArgumentType(functionName, index);
            };

            var assignArgumentType = function assignArgumentType(functionName, index, type) {
              functionBuilder.assignArgumentType(functionName, index, type);
            };

            var lookupReturnType = function lookupReturnType(functionName, ast, requestingNode) {
              return functionBuilder.lookupReturnType(functionName, ast, requestingNode);
            };

            var lookupFunctionArgumentTypes = function lookupFunctionArgumentTypes(functionName) {
              return functionBuilder.lookupFunctionArgumentTypes(functionName);
            };

            var lookupFunctionArgumentName = function lookupFunctionArgumentName(functionName, argumentIndex) {
              return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);
            };

            var lookupFunctionArgumentBitRatio = function lookupFunctionArgumentBitRatio(functionName, argumentName) {
              return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);
            };

            var triggerImplyArgumentType = function triggerImplyArgumentType(functionName, i, argumentType, requestingNode) {
              functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);
            };

            var triggerImplyArgumentBitRatio = function triggerImplyArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
              functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);
            };

            var onFunctionCall = function onFunctionCall(functionName, calleeFunctionName, args) {
              functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);
            };

            var onNestedFunction = function onNestedFunction(ast, source) {
              var argumentNames = [];

              for (var _i8 = 0; _i8 < ast.params.length; _i8++) {
                argumentNames.push(ast.params[_i8].name);
              }

              var nestedFunction = new FunctionNode(source, Object.assign({}, nodeOptions, {
                returnType: null,
                ast: ast,
                name: ast.id.name,
                argumentNames: argumentNames,
                lookupReturnType: lookupReturnType,
                lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                lookupFunctionArgumentName: lookupFunctionArgumentName,
                lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                needsArgumentType: needsArgumentType,
                assignArgumentType: assignArgumentType,
                triggerImplyArgumentType: triggerImplyArgumentType,
                triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                onFunctionCall: onFunctionCall
              }));
              nestedFunction.traceFunctionAST(ast);
              functionBuilder.addFunctionNode(nestedFunction);
            };

            var nodeOptions = Object.assign({
              isRootKernel: false,
              onNestedFunction: onNestedFunction,
              lookupReturnType: lookupReturnType,
              lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
              lookupFunctionArgumentName: lookupFunctionArgumentName,
              lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
              needsArgumentType: needsArgumentType,
              assignArgumentType: assignArgumentType,
              triggerImplyArgumentType: triggerImplyArgumentType,
              triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
              onFunctionCall: onFunctionCall,
              optimizeFloatMemory: optimizeFloatMemory,
              precision: precision,
              constants: constants,
              constantTypes: constantTypes,
              constantBitRatios: constantBitRatios,
              debug: debug,
              loopMaxIterations: loopMaxIterations,
              output: output,
              plugins: plugins,
              dynamicArguments: dynamicArguments,
              dynamicOutput: dynamicOutput
            }, extraNodeOptions || {});
            var rootNodeOptions = Object.assign({}, nodeOptions, {
              isRootKernel: true,
              name: 'kernel',
              argumentNames: argumentNames,
              argumentTypes: argumentTypes,
              argumentSizes: argumentSizes,
              argumentBitRatios: argumentBitRatios,
              leadingReturnStatement: leadingReturnStatement,
              followingReturnStatement: followingReturnStatement
            });

            if (typeof source === 'object' && source.functionNodes) {
              return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);
            }

            var rootNode = new FunctionNode(source, rootNodeOptions);
            var functionNodes = null;

            if (functions) {
              functionNodes = functions.map(function (fn) {
                return new FunctionNode(fn.source, {
                  returnType: fn.returnType,
                  argumentTypes: fn.argumentTypes,
                  output: output,
                  plugins: plugins,
                  constants: constants,
                  constantTypes: constantTypes,
                  constantBitRatios: constantBitRatios,
                  optimizeFloatMemory: optimizeFloatMemory,
                  precision: precision,
                  lookupReturnType: lookupReturnType,
                  lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                  lookupFunctionArgumentName: lookupFunctionArgumentName,
                  lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                  needsArgumentType: needsArgumentType,
                  assignArgumentType: assignArgumentType,
                  triggerImplyArgumentType: triggerImplyArgumentType,
                  triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                  onFunctionCall: onFunctionCall,
                  onNestedFunction: onNestedFunction
                });
              });
            }

            var subKernelNodes = null;

            if (subKernels) {
              subKernelNodes = subKernels.map(function (subKernel) {
                var name = subKernel.name,
                    source = subKernel.source;
                return new FunctionNode(source, Object.assign({}, nodeOptions, {
                  name: name,
                  isSubKernel: true,
                  isRootKernel: false
                }));
              });
            }

            var functionBuilder = new FunctionBuilder({
              kernel: kernel,
              rootNode: rootNode,
              functionNodes: functionNodes,
              nativeFunctions: nativeFunctions,
              subKernelNodes: subKernelNodes
            });
            return functionBuilder;
          }
        }]);

        return FunctionBuilder;
      }();

      module.exports = {
        FunctionBuilder: FunctionBuilder
      };
    }, {}],
    10: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require9 = require('../utils'),
          utils = _require9.utils;

      var _require10 = require('./function-tracer'),
          FunctionTracer = _require10.FunctionTracer;

      var FunctionNode = /*#__PURE__*/function () {
        "use strict";

        function FunctionNode(source, settings) {
          _classCallCheck(this, FunctionNode);

          if (!source && !settings.ast) {
            throw new Error('source parameter is missing');
          }

          settings = settings || {};
          this.source = source;
          this.ast = null;
          this.name = typeof source === 'string' ? settings.isRootKernel ? 'kernel' : settings.name || utils.getFunctionNameFromString(source) : null;
          this.calledFunctions = [];
          this.constants = {};
          this.constantTypes = {};
          this.constantBitRatios = {};
          this.isRootKernel = false;
          this.isSubKernel = false;
          this.debug = null;
          this.functions = null;
          this.identifiers = null;
          this.contexts = null;
          this.functionCalls = null;
          this.states = [];
          this.needsArgumentType = null;
          this.assignArgumentType = null;
          this.lookupReturnType = null;
          this.lookupFunctionArgumentTypes = null;
          this.lookupFunctionArgumentBitRatio = null;
          this.triggerImplyArgumentType = null;
          this.triggerImplyArgumentBitRatio = null;
          this.onNestedFunction = null;
          this.onFunctionCall = null;
          this.optimizeFloatMemory = null;
          this.precision = null;
          this.loopMaxIterations = null;
          this.argumentNames = typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null;
          this.argumentTypes = [];
          this.argumentSizes = [];
          this.argumentBitRatios = null;
          this.returnType = null;
          this.output = [];
          this.plugins = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.dynamicOutput = null;
          this.dynamicArguments = null;
          this.strictTypingChecking = false;
          this.fixIntegerDivisionAccuracy = null;

          if (settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p)) continue;
              if (!this.hasOwnProperty(p)) continue;
              this[p] = settings[p];
            }
          }

          this.literalTypes = {};
          this.validate();
          this._string = null;
          this._internalVariableNames = {};
        }

        _createClass(FunctionNode, [{
          key: "validate",
          value: function validate() {
            if (typeof this.source !== 'string' && !this.ast) {
              throw new Error('this.source not a string');
            }

            if (!this.ast && !utils.isFunctionString(this.source)) {
              throw new Error('this.source not a function string');
            }

            if (!this.name) {
              throw new Error('this.name could not be set');
            }

            if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {
              throw new Error("argumentTypes count of ".concat(this.argumentTypes.length, " exceeds ").concat(this.argumentNames.length));
            }

            if (this.output.length < 1) {
              throw new Error('this.output is not big enough');
            }
          }
        }, {
          key: "isIdentifierConstant",
          value: function isIdentifierConstant(name) {
            if (!this.constants) return false;
            return this.constants.hasOwnProperty(name);
          }
        }, {
          key: "isInput",
          value: function isInput(argumentName) {
            return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';
          }
        }, {
          key: "pushState",
          value: function pushState(state) {
            this.states.push(state);
          }
        }, {
          key: "popState",
          value: function popState(state) {
            if (this.state !== state) {
              throw new Error("Cannot popState ".concat(state, " when in ").concat(this.state));
            }

            this.states.pop();
          }
        }, {
          key: "isState",
          value: function isState(state) {
            return this.state === state;
          }
        }, {
          key: "state",
          get: function get() {
            return this.states[this.states.length - 1];
          }
        }, {
          key: "astMemberExpressionUnroll",
          value: function astMemberExpressionUnroll(ast) {
            if (ast.type === 'Identifier') {
              return ast.name;
            } else if (ast.type === 'ThisExpression') {
              return 'this';
            }

            if (ast.type === 'MemberExpression') {
              if (ast.object && ast.property) {
                if (ast.object.hasOwnProperty('name') && ast.object.name !== 'Math') {
                  return this.astMemberExpressionUnroll(ast.property);
                }

                return this.astMemberExpressionUnroll(ast.object) + '.' + this.astMemberExpressionUnroll(ast.property);
              }
            }

            if (ast.hasOwnProperty('expressions')) {
              var firstExpression = ast.expressions[0];

              if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {
                return this.astMemberExpressionUnroll(ast.expressions[1]);
              }
            }

            throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);
          }
        }, {
          key: "getJsAST",
          value: function getJsAST(inParser) {
            if (this.ast) {
              return this.ast;
            }

            if (typeof this.source === 'object') {
              this.traceFunctionAST(this.source);
              return this.ast = this.source;
            }

            inParser = inParser || acorn;

            if (inParser === null) {
              throw new Error('Missing JS to AST parser');
            }

            var ast = Object.freeze(inParser.parse("const parser_".concat(this.name, " = ").concat(this.source, ";"), {
              locations: true
            }));
            var functionAST = ast.body[0].declarations[0].init;
            this.traceFunctionAST(functionAST);

            if (!ast) {
              throw new Error('Failed to parse JS code');
            }

            return this.ast = functionAST;
          }
        }, {
          key: "traceFunctionAST",
          value: function traceFunctionAST(ast) {
            var _FunctionTracer = new FunctionTracer(ast),
                contexts = _FunctionTracer.contexts,
                declarations = _FunctionTracer.declarations,
                functions = _FunctionTracer.functions,
                identifiers = _FunctionTracer.identifiers,
                functionCalls = _FunctionTracer.functionCalls;

            this.contexts = contexts;
            this.identifiers = identifiers;
            this.functionCalls = functionCalls;
            this.functions = functions;

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var _ast = declaration.ast,
                  inForLoopInit = declaration.inForLoopInit,
                  inForLoopTest = declaration.inForLoopTest;
              var init = _ast.init;
              var dependencies = this.getDependencies(init);
              var valueType = null;

              if (inForLoopInit && inForLoopTest) {
                valueType = 'Integer';
              } else {
                if (init) {
                  var realType = this.getType(init);

                  switch (realType) {
                    case 'Integer':
                    case 'Float':
                    case 'Number':
                      if (init.type === 'MemberExpression') {
                        valueType = realType;
                      } else {
                        valueType = 'Number';
                      }

                      break;

                    case 'LiteralInteger':
                      valueType = 'Number';
                      break;

                    default:
                      valueType = realType;
                  }
                }
              }

              declaration.valueType = valueType;
              declaration.dependencies = dependencies;
              declaration.isSafe = this.isSafeDependencies(dependencies);
            }

            for (var _i9 = 0; _i9 < functions.length; _i9++) {
              this.onNestedFunction(functions[_i9], this.source);
            }
          }
        }, {
          key: "getDeclaration",
          value: function getDeclaration(ast) {
            for (var i = 0; i < this.identifiers.length; i++) {
              var identifier = this.identifiers[i];

              if (ast === identifier.ast) {
                return identifier.declaration;
              }
            }

            return null;
          }
        }, {
          key: "getVariableType",
          value: function getVariableType(ast) {
            if (ast.type !== 'Identifier') {
              throw new Error("ast of ".concat(ast.type, " not \"Identifier\""));
            }

            var type = null;
            var argumentIndex = this.argumentNames.indexOf(ast.name);

            if (argumentIndex === -1) {
              var declaration = this.getDeclaration(ast);

              if (declaration) {
                return declaration.valueType;
              }
            } else {
              var argumentType = this.argumentTypes[argumentIndex];

              if (argumentType) {
                type = argumentType;
              }
            }

            if (!type && this.strictTypingChecking) {
              throw new Error("Declaration of ".concat(name, " not found"));
            }

            return type;
          }
        }, {
          key: "getLookupType",
          value: function getLookupType(type) {
            if (!typeLookupMap.hasOwnProperty(type)) {
              throw new Error("unknown typeLookupMap ".concat(type));
            }

            return typeLookupMap[type];
          }
        }, {
          key: "getConstantType",
          value: function getConstantType(constantName) {
            if (this.constantTypes[constantName]) {
              var type = this.constantTypes[constantName];

              if (type === 'Float') {
                return 'Number';
              } else {
                return type;
              }
            }

            throw new Error("Type for constant \"".concat(constantName, "\" not declared"));
          }
        }, {
          key: "toString",
          value: function toString() {
            if (this._string) return this._string;
            return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var settings = {
              source: this.source,
              name: this.name,
              constants: this.constants,
              constantTypes: this.constantTypes,
              isRootKernel: this.isRootKernel,
              isSubKernel: this.isSubKernel,
              debug: this.debug,
              output: this.output,
              loopMaxIterations: this.loopMaxIterations,
              argumentNames: this.argumentNames,
              argumentTypes: this.argumentTypes,
              argumentSizes: this.argumentSizes,
              returnType: this.returnType,
              leadingReturnStatement: this.leadingReturnStatement,
              followingReturnStatement: this.followingReturnStatement
            };
            return {
              ast: this.ast,
              settings: settings
            };
          }
        }, {
          key: "getType",
          value: function getType(ast) {
            if (Array.isArray(ast)) {
              return this.getType(ast[ast.length - 1]);
            }

            switch (ast.type) {
              case 'BlockStatement':
                return this.getType(ast.body);

              case 'ArrayExpression':
                var childType = this.getType(ast.elements[0]);

                switch (childType) {
                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return "Matrix(".concat(ast.elements.length, ")");
                }

                return "Array(".concat(ast.elements.length, ")");

              case 'Literal':
                var literalKey = this.astKey(ast);

                if (this.literalTypes[literalKey]) {
                  return this.literalTypes[literalKey];
                }

                if (Number.isInteger(ast.value)) {
                  return 'LiteralInteger';
                } else if (ast.value === true || ast.value === false) {
                  return 'Boolean';
                } else {
                  return 'Number';
                }

              case 'AssignmentExpression':
                return this.getType(ast.left);

              case 'CallExpression':
                if (this.isAstMathFunction(ast)) {
                  return 'Number';
                }

                if (!ast.callee || !ast.callee.name) {
                  if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {
                    var functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;
                    this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                    return this.lookupReturnType(functionName, ast, this);
                  }

                  if (this.getVariableSignature(ast.callee, true) === 'this.color') {
                    return null;
                  }

                  if (ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.property && ast.callee.property.name && ast.arguments) {
                    var _functionName = ast.callee.property.name;
                    this.inferArgumentTypesIfNeeded(_functionName, ast.arguments);
                    return this.lookupReturnType(_functionName, ast, this);
                  }

                  throw this.astErrorOutput('Unknown call expression', ast);
                }

                if (ast.callee && ast.callee.name) {
                  var _functionName2 = ast.callee.name;
                  this.inferArgumentTypesIfNeeded(_functionName2, ast.arguments);
                  return this.lookupReturnType(_functionName2, ast, this);
                }

                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);

              case 'LogicalExpression':
                return 'Boolean';

              case 'BinaryExpression':
                switch (ast.operator) {
                  case '%':
                  case '/':
                    if (this.fixIntegerDivisionAccuracy) {
                      return 'Number';
                    } else {
                      break;
                    }

                  case '>':
                  case '<':
                    return 'Boolean';

                  case '&':
                  case '|':
                  case '^':
                  case '<<':
                  case '>>':
                  case '>>>':
                    return 'Integer';
                }

                var type = this.getType(ast.left);
                if (this.isState('skip-literal-correction')) return type;

                if (type === 'LiteralInteger') {
                  var rightType = this.getType(ast.right);

                  if (rightType === 'LiteralInteger') {
                    if (ast.left.value % 1 === 0) {
                      return 'Integer';
                    } else {
                      return 'Float';
                    }
                  }

                  return rightType;
                }

                return typeLookupMap[type] || type;

              case 'UpdateExpression':
                return this.getType(ast.argument);

              case 'UnaryExpression':
                if (ast.operator === '~') {
                  return 'Integer';
                }

                return this.getType(ast.argument);

              case 'VariableDeclaration':
                {
                  var declarations = ast.declarations;
                  var lastType;

                  for (var i = 0; i < declarations.length; i++) {
                    var _declaration = declarations[i];
                    lastType = this.getType(_declaration);
                  }

                  if (!lastType) {
                    throw this.astErrorOutput("Unable to find type for declaration", ast);
                  }

                  return lastType;
                }

              case 'VariableDeclarator':
                var declaration = this.getDeclaration(ast.id);

                if (!declaration) {
                  throw this.astErrorOutput("Unable to find declarator", ast);
                }

                if (!declaration.valueType) {
                  throw this.astErrorOutput("Unable to find declarator valueType", ast);
                }

                return declaration.valueType;

              case 'Identifier':
                if (ast.name === 'Infinity') {
                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var signature = this.getVariableSignature(ast);

                  if (signature === 'value') {
                    return this.getCheckVariableType(ast);
                  }
                }

                var origin = this.findIdentifierOrigin(ast);

                if (origin && origin.init) {
                  return this.getType(origin.init);
                }

                return null;

              case 'ReturnStatement':
                return this.getType(ast.argument);

              case 'MemberExpression':
                if (this.isAstMathFunction(ast)) {
                  switch (ast.property.name) {
                    case 'ceil':
                      return 'Integer';

                    case 'floor':
                      return 'Integer';

                    case 'round':
                      return 'Integer';
                  }

                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var variableSignature = this.getVariableSignature(ast);

                  switch (variableSignature) {
                    case 'value[]':
                      return this.getLookupType(this.getCheckVariableType(ast.object));

                    case 'value[][]':
                      return this.getLookupType(this.getCheckVariableType(ast.object.object));

                    case 'value[][][]':
                      return this.getLookupType(this.getCheckVariableType(ast.object.object.object));

                    case 'value[][][][]':
                      return this.getLookupType(this.getCheckVariableType(ast.object.object.object.object));

                    case 'value.thread.value':
                    case 'this.thread.value':
                      return 'Integer';

                    case 'this.output.value':
                      return this.dynamicOutput ? 'Integer' : 'LiteralInteger';

                    case 'this.constants.value':
                      return this.getConstantType(ast.property.name);

                    case 'this.constants.value[]':
                      return this.getLookupType(this.getConstantType(ast.object.property.name));

                    case 'this.constants.value[][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.property.name));

                    case 'this.constants.value[][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));

                    case 'this.constants.value[][][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));

                    case 'fn()[]':
                    case 'fn()[][]':
                    case 'fn()[][][]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'value.value':
                      if (this.isAstMathVariable(ast)) {
                        return 'Number';
                      }

                      switch (ast.property.name) {
                        case 'r':
                        case 'g':
                        case 'b':
                        case 'a':
                          return this.getLookupType(this.getCheckVariableType(ast.object));
                      }

                    case '[][]':
                      return 'Number';
                  }

                  throw this.astErrorOutput('Unhandled getType MemberExpression', ast);
                }

                throw this.astErrorOutput('Unhandled getType MemberExpression', ast);

              case 'ConditionalExpression':
                return this.getType(ast.consequent);

              case 'FunctionDeclaration':
              case 'FunctionExpression':
                var lastReturn = this.findLastReturn(ast.body);

                if (lastReturn) {
                  return this.getType(lastReturn);
                }

                return null;

              case 'IfStatement':
                return this.getType(ast.consequent);

              case 'SequenceExpression':
                return this.getType(ast.expressions[ast.expressions.length - 1]);

              default:
                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);
            }
          }
        }, {
          key: "getCheckVariableType",
          value: function getCheckVariableType(ast) {
            var type = this.getVariableType(ast);

            if (!type) {
              throw this.astErrorOutput("".concat(ast.type, " is not defined"), ast);
            }

            return type;
          }
        }, {
          key: "inferArgumentTypesIfNeeded",
          value: function inferArgumentTypesIfNeeded(functionName, args) {
            for (var i = 0; i < args.length; i++) {
              if (!this.needsArgumentType(functionName, i)) continue;
              var type = this.getType(args[i]);

              if (!type) {
                throw this.astErrorOutput("Unable to infer argument ".concat(i), args[i]);
              }

              this.assignArgumentType(functionName, i, type);
            }
          }
        }, {
          key: "isAstMathVariable",
          value: function isAstMathVariable(ast) {
            var mathProperties = ['E', 'PI', 'SQRT2', 'SQRT1_2', 'LN2', 'LN10', 'LOG2E', 'LOG10E'];
            return ast.type === 'MemberExpression' && ast.object && ast.object.type === 'Identifier' && ast.object.name === 'Math' && ast.property && ast.property.type === 'Identifier' && mathProperties.indexOf(ast.property.name) > -1;
          }
        }, {
          key: "isAstMathFunction",
          value: function isAstMathFunction(ast) {
            var mathFunctions = ['abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'clz32', 'cos', 'cosh', 'expm1', 'exp', 'floor', 'fround', 'imul', 'log', 'log2', 'log10', 'log1p', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'];
            return ast.type === 'CallExpression' && ast.callee && ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.object.type === 'Identifier' && ast.callee.object.name === 'Math' && ast.callee.property && ast.callee.property.type === 'Identifier' && mathFunctions.indexOf(ast.callee.property.name) > -1;
          }
        }, {
          key: "isAstVariable",
          value: function isAstVariable(ast) {
            return ast.type === 'Identifier' || ast.type === 'MemberExpression';
          }
        }, {
          key: "isSafe",
          value: function isSafe(ast) {
            return this.isSafeDependencies(this.getDependencies(ast));
          }
        }, {
          key: "isSafeDependencies",
          value: function isSafeDependencies(dependencies) {
            return dependencies && dependencies.every ? dependencies.every(function (dependency) {
              return dependency.isSafe;
            }) : true;
          }
        }, {
          key: "getDependencies",
          value: function getDependencies(ast, dependencies, isNotSafe) {
            if (!dependencies) {
              dependencies = [];
            }

            if (!ast) return null;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.getDependencies(ast[i], dependencies, isNotSafe);
              }

              return dependencies;
            }

            switch (ast.type) {
              case 'AssignmentExpression':
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'ConditionalExpression':
                this.getDependencies(ast.test, dependencies, isNotSafe);
                this.getDependencies(ast.alternate, dependencies, isNotSafe);
                this.getDependencies(ast.consequent, dependencies, isNotSafe);
                return dependencies;

              case 'Literal':
                dependencies.push({
                  origin: 'literal',
                  value: ast.value,
                  isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)
                });
                break;

              case 'VariableDeclarator':
                return this.getDependencies(ast.init, dependencies, isNotSafe);

              case 'Identifier':
                var declaration = this.getDeclaration(ast);

                if (declaration) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'declaration',
                    isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies)
                  });
                } else if (this.argumentNames.indexOf(ast.name) > -1) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'argument',
                    isSafe: false
                  });
                } else if (this.strictTypingChecking) {
                  throw new Error("Cannot find identifier origin \"".concat(ast.name, "\""));
                }

                break;

              case 'FunctionDeclaration':
                return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);

              case 'ReturnStatement':
                return this.getDependencies(ast.argument, dependencies);

              case 'BinaryExpression':
              case 'LogicalExpression':
                isNotSafe = ast.operator === '/' || ast.operator === '*';
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'UnaryExpression':
              case 'UpdateExpression':
                return this.getDependencies(ast.argument, dependencies, isNotSafe);

              case 'VariableDeclaration':
                return this.getDependencies(ast.declarations, dependencies, isNotSafe);

              case 'ArrayExpression':
                dependencies.push({
                  origin: 'declaration',
                  isSafe: true
                });
                return dependencies;

              case 'CallExpression':
                dependencies.push({
                  origin: 'function',
                  isSafe: true
                });
                return dependencies;

              case 'MemberExpression':
                var details = this.getMemberExpressionDetails(ast);

                switch (details.signature) {
                  case 'value[]':
                    this.getDependencies(ast.object, dependencies, isNotSafe);
                    break;

                  case 'value[][]':
                    this.getDependencies(ast.object.object, dependencies, isNotSafe);
                    break;

                  case 'value[][][]':
                    this.getDependencies(ast.object.object.object, dependencies, isNotSafe);
                    break;

                  case 'this.output.value':
                    if (this.dynamicOutput) {
                      dependencies.push({
                        name: details.name,
                        origin: 'output',
                        isSafe: false
                      });
                    }

                    break;
                }

                if (details) {
                  if (details.property) {
                    this.getDependencies(details.property, dependencies, isNotSafe);
                  }

                  if (details.xProperty) {
                    this.getDependencies(details.xProperty, dependencies, isNotSafe);
                  }

                  if (details.yProperty) {
                    this.getDependencies(details.yProperty, dependencies, isNotSafe);
                  }

                  if (details.zProperty) {
                    this.getDependencies(details.zProperty, dependencies, isNotSafe);
                  }

                  return dependencies;
                }

              case 'SequenceExpression':
                return this.getDependencies(ast.expressions, dependencies, isNotSafe);

              default:
                throw this.astErrorOutput("Unhandled type ".concat(ast.type, " in getDependencies"), ast);
            }

            return dependencies;
          }
        }, {
          key: "getVariableSignature",
          value: function getVariableSignature(ast, returnRawValue) {
            if (!this.isAstVariable(ast)) {
              throw new Error("ast of type \"".concat(ast.type, "\" is not a variable signature"));
            }

            if (ast.type === 'Identifier') {
              return 'value';
            }

            var signature = [];

            while (true) {
              if (!ast) break;

              if (ast.computed) {
                signature.push('[]');
              } else if (ast.type === 'ThisExpression') {
                signature.unshift('this');
              } else if (ast.property && ast.property.name) {
                if (ast.property.name === 'x' || ast.property.name === 'y' || ast.property.name === 'z') {
                  signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');
                } else if (ast.property.name === 'constants' || ast.property.name === 'thread' || ast.property.name === 'output') {
                  signature.unshift('.' + ast.property.name);
                } else {
                  signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');
                }
              } else if (ast.name) {
                signature.unshift(returnRawValue ? ast.name : 'value');
              } else if (ast.callee && ast.callee.name) {
                signature.unshift(returnRawValue ? ast.callee.name + '()' : 'fn()');
              } else if (ast.elements) {
                signature.unshift('[]');
              } else {
                signature.unshift('unknown');
              }

              ast = ast.object;
            }

            var signatureString = signature.join('');

            if (returnRawValue) {
              return signatureString;
            }

            var allowedExpressions = ['value', 'value[]', 'value[][]', 'value[][][]', 'value[][][][]', 'value.value', 'value.thread.value', 'this.thread.value', 'this.output.value', 'this.constants.value', 'this.constants.value[]', 'this.constants.value[][]', 'this.constants.value[][][]', 'this.constants.value[][][][]', 'fn()[]', 'fn()[][]', 'fn()[][][]', '[][]'];

            if (allowedExpressions.indexOf(signatureString) > -1) {
              return signatureString;
            }

            return null;
          }
        }, {
          key: "build",
          value: function build() {
            return this.toString().length > 0;
          }
        }, {
          key: "astGeneric",
          value: function astGeneric(ast, retArr) {
            if (ast === null) {
              throw this.astErrorOutput('NULL ast', ast);
            } else {
              if (Array.isArray(ast)) {
                for (var i = 0; i < ast.length; i++) {
                  this.astGeneric(ast[i], retArr);
                }

                return retArr;
              }

              switch (ast.type) {
                case 'FunctionDeclaration':
                  return this.astFunctionDeclaration(ast, retArr);

                case 'FunctionExpression':
                  return this.astFunctionExpression(ast, retArr);

                case 'ReturnStatement':
                  return this.astReturnStatement(ast, retArr);

                case 'Literal':
                  return this.astLiteral(ast, retArr);

                case 'BinaryExpression':
                  return this.astBinaryExpression(ast, retArr);

                case 'Identifier':
                  return this.astIdentifierExpression(ast, retArr);

                case 'AssignmentExpression':
                  return this.astAssignmentExpression(ast, retArr);

                case 'ExpressionStatement':
                  return this.astExpressionStatement(ast, retArr);

                case 'EmptyStatement':
                  return this.astEmptyStatement(ast, retArr);

                case 'BlockStatement':
                  return this.astBlockStatement(ast, retArr);

                case 'IfStatement':
                  return this.astIfStatement(ast, retArr);

                case 'SwitchStatement':
                  return this.astSwitchStatement(ast, retArr);

                case 'BreakStatement':
                  return this.astBreakStatement(ast, retArr);

                case 'ContinueStatement':
                  return this.astContinueStatement(ast, retArr);

                case 'ForStatement':
                  return this.astForStatement(ast, retArr);

                case 'WhileStatement':
                  return this.astWhileStatement(ast, retArr);

                case 'DoWhileStatement':
                  return this.astDoWhileStatement(ast, retArr);

                case 'VariableDeclaration':
                  return this.astVariableDeclaration(ast, retArr);

                case 'VariableDeclarator':
                  return this.astVariableDeclarator(ast, retArr);

                case 'ThisExpression':
                  return this.astThisExpression(ast, retArr);

                case 'SequenceExpression':
                  return this.astSequenceExpression(ast, retArr);

                case 'UnaryExpression':
                  return this.astUnaryExpression(ast, retArr);

                case 'UpdateExpression':
                  return this.astUpdateExpression(ast, retArr);

                case 'LogicalExpression':
                  return this.astLogicalExpression(ast, retArr);

                case 'MemberExpression':
                  return this.astMemberExpression(ast, retArr);

                case 'CallExpression':
                  return this.astCallExpression(ast, retArr);

                case 'ArrayExpression':
                  return this.astArrayExpression(ast, retArr);

                case 'DebuggerStatement':
                  return this.astDebuggerStatement(ast, retArr);

                case 'ConditionalExpression':
                  return this.astConditionalExpression(ast, retArr);
              }

              throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);
            }
          }
        }, {
          key: "astErrorOutput",
          value: function astErrorOutput(error, ast) {
            if (typeof this.source !== 'string') {
              return new Error(error);
            }

            var debugString = utils.getAstString(this.source, ast);
            var leadingSource = this.source.substr(ast.start);
            var splitLines = leadingSource.split(/\n/);
            var lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;
            return new Error("".concat(error, " on line ").concat(splitLines.length, ", position ").concat(lineBefore.length, ":\n ").concat(debugString));
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            return retArr;
          }
        }, {
          key: "astConditionalExpression",
          value: function astConditionalExpression(ast, retArr) {
            if (ast.type !== 'ConditionalExpression') {
              throw this.astErrorOutput('Not a conditional expression', ast);
            }

            retArr.push('(');
            this.astGeneric(ast.test, retArr);
            retArr.push('?');
            this.astGeneric(ast.consequent, retArr);
            retArr.push(':');
            this.astGeneric(ast.alternate, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            throw new Error("\"astFunction\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "astFunctionDeclaration",
          value: function astFunctionDeclaration(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "astFunctionExpression",
          value: function astFunctionExpression(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "isChildFunction",
          value: function isChildFunction(ast) {
            for (var i = 0; i < this.functions.length; i++) {
              if (this.functions[i] === ast) {
                return true;
              }
            }

            return false;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            this.literalTypes[this.astKey(ast)] = 'Number';
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astExpressionStatement",
          value: function astExpressionStatement(esNode, retArr) {
            this.astGeneric(esNode.expression, retArr);
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astEmptyStatement",
          value: function astEmptyStatement(eNode, retArr) {
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astBreakStatement",
          value: function astBreakStatement(brNode, retArr) {
            retArr.push('break;');
            return retArr;
          }
        }, {
          key: "astContinueStatement",
          value: function astContinueStatement(crNode, retArr) {
            retArr.push('continue;\n');
            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astVariableDeclarator",
          value: function astVariableDeclarator(iVarDecNode, retArr) {
            this.astGeneric(iVarDecNode.id, retArr);

            if (iVarDecNode.init !== null) {
              retArr.push('=');
              this.astGeneric(iVarDecNode.init, retArr);
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astSequenceExpression",
          value: function astSequenceExpression(sNode, retArr) {
            var expressions = sNode.expressions;
            var sequenceResult = [];

            for (var i = 0; i < expressions.length; i++) {
              var expression = expressions[i];
              var expressionResult = [];
              this.astGeneric(expression, expressionResult);
              sequenceResult.push(expressionResult.join(''));
            }

            if (sequenceResult.length > 1) {
              retArr.push('(', sequenceResult.join(','), ')');
            } else {
              retArr.push(sequenceResult[0]);
            }

            return retArr;
          }
        }, {
          key: "astUnaryExpression",
          value: function astUnaryExpression(uNode, retArr) {
            var unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);

            if (unaryResult) {
              return retArr;
            }

            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(uNode, retArr) {}
        }, {
          key: "astUpdateExpression",
          value: function astUpdateExpression(uNode, retArr) {
            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "astLogicalExpression",
          value: function astLogicalExpression(logNode, retArr) {
            retArr.push('(');
            this.astGeneric(logNode.left, retArr);
            retArr.push(logNode.operator);
            this.astGeneric(logNode.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "getMemberExpressionDetails",
          value: function getMemberExpressionDetails(ast) {
            if (ast.type !== 'MemberExpression') {
              throw this.astErrorOutput("Expression ".concat(ast.type, " not a MemberExpression"), ast);
            }

            var name = null;
            var type = null;
            var variableSignature = this.getVariableSignature(ast);

            switch (variableSignature) {
              case 'value':
                return null;

              case 'value.thread.value':
              case 'this.thread.value':
              case 'this.output.value':
                return {
                  signature: variableSignature,
                  type: 'Integer',
                  name: ast.property.name
                };

              case 'value[]':
                if (typeof ast.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object),
                  xProperty: ast.property
                };

              case 'value[][]':
                if (typeof ast.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object),
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][]':
                if (typeof ast.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][][]':
                if (typeof ast.object.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                if (this.isAstMathVariable(ast)) {
                  name = ast.property.name;
                  return {
                    name: name,
                    origin: 'Math',
                    type: 'Number',
                    signature: variableSignature
                  };
                }

                switch (ast.property.name) {
                  case 'r':
                  case 'g':
                  case 'b':
                  case 'a':
                    name = ast.object.name;
                    return {
                      name: name,
                      property: ast.property.name,
                      origin: 'user',
                      signature: variableSignature,
                      type: 'Number'
                    };

                  default:
                    throw this.astErrorOutput('Unexpected expression', ast);
                }

              case 'this.constants.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature
                };

              case 'this.constants.value[]':
                if (typeof ast.object.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature,
                  xProperty: ast.property
                };

              case 'this.constants.value[][]':
                {
                  if (typeof ast.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'this.constants.value[][][]':
                {
                  if (typeof ast.object.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'fn()[]':
              case 'fn()[][]':
              case '[][]':
                return {
                  signature: variableSignature,
                  property: ast.property
                };

              default:
                throw this.astErrorOutput('Unexpected expression', ast);
            }
          }
        }, {
          key: "findIdentifierOrigin",
          value: function findIdentifierOrigin(astToFind) {
            var stack = [this.ast];

            while (stack.length > 0) {
              var atNode = stack[0];

              if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {
                return atNode;
              }

              stack.shift();

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              }
            }

            return null;
          }
        }, {
          key: "findLastReturn",
          value: function findLastReturn(ast) {
            var stack = [ast || this.ast];

            while (stack.length > 0) {
              var atNode = stack.pop();

              if (atNode.type === 'ReturnStatement') {
                return atNode;
              }

              if (atNode.type === 'FunctionDeclaration') {
                continue;
              }

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              } else if (atNode.consequent) {
                stack.push(atNode.consequent);
              } else if (atNode.cases) {
                stack.push(atNode.cases);
              }
            }

            return null;
          }
        }, {
          key: "getInternalVariableName",
          value: function getInternalVariableName(name) {
            if (!this._internalVariableNames.hasOwnProperty(name)) {
              this._internalVariableNames[name] = 0;
            }

            this._internalVariableNames[name]++;

            if (this._internalVariableNames[name] === 1) {
              return name;
            }

            return name + this._internalVariableNames[name];
          }
        }, {
          key: "astKey",
          value: function astKey(ast) {
            var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
            if (!ast.start || !ast.end) throw new Error('AST start and end needed');
            return "".concat(ast.start).concat(separator).concat(ast.end);
          }
        }]);

        return FunctionNode;
      }();

      var typeLookupMap = {
        'Number': 'Number',
        'Float': 'Float',
        'Integer': 'Integer',
        'Array': 'Number',
        'Array(2)': 'Number',
        'Array(3)': 'Number',
        'Array(4)': 'Number',
        'Matrix(2)': 'Number',
        'Matrix(3)': 'Number',
        'Matrix(4)': 'Number',
        'Array2D': 'Number',
        'Array3D': 'Number',
        'Input': 'Number',
        'HTMLCanvas': 'Array(4)',
        'HTMLImage': 'Array(4)',
        'HTMLVideo': 'Array(4)',
        'HTMLImageArray': 'Array(4)',
        'NumberTexture': 'Number',
        'MemoryOptimizedNumberTexture': 'Number',
        'Array1D(2)': 'Array(2)',
        'Array1D(3)': 'Array(3)',
        'Array1D(4)': 'Array(4)',
        'Array2D(2)': 'Array(2)',
        'Array2D(3)': 'Array(3)',
        'Array2D(4)': 'Array(4)',
        'Array3D(2)': 'Array(2)',
        'Array3D(3)': 'Array(3)',
        'Array3D(4)': 'Array(4)',
        'ArrayTexture(1)': 'Number',
        'ArrayTexture(2)': 'Array(2)',
        'ArrayTexture(3)': 'Array(3)',
        'ArrayTexture(4)': 'Array(4)'
      };
      module.exports = {
        FunctionNode: FunctionNode
      };
    }, {
      "../utils": 114,
      "./function-tracer": 11,
      "acorn": 1
    }],
    11: [function (require, module, exports) {
      var _require11 = require('../utils'),
          utils = _require11.utils;

      function last(array) {
        return array.length > 0 ? array[array.length - 1] : null;
      }

      var states = {
        trackIdentifiers: 'trackIdentifiers',
        memberExpression: 'memberExpression',
        inForLoopInit: 'inForLoopInit'
      };

      var FunctionTracer = /*#__PURE__*/function () {
        "use strict";

        function FunctionTracer(ast) {
          _classCallCheck(this, FunctionTracer);

          this.runningContexts = [];
          this.functionContexts = [];
          this.contexts = [];
          this.functionCalls = [];
          this.declarations = [];
          this.identifiers = [];
          this.functions = [];
          this.returnStatements = [];
          this.trackedIdentifiers = null;
          this.states = [];
          this.newFunctionContext();
          this.scan(ast);
        }

        _createClass(FunctionTracer, [{
          key: "isState",
          value: function isState(state) {
            return this.states[this.states.length - 1] === state;
          }
        }, {
          key: "hasState",
          value: function hasState(state) {
            return this.states.indexOf(state) > -1;
          }
        }, {
          key: "pushState",
          value: function pushState(state) {
            this.states.push(state);
          }
        }, {
          key: "popState",
          value: function popState(state) {
            if (this.isState(state)) {
              this.states.pop();
            } else {
              throw new Error("Cannot pop the non-active state \"".concat(state, "\""));
            }
          }
        }, {
          key: "currentFunctionContext",
          get: function get() {
            return last(this.functionContexts);
          }
        }, {
          key: "currentContext",
          get: function get() {
            return last(this.runningContexts);
          }
        }, {
          key: "newFunctionContext",
          value: function newFunctionContext() {
            var newContext = {
              '@contextType': 'function'
            };
            this.contexts.push(newContext);
            this.functionContexts.push(newContext);
          }
        }, {
          key: "newContext",
          value: function newContext(run) {
            var newContext = Object.assign({
              '@contextType': 'const/let'
            }, this.currentContext);
            this.contexts.push(newContext);
            this.runningContexts.push(newContext);
            run();
            var currentFunctionContext = this.currentFunctionContext;

            for (var p in currentFunctionContext) {
              if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;
              newContext[p] = currentFunctionContext[p];
            }

            this.runningContexts.pop();
            return newContext;
          }
        }, {
          key: "useFunctionContext",
          value: function useFunctionContext(run) {
            var functionContext = last(this.functionContexts);
            this.runningContexts.push(functionContext);
            run();
            this.runningContexts.pop();
          }
        }, {
          key: "getIdentifiers",
          value: function getIdentifiers(run) {
            var trackedIdentifiers = this.trackedIdentifiers = [];
            this.pushState(states.trackIdentifiers);
            run();
            this.trackedIdentifiers = null;
            this.popState(states.trackIdentifiers);
            return trackedIdentifiers;
          }
        }, {
          key: "getDeclaration",
          value: function getDeclaration(name) {
            var currentContext = this.currentContext,
                currentFunctionContext = this.currentFunctionContext,
                runningContexts = this.runningContexts;
            var declaration = currentContext[name] || currentFunctionContext[name] || null;

            if (!declaration && currentContext === currentFunctionContext && runningContexts.length > 0) {
              var previousRunningContext = runningContexts[runningContexts.length - 2];

              if (previousRunningContext[name]) {
                return previousRunningContext[name];
              }
            }

            return declaration;
          }
        }, {
          key: "scan",
          value: function scan(ast) {
            var _this4 = this;

            if (!ast) return;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.scan(ast[i]);
              }

              return;
            }

            switch (ast.type) {
              case 'Program':
                this.useFunctionContext(function () {
                  _this4.scan(ast.body);
                });
                break;

              case 'BlockStatement':
                this.newContext(function () {
                  _this4.scan(ast.body);
                });
                break;

              case 'AssignmentExpression':
              case 'LogicalExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'BinaryExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'UpdateExpression':
                if (ast.operator === '++') {
                  var declaration = this.getDeclaration(ast.argument.name);

                  if (declaration) {
                    declaration.suggestedType = 'Integer';
                  }
                }

                this.scan(ast.argument);
                break;

              case 'UnaryExpression':
                this.scan(ast.argument);
                break;

              case 'VariableDeclaration':
                if (ast.kind === 'var') {
                  this.useFunctionContext(function () {
                    ast.declarations = utils.normalizeDeclarations(ast);

                    _this4.scan(ast.declarations);
                  });
                } else {
                  ast.declarations = utils.normalizeDeclarations(ast);
                  this.scan(ast.declarations);
                }

                break;

              case 'VariableDeclarator':
                {
                  var currentContext = this.currentContext;
                  var inForLoopInit = this.hasState(states.inForLoopInit);
                  var _declaration2 = {
                    ast: ast,
                    context: currentContext,
                    name: ast.id.name,
                    origin: 'declaration',
                    inForLoopInit: inForLoopInit,
                    inForLoopTest: null,
                    assignable: currentContext === this.currentFunctionContext || !inForLoopInit && !currentContext.hasOwnProperty(ast.id.name),
                    suggestedType: null,
                    valueType: null,
                    dependencies: null,
                    isSafe: null
                  };

                  if (!currentContext[ast.id.name]) {
                    currentContext[ast.id.name] = _declaration2;
                  }

                  this.declarations.push(_declaration2);
                  this.scan(ast.id);
                  this.scan(ast.init);
                  break;
                }

              case 'FunctionExpression':
              case 'FunctionDeclaration':
                if (this.runningContexts.length === 0) {
                  this.scan(ast.body);
                } else {
                  this.functions.push(ast);
                }

                break;

              case 'IfStatement':
                this.scan(ast.test);
                this.scan(ast.consequent);
                if (ast.alternate) this.scan(ast.alternate);
                break;

              case 'ForStatement':
                {
                  var testIdentifiers;
                  var context = this.newContext(function () {
                    _this4.pushState(states.inForLoopInit);

                    _this4.scan(ast.init);

                    _this4.popState(states.inForLoopInit);

                    testIdentifiers = _this4.getIdentifiers(function () {
                      _this4.scan(ast.test);
                    });

                    _this4.scan(ast.update);

                    _this4.newContext(function () {
                      _this4.scan(ast.body);
                    });
                  });

                  if (testIdentifiers) {
                    for (var p in context) {
                      if (p === '@contextType') continue;

                      if (testIdentifiers.indexOf(p) > -1) {
                        context[p].inForLoopTest = true;
                      }
                    }
                  }

                  break;
                }

              case 'DoWhileStatement':
              case 'WhileStatement':
                this.newContext(function () {
                  _this4.scan(ast.body);

                  _this4.scan(ast.test);
                });
                break;

              case 'Identifier':
                {
                  if (this.isState(states.trackIdentifiers)) {
                    this.trackedIdentifiers.push(ast.name);
                  }

                  this.identifiers.push({
                    context: this.currentContext,
                    declaration: this.getDeclaration(ast.name),
                    ast: ast
                  });
                  break;
                }

              case 'ReturnStatement':
                this.returnStatements.push(ast);
                this.scan(ast.argument);
                break;

              case 'MemberExpression':
                this.pushState(states.memberExpression);
                this.scan(ast.object);
                this.scan(ast.property);
                this.popState(states.memberExpression);
                break;

              case 'ExpressionStatement':
                this.scan(ast.expression);
                break;

              case 'SequenceExpression':
                this.scan(ast.expressions);
                break;

              case 'CallExpression':
                this.functionCalls.push({
                  context: this.currentContext,
                  ast: ast
                });
                this.scan(ast.arguments);
                break;

              case 'ArrayExpression':
                this.scan(ast.elements);
                break;

              case 'ConditionalExpression':
                this.scan(ast.test);
                this.scan(ast.alternate);
                this.scan(ast.consequent);
                break;

              case 'SwitchStatement':
                this.scan(ast.discriminant);
                this.scan(ast.cases);
                break;

              case 'SwitchCase':
                this.scan(ast.test);
                this.scan(ast.consequent);
                break;

              case 'ThisExpression':
              case 'Literal':
              case 'DebuggerStatement':
              case 'EmptyStatement':
              case 'BreakStatement':
              case 'ContinueStatement':
                break;

              default:
                throw new Error("unhandled type \"".concat(ast.type, "\""));
            }
          }
        }]);

        return FunctionTracer;
      }();

      module.exports = {
        FunctionTracer: FunctionTracer
      };
    }, {
      "../utils": 114
    }],
    12: [function (require, module, exports) {
      var _require12 = require('gl-wiretap'),
          glWiretap = _require12.glWiretap;

      var _require13 = require('../../utils'),
          utils = _require13.utils;

      function toStringWithoutUtils(fn) {
        return fn.toString().replace('=>', '').replace(/^function /, '').replace(/utils[.]/g, '/*utils.*/');
      }

      function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {
        if (!originKernel.built) {
          originKernel.build.apply(originKernel, args);
        }

        args = args ? Array.from(args).map(function (arg) {
          switch (typeof arg) {
            case 'boolean':
              return new Boolean(arg);

            case 'number':
              return new Number(arg);

            default:
              return arg;
          }
        }) : null;
        var uploadedValues = [];
        var postResult = [];
        var context = glWiretap(originKernel.context, {
          useTrackablePrimitives: true,
          onReadPixels: function onReadPixels(targetName) {
            if (kernel.subKernels) {
              if (!subKernelsResultVariableSetup) {
                postResult.push("    const result = { result: ".concat(getRenderString(targetName, kernel), " };"));
                subKernelsResultVariableSetup = true;
              } else {
                var property = kernel.subKernels[subKernelsResultIndex++].property;
                postResult.push("    result".concat(isNaN(property) ? '.' + property : "[".concat(property, "]"), " = ").concat(getRenderString(targetName, kernel), ";"));
              }

              if (subKernelsResultIndex === kernel.subKernels.length) {
                postResult.push('    return result;');
              }

              return;
            }

            if (targetName) {
              postResult.push("    return ".concat(getRenderString(targetName, kernel), ";"));
            } else {
              postResult.push("    return null;");
            }
          },
          onUnrecognizedArgumentLookup: function onUnrecognizedArgumentLookup(argument) {
            var argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);

            if (argumentName) {
              return argumentName;
            }

            var constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(function (key) {
              return constants[key];
            }) : [], context, uploadedValues);

            if (constantName) {
              return constantName;
            }

            return null;
          }
        });
        var subKernelsResultVariableSetup = false;
        var subKernelsResultIndex = 0;
        var source = originKernel.source,
            canvas = originKernel.canvas,
            output = originKernel.output,
            pipeline = originKernel.pipeline,
            graphical = originKernel.graphical,
            loopMaxIterations = originKernel.loopMaxIterations,
            constants = originKernel.constants,
            optimizeFloatMemory = originKernel.optimizeFloatMemory,
            precision = originKernel.precision,
            fixIntegerDivisionAccuracy = originKernel.fixIntegerDivisionAccuracy,
            functions = originKernel.functions,
            nativeFunctions = originKernel.nativeFunctions,
            subKernels = originKernel.subKernels,
            immutable = originKernel.immutable,
            argumentTypes = originKernel.argumentTypes,
            constantTypes = originKernel.constantTypes,
            kernelArguments = originKernel.kernelArguments,
            kernelConstants = originKernel.kernelConstants,
            tactic = originKernel.tactic;
        var kernel = new Kernel(source, {
          canvas: canvas,
          context: context,
          checkContext: false,
          output: output,
          pipeline: pipeline,
          graphical: graphical,
          loopMaxIterations: loopMaxIterations,
          constants: constants,
          optimizeFloatMemory: optimizeFloatMemory,
          precision: precision,
          fixIntegerDivisionAccuracy: fixIntegerDivisionAccuracy,
          functions: functions,
          nativeFunctions: nativeFunctions,
          subKernels: subKernels,
          immutable: immutable,
          argumentTypes: argumentTypes,
          constantTypes: constantTypes,
          tactic: tactic
        });
        var result = [];
        context.setIndent(2);
        kernel.build.apply(kernel, args);
        result.push(context.toString());
        context.reset();
        kernel.kernelArguments.forEach(function (kernelArgument, i) {
          switch (kernelArgument.type) {
            case 'Integer':
            case 'Boolean':
            case 'Number':
            case 'Float':
            case 'Array':
            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
            case 'HTMLCanvas':
            case 'HTMLImage':
            case 'HTMLVideo':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'HTMLImageArray':
              for (var imageIndex = 0; imageIndex < args[i].length; imageIndex++) {
                var arg = args[i];
                context.insertVariable("uploadValue_".concat(kernelArgument.name, "[").concat(imageIndex, "]"), arg[imageIndex]);
              }

              break;

            case 'Input':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'MemoryOptimizedNumberTexture':
            case 'NumberTexture':
            case 'Array1D(2)':
            case 'Array1D(3)':
            case 'Array1D(4)':
            case 'Array2D(2)':
            case 'Array2D(3)':
            case 'Array2D(4)':
            case 'Array3D(2)':
            case 'Array3D(3)':
            case 'Array3D(4)':
            case 'ArrayTexture(1)':
            case 'ArrayTexture(2)':
            case 'ArrayTexture(3)':
            case 'ArrayTexture(4)':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), args[i].texture);
              break;

            default:
              throw new Error("unhandled kernelArgumentType insertion for glWiretap of type ".concat(kernelArgument.type));
          }
        });
        result.push('/** start of injected functions **/');
        result.push("function ".concat(toStringWithoutUtils(utils.flattenTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten2dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten3dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten4dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.isArray)));

        if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {
          result.push("  const renderOutput = function ".concat(toStringWithoutUtils(kernel.formatValues), ";"));
        }

        result.push('/** end of injected functions **/');
        result.push("  const innerKernel = function (".concat(kernel.kernelArguments.map(function (kernelArgument) {
          return kernelArgument.varName;
        }).join(', '), ") {"));
        context.setIndent(4);
        kernel.run.apply(kernel, args);

        if (kernel.renderKernels) {
          kernel.renderKernels();
        } else if (kernel.renderOutput) {
          kernel.renderOutput();
        }

        result.push('    /** start setup uploads for kernel values **/');
        kernel.kernelArguments.forEach(function (kernelArgument) {
          result.push('    ' + kernelArgument.getStringValueHandler().split('\n').join('\n    '));
        });
        result.push('    /** end setup uploads for kernel values **/');
        result.push(context.toString());

        if (kernel.renderOutput === kernel.renderTexture) {
          context.reset();
          var framebufferName = context.getContextVariableName(kernel.framebuffer);

          if (kernel.renderKernels) {
            var results = kernel.renderKernels();
            var textureName = context.getContextVariableName(kernel.texture.texture);
            result.push("    return {\n      result: {\n        texture: ".concat(textureName, ",\n        type: '").concat(results.result.type, "',\n        toArray: ").concat(getToArrayString(results.result, textureName, framebufferName), "\n      },"));
            var _subKernels = kernel.subKernels,
                mappedTextures = kernel.mappedTextures;

            for (var i = 0; i < _subKernels.length; i++) {
              var texture = mappedTextures[i];
              var subKernel = _subKernels[i];
              var subKernelResult = results[subKernel.property];
              var subKernelTextureName = context.getContextVariableName(texture.texture);
              result.push("\n      ".concat(subKernel.property, ": {\n        texture: ").concat(subKernelTextureName, ",\n        type: '").concat(subKernelResult.type, "',\n        toArray: ").concat(getToArrayString(subKernelResult, subKernelTextureName, framebufferName), "\n      },"));
            }

            result.push("    };");
          } else {
            var rendered = kernel.renderOutput();

            var _textureName = context.getContextVariableName(kernel.texture.texture);

            result.push("    return {\n        texture: ".concat(_textureName, ",\n        type: '").concat(rendered.type, "',\n        toArray: ").concat(getToArrayString(rendered, _textureName, framebufferName), "\n      };"));
          }
        }

        result.push("    ".concat(destroyContextString ? '\n' + destroyContextString + '    ' : ''));
        result.push(postResult.join('\n'));
        result.push('  };');

        if (kernel.graphical) {
          result.push(getGetPixelsString(kernel));
          result.push("  innerKernel.getPixels = getPixels;");
        }

        result.push('  return innerKernel;');
        var constantsUpload = [];
        kernelConstants.forEach(function (kernelConstant) {
          constantsUpload.push("".concat(kernelConstant.getStringValueHandler()));
        });
        return "function kernel(settings) {\n  const { context, constants } = settings;\n  ".concat(constantsUpload.join(''), "\n  ").concat(setupContextString ? setupContextString : '', "\n").concat(result.join('\n'), "\n}");
      }

      function getRenderString(targetName, kernel) {
        var readBackValue = kernel.precision === 'single' ? targetName : "new Float32Array(".concat(targetName, ".buffer)");

        if (kernel.output[2]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ", ").concat(kernel.output[2], ")");
        }

        if (kernel.output[1]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ")");
        }

        return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ")");
      }

      function getGetPixelsString(kernel) {
        var getPixels = kernel.getPixels.toString();
        var useFunctionKeyword = !/^function/.test(getPixels);
        return utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(getPixels), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            }

            return null;
          },
          thisLookup: function thisLookup(property) {
            if (property === 'context') {
              return null;
            }

            if (kernel.hasOwnProperty(property)) {
              return JSON.stringify(kernel[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
      }

      function getToArrayString(kernelResult, textureName, framebufferName) {
        var toArray = kernelResult.toArray.toString();
        var useFunctionKeyword = !/^function/.test(toArray);
        var flattenedFunctions = utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(toArray), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            } else if (object === 'this') {
              if (name === 'framebuffer') {
                return '';
              }

              return "".concat(useFunctionKeyword ? 'function ' : '').concat(kernelResult[name].toString());
            } else {
              throw new Error('unhandled fromObject');
            }
          },
          thisLookup: function thisLookup(property, isDeclaration) {
            if (property === 'texture') {
              return textureName;
            }

            if (property === 'context') {
              if (isDeclaration) return null;
              return 'gl';
            }

            if (kernelResult.hasOwnProperty(property)) {
              return JSON.stringify(kernelResult[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
        return "() => {\n  function framebuffer() { return ".concat(framebufferName, "; };\n  ").concat(flattenedFunctions, "\n  return toArray();\n  }");
      }

      function findKernelValue(argument, kernelValues, values, context, uploadedValues) {
        if (argument === null) return null;
        if (kernelValues === null) return null;

        switch (typeof argument) {
          case 'boolean':
          case 'number':
            return null;
        }

        if (typeof HTMLImageElement !== 'undefined' && argument instanceof HTMLImageElement) {
          for (var i = 0; i < kernelValues.length; i++) {
            var kernelValue = kernelValues[i];
            if (kernelValue.type !== 'HTMLImageArray' && kernelValue) continue;
            if (kernelValue.uploadValue !== argument) continue;
            var variableIndex = values[i].indexOf(argument);
            if (variableIndex === -1) continue;
            var variableName = "uploadValue_".concat(kernelValue.name, "[").concat(variableIndex, "]");
            context.insertVariable(variableName, argument);
            return variableName;
          }
        }

        for (var _i10 = 0; _i10 < kernelValues.length; _i10++) {
          var _kernelValue = kernelValues[_i10];
          if (argument !== _kernelValue.uploadValue) continue;
          var variable = "uploadValue_".concat(_kernelValue.name);
          context.insertVariable(variable, _kernelValue);
          return variable;
        }

        return null;
      }

      module.exports = {
        glKernelString: glKernelString
      };
    }, {
      "../../utils": 114,
      "gl-wiretap": 3
    }],
    13: [function (require, module, exports) {
      var _require14 = require('../kernel'),
          Kernel = _require14.Kernel;

      var _require15 = require('../../utils'),
          utils = _require15.utils;

      var _require16 = require('./texture/array-2-float'),
          GLTextureArray2Float = _require16.GLTextureArray2Float;

      var _require17 = require('./texture/array-2-float-2d'),
          GLTextureArray2Float2D = _require17.GLTextureArray2Float2D;

      var _require18 = require('./texture/array-2-float-3d'),
          GLTextureArray2Float3D = _require18.GLTextureArray2Float3D;

      var _require19 = require('./texture/array-3-float'),
          GLTextureArray3Float = _require19.GLTextureArray3Float;

      var _require20 = require('./texture/array-3-float-2d'),
          GLTextureArray3Float2D = _require20.GLTextureArray3Float2D;

      var _require21 = require('./texture/array-3-float-3d'),
          GLTextureArray3Float3D = _require21.GLTextureArray3Float3D;

      var _require22 = require('./texture/array-4-float'),
          GLTextureArray4Float = _require22.GLTextureArray4Float;

      var _require23 = require('./texture/array-4-float-2d'),
          GLTextureArray4Float2D = _require23.GLTextureArray4Float2D;

      var _require24 = require('./texture/array-4-float-3d'),
          GLTextureArray4Float3D = _require24.GLTextureArray4Float3D;

      var _require25 = require('./texture/float'),
          GLTextureFloat = _require25.GLTextureFloat;

      var _require26 = require('./texture/float-2d'),
          GLTextureFloat2D = _require26.GLTextureFloat2D;

      var _require27 = require('./texture/float-3d'),
          GLTextureFloat3D = _require27.GLTextureFloat3D;

      var _require28 = require('./texture/memory-optimized'),
          GLTextureMemoryOptimized = _require28.GLTextureMemoryOptimized;

      var _require29 = require('./texture/memory-optimized-2d'),
          GLTextureMemoryOptimized2D = _require29.GLTextureMemoryOptimized2D;

      var _require30 = require('./texture/memory-optimized-3d'),
          GLTextureMemoryOptimized3D = _require30.GLTextureMemoryOptimized3D;

      var _require31 = require('./texture/unsigned'),
          GLTextureUnsigned = _require31.GLTextureUnsigned;

      var _require32 = require('./texture/unsigned-2d'),
          GLTextureUnsigned2D = _require32.GLTextureUnsigned2D;

      var _require33 = require('./texture/unsigned-3d'),
          GLTextureUnsigned3D = _require33.GLTextureUnsigned3D;

      var _require34 = require('./texture/graphical'),
          GLTextureGraphical = _require34.GLTextureGraphical;

      var GLKernel = /*#__PURE__*/function (_Kernel2) {
        "use strict";

        _inherits(GLKernel, _Kernel2);

        var _super3 = _createSuper(GLKernel);

        function GLKernel(source, settings) {
          var _this5;

          _classCallCheck(this, GLKernel);

          _this5 = _super3.call(this, source, settings);
          _this5.transferValues = null;
          _this5.formatValues = null;
          _this5.TextureConstructor = null;
          _this5.renderOutput = null;
          _this5.renderRawOutput = null;
          _this5.texSize = null;
          _this5.translatedSource = null;
          _this5.compiledFragmentShader = null;
          _this5.compiledVertexShader = null;
          _this5.switchingKernels = null;
          _this5._textureSwitched = null;
          _this5._mappedTextureSwitched = null;
          return _this5;
        }

        _createClass(GLKernel, [{
          key: "setFixIntegerDivisionAccuracy",
          value: function setFixIntegerDivisionAccuracy(fix) {
            this.fixIntegerDivisionAccuracy = fix;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setFloatTextures",
          value: function setFloatTextures(flag) {
            utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');
            this.floatTextures = flag;
            return this;
          }
        }, {
          key: "checkTextureSize",
          value: function checkTextureSize() {
            var features = this.constructor.features;

            if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {
              throw new Error("Texture size [".concat(this.texSize[0], ",").concat(this.texSize[1], "] generated by kernel is larger than supported size [").concat(features.maxTextureSize, ",").concat(features.maxTextureSize, "]"));
            }
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            throw new Error("\"translateSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "pickRenderStrategy",
          value: function pickRenderStrategy(args) {
            if (this.graphical) {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;

              this.transferValues = function (pixels) {
                return pixels;
              };

              this.TextureConstructor = GLTextureGraphical;
              return null;
            }

            if (this.precision === 'unsigned') {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;
              this.transferValues = this.readPackedPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              } else {
                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToArrays;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    this.renderOutput = this.renderValues;

                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      this.formatValues = utils.erect3DPackedFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      this.formatValues = utils.erect2DPackedFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      this.formatValues = utils.erectPackedFloat;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              }
            } else if (this.precision === 'single') {
              this.renderRawOutput = this.readFloatPixelsToFloat32Array;
              this.transferValues = this.readFloatPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.optimizeFloatMemory) {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureMemoryOptimized;
                          return null;
                        }
                      } else {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureFloat3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureFloat2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureFloat;
                          return null;
                        }
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        return null;
                      }
                    }
                }
              }

              this.renderOutput = this.renderValues;

              if (this.subKernels !== null) {
                this.renderKernels = this.renderKernelsToArrays;
              }

              if (this.optimizeFloatMemory) {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized3D;
                        this.formatValues = utils.erectMemoryOptimized3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized2D;
                        this.formatValues = utils.erectMemoryOptimized2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureMemoryOptimized;
                        this.formatValues = utils.erectMemoryOptimizedFloat;
                        return null;
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                }
              } else {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureFloat3D;
                        this.formatValues = utils.erect3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureFloat2D;
                        this.formatValues = utils.erect2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureFloat;
                        this.formatValues = utils.erectFloat;
                        return null;
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                }
              }
            } else {
              throw new Error("unhandled precision of \"".concat(this.precision, "\""));
            }

            throw new Error("unhandled return type \"".concat(this.returnType, "\""));
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultTexture",
          value: function getMainResultTexture() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Float':
              case 'Integer':
              case 'Number':
                return this.getMainResultNumberTexture();

              case 'Array(2)':
                return this.getMainResultArray2Texture();

              case 'Array(3)':
                return this.getMainResultArray3Texture();

              case 'Array(4)':
                return this.getMainResultArray4Texture();

              default:
                throw new Error("unhandled returnType type ".concat(this.returnType));
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultString",
          value: function getMainResultString() {
            if (this.graphical) {
              return this.getMainResultGraphical();
            } else if (this.precision === 'single') {
              if (this.optimizeFloatMemory) {
                return this.getMainResultMemoryOptimizedFloats();
              }

              return this.getMainResultTexture();
            } else {
              return this.getMainResultPackedPixels();
            }
          }
        }, {
          key: "getMainResultNumberTexture",
          value: function getMainResultNumberTexture() {
            return utils.linesToString(this.getMainResultKernelNumberTexture()) + utils.linesToString(this.getMainResultSubKernelNumberTexture());
          }
        }, {
          key: "getMainResultArray2Texture",
          value: function getMainResultArray2Texture() {
            return utils.linesToString(this.getMainResultKernelArray2Texture()) + utils.linesToString(this.getMainResultSubKernelArray2Texture());
          }
        }, {
          key: "getMainResultArray3Texture",
          value: function getMainResultArray3Texture() {
            return utils.linesToString(this.getMainResultKernelArray3Texture()) + utils.linesToString(this.getMainResultSubKernelArray3Texture());
          }
        }, {
          key: "getMainResultArray4Texture",
          value: function getMainResultArray4Texture() {
            return utils.linesToString(this.getMainResultKernelArray4Texture()) + utils.linesToString(this.getMainResultSubKernelArray4Texture());
          }
        }, {
          key: "getFloatTacticDeclaration",
          value: function getFloatTacticDeclaration() {
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);
            return "precision ".concat(variablePrecision, " float;\n");
          }
        }, {
          key: "getIntTacticDeclaration",
          value: function getIntTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic, true), " int;\n");
          }
        }, {
          key: "getSampler2DTacticDeclaration",
          value: function getSampler2DTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2D;\n");
          }
        }, {
          key: "getSampler2DArrayTacticDeclaration",
          value: function getSampler2DArrayTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2DArray;\n");
          }
        }, {
          key: "renderTexture",
          value: function renderTexture() {
            return this.immutable ? this.texture.clone() : this.texture;
          }
        }, {
          key: "readPackedPixelsToUint8Array",
          value: function readPackedPixelsToUint8Array() {
            if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be "unsigned"');
            var texSize = this.texSize,
                gl = this.context;
            var result = new Uint8Array(texSize[0] * texSize[1] * 4);
            gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "readPackedPixelsToFloat32Array",
          value: function readPackedPixelsToFloat32Array() {
            return new Float32Array(this.readPackedPixelsToUint8Array().buffer);
          }
        }, {
          key: "readFloatPixelsToFloat32Array",
          value: function readFloatPixelsToFloat32Array() {
            if (this.precision !== 'single') throw new Error('Requires this.precision to be "single"');
            var texSize = this.texSize,
                gl = this.context;
            var w = texSize[0];
            var h = texSize[1];
            var result = new Float32Array(w * h * 4);
            gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var gl = this.context,
                output = this.output;

            var _output4 = _slicedToArray(output, 2),
                width = _output4[0],
                height = _output4[1];

            var pixels = new Uint8Array(width * height * 4);
            gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
            return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);
          }
        }, {
          key: "renderKernelsToArrays",
          value: function renderKernelsToArrays() {
            var result = {
              result: this.renderOutput()
            };

            for (var i = 0; i < this.subKernels.length; i++) {
              result[this.subKernels[i].property] = this.mappedTextures[i].toArray();
            }

            return result;
          }
        }, {
          key: "renderKernelsToTextures",
          value: function renderKernelsToTextures() {
            var result = {
              result: this.renderOutput()
            };

            if (this.immutable) {
              for (var i = 0; i < this.subKernels.length; i++) {
                result[this.subKernels[i].property] = this.mappedTextures[i].clone();
              }
            } else {
              for (var _i11 = 0; _i11 < this.subKernels.length; _i11++) {
                result[this.subKernels[_i11].property] = this.mappedTextures[_i11];
              }
            }

            return result;
          }
        }, {
          key: "resetSwitchingKernels",
          value: function resetSwitchingKernels() {
            var existingValue = this.switchingKernels;
            this.switchingKernels = null;
            return existingValue;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            var newOutput = this.toKernelOutput(output);

            if (this.program) {
              if (!this.dynamicOutput) {
                throw new Error('Resizing a kernel with dynamicOutput: false is not possible');
              }

              var newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];
              var newTexSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, newThreadDim);
              var oldTexSize = this.texSize;

              if (oldTexSize) {
                var oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);
                var newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);

                if (oldPrecision !== newPrecision) {
                  if (this.debug) {
                    console.warn('Precision requirement changed, asking GPU instance to recompile');
                  }

                  this.switchKernels({
                    type: 'outputPrecisionMismatch',
                    precision: newPrecision,
                    needed: output
                  });
                  return;
                }
              }

              this.output = newOutput;
              this.threadDim = newThreadDim;
              this.texSize = newTexSize;
              var gl = this.context;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              this.updateMaxTexSize();
              this.framebuffer.width = this.texSize[0];
              this.framebuffer.height = this.texSize[1];
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              this.canvas.width = this.maxTexSize[0];
              this.canvas.height = this.maxTexSize[1];

              if (this.texture) {
                this.texture.delete();
              }

              this.texture = null;

              this._setupOutputTexture();

              if (this.mappedTextures && this.mappedTextures.length > 0) {
                for (var i = 0; i < this.mappedTextures.length; i++) {
                  this.mappedTextures[i].delete();
                }

                this.mappedTextures = null;

                this._setupSubOutputTextures();
              }
            } else {
              this.output = newOutput;
            }

            return this;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            return this.formatValues(this.transferValues(), this.output[0], this.output[1], this.output[2]);
          }
        }, {
          key: "switchKernels",
          value: function switchKernels(reason) {
            if (this.switchingKernels) {
              this.switchingKernels.push(reason);
            } else {
              this.switchingKernels = [reason];
            }
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            var textureSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.texSize;
            var tactic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.tactic;
            var isInt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (!tactic) {
              if (!this.constructor.features.isSpeedTacticSupported) return 'highp';
              var low = this.constructor.features[isInt ? 'lowIntPrecision' : 'lowFloatPrecision'];
              var medium = this.constructor.features[isInt ? 'mediumIntPrecision' : 'mediumFloatPrecision'];
              var high = this.constructor.features[isInt ? 'highIntPrecision' : 'highFloatPrecision'];
              var requiredSize = Math.log2(textureSize[0] * textureSize[1]);

              if (requiredSize <= low.rangeMax) {
                return 'lowp';
              } else if (requiredSize <= medium.rangeMax) {
                return 'mediump';
              } else if (requiredSize <= high.rangeMax) {
                return 'highp';
              } else {
                throw new Error("The required size exceeds that of the ability of your system");
              }
            }

            switch (tactic) {
              case 'speed':
                return 'lowp';

              case 'balanced':
                return 'mediump';

              case 'precision':
                return 'highp';

              default:
                throw new Error("Unknown tactic \"".concat(tactic, "\" use \"speed\", \"balanced\", \"precision\", or empty for auto"));
            }
          }
        }, {
          key: "updateTextureArgumentRefs",
          value: function updateTextureArgumentRefs(kernelValue, arg) {
            if (!this.immutable) return;

            if (this.texture.texture === arg.texture) {
              var prevArg = kernelValue.prevArg;

              if (prevArg) {
                if (prevArg.texture._refs === 1) {
                  this.texture.delete();
                  this.texture = prevArg.clone();
                  this._textureSwitched = true;
                }

                prevArg.delete();
              }

              kernelValue.prevArg = arg.clone();
            } else if (this.mappedTextures && this.mappedTextures.length > 0) {
              var mappedTextures = this.mappedTextures;

              for (var i = 0; i < mappedTextures.length; i++) {
                var mappedTexture = mappedTextures[i];

                if (mappedTexture.texture === arg.texture) {
                  var _prevArg = kernelValue.prevArg;

                  if (_prevArg) {
                    if (_prevArg.texture._refs === 1) {
                      mappedTexture.delete();
                      mappedTextures[i] = _prevArg.clone();
                      this._mappedTextureSwitched[i] = true;
                    }

                    _prevArg.delete();
                  }

                  kernelValue.prevArg = arg.clone();
                  return;
                }
              }
            }
          }
        }, {
          key: "onActivate",
          value: function onActivate(previousKernel) {
            this._textureSwitched = true;
            this.texture = previousKernel.texture;

            if (this.mappedTextures) {
              for (var i = 0; i < this.mappedTextures.length; i++) {
                this._mappedTextureSwitched[i] = true;
              }

              this.mappedTextures = previousKernel.mappedTextures;
            }
          }
        }, {
          key: "initCanvas",
          value: function initCanvas() {}
        }], [{
          key: "mode",
          get: function get() {
            return 'gpu';
          }
        }, {
          key: "getIsFloatRead",
          value: function getIsFloatRead() {
            var kernelString = "function kernelFunction() {\n      return 1;\n    }";
            var kernel = new this(kernelString, {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [1],
              precision: 'single',
              returnType: 'Number',
              tactic: 'speed'
            });
            kernel.build();
            kernel.run();
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 1;
          }
        }, {
          key: "getIsIntegerDivisionAccurate",
          value: function getIsIntegerDivisionAccurate() {
            function kernelFunction(v1, v2) {
              return v1[this.thread.x] / v2[this.thread.x];
            }

            var kernel = new this(kernelFunction.toString(), {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [2],
              returnType: 'Number',
              precision: 'unsigned',
              tactic: 'speed'
            });
            var args = [[6, 6030401], [3, 3991]];
            kernel.build.apply(kernel, args);
            kernel.run.apply(kernel, args);
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 2 && result[1] === 1511;
          }
        }, {
          key: "getIsSpeedTacticSupported",
          value: function getIsSpeedTacticSupported() {
            function kernelFunction(value) {
              return value[this.thread.x];
            }

            var kernel = new this(kernelFunction.toString(), {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [4],
              returnType: 'Number',
              precision: 'unsigned',
              tactic: 'speed'
            });
            var args = [[0, 1, 2, 3]];
            kernel.build.apply(kernel, args);
            kernel.run.apply(kernel, args);
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return Math.round(result[0]) === 0 && Math.round(result[1]) === 1 && Math.round(result[2]) === 2 && Math.round(result[3]) === 3;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            throw new Error("\"testCanvas\" not defined on ".concat(this.name));
          }
        }, {
          key: "testContext",
          get: function get() {
            throw new Error("\"testContext\" not defined on ".concat(this.name));
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            var isDrawBuffers = this.getIsDrawBuffers();
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              isSpeedTacticSupported: this.getIsSpeedTacticSupported(),
              isTextureFloat: this.getIsTextureFloat(),
              isDrawBuffers: isDrawBuffers,
              kernelMap: isDrawBuffers,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            throw new Error("\"setupFeatureChecks\" not defined on ".concat(this.name));
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments(source) {
            var argumentTypes = [];
            var argumentNames = [];
            var states = [];
            var isStartingVariableName = /^[a-zA-Z_]/;
            var isVariableChar = /[a-zA-Z_0-9]/;
            var i = 0;
            var argumentName = null;
            var argumentType = null;

            while (i < source.length) {
              var char = source[i];
              var nextChar = source[i + 1];
              var state = states.length > 0 ? states[states.length - 1] : null;

              if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {
                states.push('MULTI_LINE_COMMENT');
                i += 2;
                continue;
              } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {
                states.pop();
                i += 2;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {
                states.push('COMMENT');
                i += 2;
                continue;
              } else if (state === 'COMMENT' && char === '\n') {
                states.pop();
                i++;
                continue;
              } else if (state === null && char === '(') {
                states.push('FUNCTION_ARGUMENTS');
                i++;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS') {
                if (char === ')') {
                  states.pop();
                  break;
                }

                if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'float';
                  argumentName = '';
                  i += 6;
                  continue;
                } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'int';
                  argumentName = '';
                  i += 4;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec2';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec3';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec4';
                  argumentName = '';
                  i += 5;
                  continue;
                }
              } else if (state === 'DECLARE_VARIABLE') {
                if (argumentName === '') {
                  if (char === ' ') {
                    i++;
                    continue;
                  }

                  if (!isStartingVariableName.test(char)) {
                    throw new Error('variable name is not expected string');
                  }
                }

                argumentName += char;

                if (!isVariableChar.test(nextChar)) {
                  states.pop();
                  argumentNames.push(argumentName);
                  argumentTypes.push(typeMap[argumentType]);
                }
              }

              i++;
            }

            if (states.length > 0) {
              throw new Error('GLSL function was not parsable');
            }

            return {
              argumentNames: argumentNames,
              argumentTypes: argumentTypes
            };
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType(source) {
            return typeMap[source.match(/int|float|vec[2-4]/)[0]];
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel, lastKernel) {
            combinedKernel.apply(null, arguments);
            var _lastKernel$texSize = lastKernel.texSize,
                texSize = _lastKernel$texSize.texSize,
                context = _lastKernel$texSize.context,
                threadDim = _lastKernel$texSize.threadDim;
            var result;

            if (lastKernel.precision === 'single') {
              var w = texSize[0];
              var h = Math.ceil(texSize[1] / 4);
              result = new Float32Array(w * h * 4 * 4);
              context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);
            } else {
              var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
              context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);
              result = new Float32Array(bytes.buffer);
            }

            result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

            if (lastKernel.output.length === 1) {
              return result;
            } else if (lastKernel.output.length === 2) {
              return utils.splitArray(result, lastKernel.output[0]);
            } else if (lastKernel.output.length === 3) {
              var cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
              return cube.map(function (x) {
                return utils.splitArray(x, lastKernel.output[0]);
              });
            }
          }
        }]);

        return GLKernel;
      }(Kernel);

      var typeMap = {
        int: 'Integer',
        float: 'Number',
        vec2: 'Array(2)',
        vec3: 'Array(3)',
        vec4: 'Array(4)'
      };
      module.exports = {
        GLKernel: GLKernel
      };
    }, {
      "../../utils": 114,
      "../kernel": 36,
      "./texture/array-2-float": 16,
      "./texture/array-2-float-2d": 14,
      "./texture/array-2-float-3d": 15,
      "./texture/array-3-float": 19,
      "./texture/array-3-float-2d": 17,
      "./texture/array-3-float-3d": 18,
      "./texture/array-4-float": 22,
      "./texture/array-4-float-2d": 20,
      "./texture/array-4-float-3d": 21,
      "./texture/float": 25,
      "./texture/float-2d": 23,
      "./texture/float-3d": 24,
      "./texture/graphical": 26,
      "./texture/memory-optimized": 30,
      "./texture/memory-optimized-2d": 28,
      "./texture/memory-optimized-3d": 29,
      "./texture/unsigned": 33,
      "./texture/unsigned-2d": 31,
      "./texture/unsigned-3d": 32
    }],
    14: [function (require, module, exports) {
      var _require35 = require('../../../utils'),
          utils = _require35.utils;

      var _require36 = require('./float'),
          GLTextureFloat = _require36.GLTextureFloat;

      var GLTextureArray2Float2D = /*#__PURE__*/function (_GLTextureFloat) {
        "use strict";

        _inherits(GLTextureArray2Float2D, _GLTextureFloat);

        var _super4 = _createSuper(GLTextureArray2Float2D);

        function GLTextureArray2Float2D(settings) {
          var _this6;

          _classCallCheck(this, GLTextureArray2Float2D);

          _this6 = _super4.call(this, settings);
          _this6.type = 'ArrayTexture(2)';
          return _this6;
        }

        _createClass(GLTextureArray2Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float2D: GLTextureArray2Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    15: [function (require, module, exports) {
      var _require37 = require('../../../utils'),
          utils = _require37.utils;

      var _require38 = require('./float'),
          GLTextureFloat = _require38.GLTextureFloat;

      var GLTextureArray2Float3D = /*#__PURE__*/function (_GLTextureFloat2) {
        "use strict";

        _inherits(GLTextureArray2Float3D, _GLTextureFloat2);

        var _super5 = _createSuper(GLTextureArray2Float3D);

        function GLTextureArray2Float3D(settings) {
          var _this7;

          _classCallCheck(this, GLTextureArray2Float3D);

          _this7 = _super5.call(this, settings);
          _this7.type = 'ArrayTexture(2)';
          return _this7;
        }

        _createClass(GLTextureArray2Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray2Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float3D: GLTextureArray2Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    16: [function (require, module, exports) {
      var _require39 = require('../../../utils'),
          utils = _require39.utils;

      var _require40 = require('./float'),
          GLTextureFloat = _require40.GLTextureFloat;

      var GLTextureArray2Float = /*#__PURE__*/function (_GLTextureFloat3) {
        "use strict";

        _inherits(GLTextureArray2Float, _GLTextureFloat3);

        var _super6 = _createSuper(GLTextureArray2Float);

        function GLTextureArray2Float(settings) {
          var _this8;

          _classCallCheck(this, GLTextureArray2Float);

          _this8 = _super6.call(this, settings);
          _this8.type = 'ArrayTexture(2)';
          return _this8;
        }

        _createClass(GLTextureArray2Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float: GLTextureArray2Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    17: [function (require, module, exports) {
      var _require41 = require('../../../utils'),
          utils = _require41.utils;

      var _require42 = require('./float'),
          GLTextureFloat = _require42.GLTextureFloat;

      var GLTextureArray3Float2D = /*#__PURE__*/function (_GLTextureFloat4) {
        "use strict";

        _inherits(GLTextureArray3Float2D, _GLTextureFloat4);

        var _super7 = _createSuper(GLTextureArray3Float2D);

        function GLTextureArray3Float2D(settings) {
          var _this9;

          _classCallCheck(this, GLTextureArray3Float2D);

          _this9 = _super7.call(this, settings);
          _this9.type = 'ArrayTexture(3)';
          return _this9;
        }

        _createClass(GLTextureArray3Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray3Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float2D: GLTextureArray3Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    18: [function (require, module, exports) {
      var _require43 = require('../../../utils'),
          utils = _require43.utils;

      var _require44 = require('./float'),
          GLTextureFloat = _require44.GLTextureFloat;

      var GLTextureArray3Float3D = /*#__PURE__*/function (_GLTextureFloat5) {
        "use strict";

        _inherits(GLTextureArray3Float3D, _GLTextureFloat5);

        var _super8 = _createSuper(GLTextureArray3Float3D);

        function GLTextureArray3Float3D(settings) {
          var _this10;

          _classCallCheck(this, GLTextureArray3Float3D);

          _this10 = _super8.call(this, settings);
          _this10.type = 'ArrayTexture(3)';
          return _this10;
        }

        _createClass(GLTextureArray3Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray3Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float3D: GLTextureArray3Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    19: [function (require, module, exports) {
      var _require45 = require('../../../utils'),
          utils = _require45.utils;

      var _require46 = require('./float'),
          GLTextureFloat = _require46.GLTextureFloat;

      var GLTextureArray3Float = /*#__PURE__*/function (_GLTextureFloat6) {
        "use strict";

        _inherits(GLTextureArray3Float, _GLTextureFloat6);

        var _super9 = _createSuper(GLTextureArray3Float);

        function GLTextureArray3Float(settings) {
          var _this11;

          _classCallCheck(this, GLTextureArray3Float);

          _this11 = _super9.call(this, settings);
          _this11.type = 'ArrayTexture(3)';
          return _this11;
        }

        _createClass(GLTextureArray3Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray3(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray3Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float: GLTextureArray3Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    20: [function (require, module, exports) {
      var _require47 = require('../../../utils'),
          utils = _require47.utils;

      var _require48 = require('./float'),
          GLTextureFloat = _require48.GLTextureFloat;

      var GLTextureArray4Float2D = /*#__PURE__*/function (_GLTextureFloat7) {
        "use strict";

        _inherits(GLTextureArray4Float2D, _GLTextureFloat7);

        var _super10 = _createSuper(GLTextureArray4Float2D);

        function GLTextureArray4Float2D(settings) {
          var _this12;

          _classCallCheck(this, GLTextureArray4Float2D);

          _this12 = _super10.call(this, settings);
          _this12.type = 'ArrayTexture(4)';
          return _this12;
        }

        _createClass(GLTextureArray4Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray4Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float2D: GLTextureArray4Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    21: [function (require, module, exports) {
      var _require49 = require('../../../utils'),
          utils = _require49.utils;

      var _require50 = require('./float'),
          GLTextureFloat = _require50.GLTextureFloat;

      var GLTextureArray4Float3D = /*#__PURE__*/function (_GLTextureFloat8) {
        "use strict";

        _inherits(GLTextureArray4Float3D, _GLTextureFloat8);

        var _super11 = _createSuper(GLTextureArray4Float3D);

        function GLTextureArray4Float3D(settings) {
          var _this13;

          _classCallCheck(this, GLTextureArray4Float3D);

          _this13 = _super11.call(this, settings);
          _this13.type = 'ArrayTexture(4)';
          return _this13;
        }

        _createClass(GLTextureArray4Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray4Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float3D: GLTextureArray4Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    22: [function (require, module, exports) {
      var _require51 = require('../../../utils'),
          utils = _require51.utils;

      var _require52 = require('./float'),
          GLTextureFloat = _require52.GLTextureFloat;

      var GLTextureArray4Float = /*#__PURE__*/function (_GLTextureFloat9) {
        "use strict";

        _inherits(GLTextureArray4Float, _GLTextureFloat9);

        var _super12 = _createSuper(GLTextureArray4Float);

        function GLTextureArray4Float(settings) {
          var _this14;

          _classCallCheck(this, GLTextureArray4Float);

          _this14 = _super12.call(this, settings);
          _this14.type = 'ArrayTexture(4)';
          return _this14;
        }

        _createClass(GLTextureArray4Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray4(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray4Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float: GLTextureArray4Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    23: [function (require, module, exports) {
      var _require53 = require('../../../utils'),
          utils = _require53.utils;

      var _require54 = require('./float'),
          GLTextureFloat = _require54.GLTextureFloat;

      var GLTextureFloat2D = /*#__PURE__*/function (_GLTextureFloat10) {
        "use strict";

        _inherits(GLTextureFloat2D, _GLTextureFloat10);

        var _super13 = _createSuper(GLTextureFloat2D);

        function GLTextureFloat2D(settings) {
          var _this15;

          _classCallCheck(this, GLTextureFloat2D);

          _this15 = _super13.call(this, settings);
          _this15.type = 'ArrayTexture(1)';
          return _this15;
        }

        _createClass(GLTextureFloat2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureFloat2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat2D: GLTextureFloat2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    24: [function (require, module, exports) {
      var _require55 = require('../../../utils'),
          utils = _require55.utils;

      var _require56 = require('./float'),
          GLTextureFloat = _require56.GLTextureFloat;

      var GLTextureFloat3D = /*#__PURE__*/function (_GLTextureFloat11) {
        "use strict";

        _inherits(GLTextureFloat3D, _GLTextureFloat11);

        var _super14 = _createSuper(GLTextureFloat3D);

        function GLTextureFloat3D(settings) {
          var _this16;

          _classCallCheck(this, GLTextureFloat3D);

          _this16 = _super14.call(this, settings);
          _this16.type = 'ArrayTexture(1)';
          return _this16;
        }

        _createClass(GLTextureFloat3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureFloat3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat3D: GLTextureFloat3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    25: [function (require, module, exports) {
      var _require57 = require('../../../utils'),
          utils = _require57.utils;

      var _require58 = require('./index'),
          GLTexture = _require58.GLTexture;

      var GLTextureFloat = /*#__PURE__*/function (_GLTexture) {
        "use strict";

        _inherits(GLTextureFloat, _GLTexture);

        var _super15 = _createSuper(GLTextureFloat);

        function GLTextureFloat(settings) {
          var _this17;

          _classCallCheck(this, GLTextureFloat);

          _this17 = _super15.call(this, settings);
          _this17.type = 'ArrayTexture(1)';
          return _this17;
        }

        _createClass(GLTextureFloat, [{
          key: "textureType",
          get: function get() {
            return this.context.FLOAT;
          }
        }, {
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context;
            var size = this.size;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Float32Array(size[0] * size[1] * 4);
            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return this.renderRawOutput();
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureFloat;
      }(GLTexture);

      module.exports = {
        GLTextureFloat: GLTextureFloat
      };
    }, {
      "../../../utils": 114,
      "./index": 27
    }],
    26: [function (require, module, exports) {
      var _require59 = require('./unsigned'),
          GLTextureUnsigned = _require59.GLTextureUnsigned;

      var GLTextureGraphical = /*#__PURE__*/function (_GLTextureUnsigned) {
        "use strict";

        _inherits(GLTextureGraphical, _GLTextureUnsigned);

        var _super16 = _createSuper(GLTextureGraphical);

        function GLTextureGraphical(settings) {
          var _this18;

          _classCallCheck(this, GLTextureGraphical);

          _this18 = _super16.call(this, settings);
          _this18.type = 'ArrayTexture(4)';
          return _this18;
        }

        _createClass(GLTextureGraphical, [{
          key: "toArray",
          value: function toArray() {
            return this.renderValues();
          }
        }]);

        return GLTextureGraphical;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureGraphical: GLTextureGraphical
      };
    }, {
      "./unsigned": 33
    }],
    27: [function (require, module, exports) {
      var _require60 = require('../../../texture'),
          Texture = _require60.Texture;

      var GLTexture = /*#__PURE__*/function (_Texture) {
        "use strict";

        _inherits(GLTexture, _Texture);

        var _super17 = _createSuper(GLTexture);

        function GLTexture() {
          _classCallCheck(this, GLTexture);

          return _super17.apply(this, arguments);
        }

        _createClass(GLTexture, [{
          key: "textureType",
          get: function get() {
            throw new Error("\"textureType\" not implemented on ".concat(this.name));
          }
        }, {
          key: "clone",
          value: function clone() {
            return new this.constructor(this);
          }
        }, {
          key: "beforeMutate",
          value: function beforeMutate() {
            if (this.texture._refs > 1) {
              this.newTexture();
              return true;
            }

            return false;
          }
        }, {
          key: "cloneTexture",
          value: function cloneTexture() {
            this.texture._refs--;
            var gl = this.context,
                size = this.size,
                texture = this.texture,
                kernel = this.kernel;

            if (kernel.debug) {
              console.warn('cloning internal texture');
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
            selectTexture(gl, texture);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            var target = gl.createTexture();
            selectTexture(gl, target);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);
            target._refs = 1;
            this.texture = target;
          }
        }, {
          key: "newTexture",
          value: function newTexture() {
            this.texture._refs--;
            var gl = this.context;
            var size = this.size;
            var kernel = this.kernel;

            if (kernel.debug) {
              console.warn('new internal texture');
            }

            var target = gl.createTexture();
            selectTexture(gl, target);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
            target._refs = 1;
            this.texture = target;
          }
        }, {
          key: "clear",
          value: function clear() {
            if (this.texture._refs) {
              this.texture._refs--;
              var _gl = this.context;

              var target = this.texture = _gl.createTexture();

              selectTexture(_gl, target);
              var size = this.size;
              target._refs = 1;

              _gl.texImage2D(_gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
            }

            var gl = this.context,
                texture = this.texture;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
            gl.bindTexture(gl.TEXTURE_2D, texture);
            selectTexture(gl, texture);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            gl.clearColor(0, 0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
          }
        }, {
          key: "delete",
          value: function _delete() {
            if (this._deleted) return;
            this._deleted = true;

            if (this.texture._refs) {
              this.texture._refs--;
              if (this.texture._refs) return;
            }

            this.context.deleteTexture(this.texture);
          }
        }, {
          key: "framebuffer",
          value: function framebuffer() {
            if (!this._framebuffer) {
              this._framebuffer = this.kernel.getRawValueFramebuffer(this.size[0], this.size[1]);
            }

            return this._framebuffer;
          }
        }]);

        return GLTexture;
      }(Texture);

      function selectTexture(gl, texture) {
        gl.activeTexture(gl.TEXTURE15);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      }

      module.exports = {
        GLTexture: GLTexture
      };
    }, {
      "../../../texture": 113
    }],
    28: [function (require, module, exports) {
      var _require61 = require('../../../utils'),
          utils = _require61.utils;

      var _require62 = require('./float'),
          GLTextureFloat = _require62.GLTextureFloat;

      var GLTextureMemoryOptimized2D = /*#__PURE__*/function (_GLTextureFloat12) {
        "use strict";

        _inherits(GLTextureMemoryOptimized2D, _GLTextureFloat12);

        var _super18 = _createSuper(GLTextureMemoryOptimized2D);

        function GLTextureMemoryOptimized2D(settings) {
          var _this19;

          _classCallCheck(this, GLTextureMemoryOptimized2D);

          _this19 = _super18.call(this, settings);
          _this19.type = 'MemoryOptimizedNumberTexture';
          return _this19;
        }

        _createClass(GLTextureMemoryOptimized2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureMemoryOptimized2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized2D: GLTextureMemoryOptimized2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    29: [function (require, module, exports) {
      var _require63 = require('../../../utils'),
          utils = _require63.utils;

      var _require64 = require('./float'),
          GLTextureFloat = _require64.GLTextureFloat;

      var GLTextureMemoryOptimized3D = /*#__PURE__*/function (_GLTextureFloat13) {
        "use strict";

        _inherits(GLTextureMemoryOptimized3D, _GLTextureFloat13);

        var _super19 = _createSuper(GLTextureMemoryOptimized3D);

        function GLTextureMemoryOptimized3D(settings) {
          var _this20;

          _classCallCheck(this, GLTextureMemoryOptimized3D);

          _this20 = _super19.call(this, settings);
          _this20.type = 'MemoryOptimizedNumberTexture';
          return _this20;
        }

        _createClass(GLTextureMemoryOptimized3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureMemoryOptimized3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized3D: GLTextureMemoryOptimized3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    30: [function (require, module, exports) {
      var _require65 = require('../../../utils'),
          utils = _require65.utils;

      var _require66 = require('./float'),
          GLTextureFloat = _require66.GLTextureFloat;

      var GLTextureMemoryOptimized = /*#__PURE__*/function (_GLTextureFloat14) {
        "use strict";

        _inherits(GLTextureMemoryOptimized, _GLTextureFloat14);

        var _super20 = _createSuper(GLTextureMemoryOptimized);

        function GLTextureMemoryOptimized(settings) {
          var _this21;

          _classCallCheck(this, GLTextureMemoryOptimized);

          _this21 = _super20.call(this, settings);
          _this21.type = 'MemoryOptimizedNumberTexture';
          return _this21;
        }

        _createClass(GLTextureMemoryOptimized, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureMemoryOptimized;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized: GLTextureMemoryOptimized
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    31: [function (require, module, exports) {
      var _require67 = require('../../../utils'),
          utils = _require67.utils;

      var _require68 = require('./unsigned'),
          GLTextureUnsigned = _require68.GLTextureUnsigned;

      var GLTextureUnsigned2D = /*#__PURE__*/function (_GLTextureUnsigned2) {
        "use strict";

        _inherits(GLTextureUnsigned2D, _GLTextureUnsigned2);

        var _super21 = _createSuper(GLTextureUnsigned2D);

        function GLTextureUnsigned2D(settings) {
          var _this22;

          _classCallCheck(this, GLTextureUnsigned2D);

          _this22 = _super21.call(this, settings);
          _this22.type = 'NumberTexture';
          return _this22;
        }

        _createClass(GLTextureUnsigned2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureUnsigned2D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned2D: GLTextureUnsigned2D
      };
    }, {
      "../../../utils": 114,
      "./unsigned": 33
    }],
    32: [function (require, module, exports) {
      var _require69 = require('../../../utils'),
          utils = _require69.utils;

      var _require70 = require('./unsigned'),
          GLTextureUnsigned = _require70.GLTextureUnsigned;

      var GLTextureUnsigned3D = /*#__PURE__*/function (_GLTextureUnsigned3) {
        "use strict";

        _inherits(GLTextureUnsigned3D, _GLTextureUnsigned3);

        var _super22 = _createSuper(GLTextureUnsigned3D);

        function GLTextureUnsigned3D(settings) {
          var _this23;

          _classCallCheck(this, GLTextureUnsigned3D);

          _this23 = _super22.call(this, settings);
          _this23.type = 'NumberTexture';
          return _this23;
        }

        _createClass(GLTextureUnsigned3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureUnsigned3D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned3D: GLTextureUnsigned3D
      };
    }, {
      "../../../utils": 114,
      "./unsigned": 33
    }],
    33: [function (require, module, exports) {
      var _require71 = require('../../../utils'),
          utils = _require71.utils;

      var _require72 = require('./index'),
          GLTexture = _require72.GLTexture;

      var GLTextureUnsigned = /*#__PURE__*/function (_GLTexture2) {
        "use strict";

        _inherits(GLTextureUnsigned, _GLTexture2);

        var _super23 = _createSuper(GLTextureUnsigned);

        function GLTextureUnsigned(settings) {
          var _this24;

          _classCallCheck(this, GLTextureUnsigned);

          _this24 = _super23.call(this, settings);
          _this24.type = 'NumberTexture';
          return _this24;
        }

        _createClass(GLTextureUnsigned, [{
          key: "textureType",
          get: function get() {
            return this.context.UNSIGNED_BYTE;
          }
        }, {
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context;
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer());
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Uint8Array(this.size[0] * this.size[1] * 4);
            gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return new Float32Array(this.renderRawOutput().buffer);
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectPackedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureUnsigned;
      }(GLTexture);

      module.exports = {
        GLTextureUnsigned: GLTextureUnsigned
      };
    }, {
      "../../../utils": 114,
      "./index": 27
    }],
    34: [function (require, module, exports) {
      var getContext = require('gl');

      var _require73 = require('../web-gl/kernel'),
          WebGLKernel = _require73.WebGLKernel;

      var _require74 = require('../gl/kernel-string'),
          glKernelString = _require74.glKernelString;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var HeadlessGLKernel = /*#__PURE__*/function (_WebGLKernel) {
        "use strict";

        _inherits(HeadlessGLKernel, _WebGLKernel);

        var _super24 = _createSuper(HeadlessGLKernel);

        function HeadlessGLKernel() {
          _classCallCheck(this, HeadlessGLKernel);

          return _super24.apply(this, arguments);
        }

        _createClass(HeadlessGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            return {};
          }
        }, {
          key: "initContext",
          value: function initContext() {
            return getContext(2, 2, {
              preserveDrawingBuffer: true
            });
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              STACKGL_resize_drawingbuffer: this.context.getExtension('STACKGL_resize_drawingbuffer'),
              STACKGL_destroy_context: this.context.getExtension('STACKGL_destroy_context'),
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers')
            };
          }
        }, {
          key: "build",
          value: function build() {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "build", this).apply(this, arguments);

            if (!this.fallbackRequested) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.STACKGL_resize_drawingbuffer = null;
            this.extensions.STACKGL_destroy_context = null;
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = "const gl = context || require('gl')(1, 1);\n";
            var destroyContextString = "    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\n";
            return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "setOutput", this).call(this, output);

            if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }

            return this;
          }
        }], [{
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) return isSupported;
            this.setupFeatureChecks();
            isSupported = testContext !== null;
            return isSupported;
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            testCanvas = null;
            testExtensions = null;
            if (typeof getContext !== 'function') return;

            try {
              testContext = getContext(2, 2, {
                preserveDrawingBuffer: true
              });
              if (!testContext || !testContext.getExtension) return;
              testExtensions = {
                STACKGL_resize_drawingbuffer: testContext.getExtension('STACKGL_resize_drawingbuffer'),
                STACKGL_destroy_context: testContext.getExtension('STACKGL_destroy_context'),
                OES_texture_float: testContext.getExtension('OES_texture_float'),
                OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
                OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
                WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),
                WEBGL_color_buffer_float: testContext.getExtension('WEBGL_color_buffer_float')
              };
              features = this.getFeatures();
            } catch (e) {
              console.warn(e);
            }
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            try {
              return context.getParameter(context.RENDERER) === 'ANGLE';
            } catch (e) {
              return false;
            }
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('STACKGL_destroy_context');

            if (extension && extension.destroy) {
              extension.destroy();
            }
          }
        }]);

        return HeadlessGLKernel;
      }(WebGLKernel);

      module.exports = {
        HeadlessGLKernel: HeadlessGLKernel
      };
    }, {
      "../gl/kernel-string": 12,
      "../web-gl/kernel": 70,
      "gl": 2
    }],
    35: [function (require, module, exports) {
      var KernelValue = /*#__PURE__*/function () {
        "use strict";

        function KernelValue(value, settings) {
          _classCallCheck(this, KernelValue);

          var name = settings.name,
              kernel = settings.kernel,
              context = settings.context,
              checkContext = settings.checkContext,
              onRequestContextHandle = settings.onRequestContextHandle,
              onUpdateValueMismatch = settings.onUpdateValueMismatch,
              origin = settings.origin,
              strictIntegers = settings.strictIntegers,
              type = settings.type,
              tactic = settings.tactic;

          if (!name) {
            throw new Error('name not set');
          }

          if (!type) {
            throw new Error('type not set');
          }

          if (!origin) {
            throw new Error('origin not set');
          }

          if (origin !== 'user' && origin !== 'constants') {
            throw new Error("origin must be \"user\" or \"constants\" value is \"".concat(origin, "\""));
          }

          if (!onRequestContextHandle) {
            throw new Error('onRequestContextHandle is not set');
          }

          this.name = name;
          this.origin = origin;
          this.tactic = tactic;
          this.varName = origin === 'constants' ? "constants.".concat(name) : name;
          this.kernel = kernel;
          this.strictIntegers = strictIntegers;
          this.type = value.type || type;
          this.size = value.size || null;
          this.index = null;
          this.context = context;
          this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;
          this.contextHandle = null;
          this.onRequestContextHandle = onRequestContextHandle;
          this.onUpdateValueMismatch = onUpdateValueMismatch;
          this.forceUploadEachRun = null;
        }

        _createClass(KernelValue, [{
          key: "id",
          get: function get() {
            return "".concat(this.origin, "_").concat(name);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            throw new Error("\"getSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            throw new Error("\"updateValue\" not defined on ".concat(this.constructor.name));
          }
        }]);

        return KernelValue;
      }();

      module.exports = {
        KernelValue: KernelValue
      };
    }, {}],
    36: [function (require, module, exports) {
      var _require75 = require('../utils'),
          utils = _require75.utils;

      var _require76 = require('../input'),
          Input = _require76.Input;

      var Kernel = /*#__PURE__*/function () {
        "use strict";

        function Kernel(source, settings) {
          _classCallCheck(this, Kernel);

          if (typeof source !== 'object') {
            if (typeof source !== 'string') {
              throw new Error('source not a string');
            }

            if (!utils.isFunctionString(source)) {
              throw new Error('source not a function string');
            }
          }

          this.useLegacyEncoder = false;
          this.fallbackRequested = false;
          this.onRequestFallback = null;
          this.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;
          this.argumentTypes = null;
          this.argumentSizes = null;
          this.argumentBitRatios = null;
          this.kernelArguments = null;
          this.kernelConstants = null;
          this.forceUploadKernelConstants = null;
          this.source = source;
          this.output = null;
          this.debug = false;
          this.graphical = false;
          this.loopMaxIterations = 0;
          this.constants = null;
          this.constantTypes = null;
          this.constantBitRatios = null;
          this.dynamicArguments = false;
          this.dynamicOutput = false;
          this.canvas = null;
          this.context = null;
          this.checkContext = null;
          this.gpu = null;
          this.functions = null;
          this.nativeFunctions = null;
          this.injectedNative = null;
          this.subKernels = null;
          this.validate = true;
          this.immutable = false;
          this.pipeline = false;
          this.precision = null;
          this.tactic = null;
          this.plugins = null;
          this.returnType = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.optimizeFloatMemory = null;
          this.strictIntegers = false;
          this.fixIntegerDivisionAccuracy = null;
          this.built = false;
          this.signature = null;
        }

        _createClass(Kernel, [{
          key: "mergeSettings",
          value: function mergeSettings(settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;

              switch (p) {
                case 'output':
                  if (!Array.isArray(settings.output)) {
                    this.setOutput(settings.output);
                    continue;
                  }

                  break;

                case 'functions':
                  this.functions = [];

                  for (var i = 0; i < settings.functions.length; i++) {
                    this.addFunction(settings.functions[i]);
                  }

                  continue;

                case 'graphical':
                  if (settings[p] && !settings.hasOwnProperty('precision')) {
                    this.precision = 'unsigned';
                  }

                  this[p] = settings[p];
                  continue;

                case 'nativeFunctions':
                  if (!settings.nativeFunctions) continue;
                  this.nativeFunctions = [];

                  for (var _i12 = 0; _i12 < settings.nativeFunctions.length; _i12++) {
                    var s = settings.nativeFunctions[_i12];
                    var _name5 = s.name,
                        source = s.source;
                    this.addNativeFunction(_name5, source, s);
                  }

                  continue;
              }

              this[p] = settings[p];
            }

            if (!this.canvas) this.canvas = this.initCanvas();
            if (!this.context) this.context = this.initContext();
            if (!this.plugins) this.plugins = this.initPlugins(settings);
          }
        }, {
          key: "build",
          value: function build() {
            throw new Error("\"build\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "run",
          value: function run() {
            throw new Error("\"run\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initCanvas",
          value: function initCanvas() {
            throw new Error("\"initCanvas\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initContext",
          value: function initContext() {
            throw new Error("\"initContext\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            throw new Error("\"initPlugins\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "addFunction",
          value: function addFunction(source) {
            var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (source.name && source.source && source.argumentTypes && 'returnType' in source) {
              this.functions.push(source);
            } else if ('settings' in source && 'source' in source) {
              this.functions.push(this.functionToIGPUFunction(source.source, source.settings));
            } else if (typeof source === 'string' || typeof source === 'function') {
              this.functions.push(this.functionToIGPUFunction(source, settings));
            } else {
              throw new Error("function not properly defined");
            }

            return this;
          }
        }, {
          key: "addNativeFunction",
          value: function addNativeFunction(name, source) {
            var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var _ref = settings.argumentTypes ? splitArgumentTypes(settings.argumentTypes) : this.constructor.nativeFunctionArguments(source) || {},
                argumentTypes = _ref.argumentTypes,
                argumentNames = _ref.argumentNames;

            this.nativeFunctions.push({
              name: name,
              source: source,
              settings: settings,
              argumentTypes: argumentTypes,
              argumentNames: argumentNames,
              returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)
            });
            return this;
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            this.kernelArguments = [];

            if (!this.argumentTypes) {
              if (!this.argumentTypes) {
                this.argumentTypes = [];

                for (var i = 0; i < args.length; i++) {
                  var argType = utils.getVariableType(args[i], this.strictIntegers);
                  var type = argType === 'Integer' ? 'Number' : argType;
                  this.argumentTypes.push(type);
                  this.kernelArguments.push({
                    type: type
                  });
                }
              }
            } else {
              for (var _i13 = 0; _i13 < this.argumentTypes.length; _i13++) {
                this.kernelArguments.push({
                  type: this.argumentTypes[_i13]
                });
              }
            }

            this.argumentSizes = new Array(args.length);
            this.argumentBitRatios = new Int32Array(args.length);

            for (var _i14 = 0; _i14 < args.length; _i14++) {
              var arg = args[_i14];
              this.argumentSizes[_i14] = arg.constructor === Input ? arg.size : null;
              this.argumentBitRatios[_i14] = this.getBitRatio(arg);
            }

            if (this.argumentNames.length !== args.length) {
              throw new Error("arguments are miss-aligned");
            }
          }
        }, {
          key: "setupConstants",
          value: function setupConstants() {
            this.kernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};

            if (this.constants) {
              for (var _name6 in this.constants) {
                if (needsConstantTypes) {
                  var type = utils.getVariableType(this.constants[_name6], this.strictIntegers);
                  this.constantTypes[_name6] = type;
                  this.kernelConstants.push({
                    name: _name6,
                    type: type
                  });
                } else {
                  this.kernelConstants.push({
                    name: _name6,
                    type: this.constantTypes[_name6]
                  });
                }

                this.constantBitRatios[_name6] = this.getBitRatio(this.constants[_name6]);
              }
            }
          }
        }, {
          key: "setOptimizeFloatMemory",
          value: function setOptimizeFloatMemory(flag) {
            this.optimizeFloatMemory = flag;
            return this;
          }
        }, {
          key: "toKernelOutput",
          value: function toKernelOutput(output) {
            if (output.hasOwnProperty('x')) {
              if (output.hasOwnProperty('y')) {
                if (output.hasOwnProperty('z')) {
                  return [output.x, output.y, output.z];
                } else {
                  return [output.x, output.y];
                }
              } else {
                return [output.x];
              }
            } else {
              return output;
            }
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            this.output = this.toKernelOutput(output);
            return this;
          }
        }, {
          key: "setDebug",
          value: function setDebug(flag) {
            this.debug = flag;
            return this;
          }
        }, {
          key: "setGraphical",
          value: function setGraphical(flag) {
            this.graphical = flag;
            this.precision = 'unsigned';
            return this;
          }
        }, {
          key: "setLoopMaxIterations",
          value: function setLoopMaxIterations(max) {
            this.loopMaxIterations = max;
            return this;
          }
        }, {
          key: "setConstants",
          value: function setConstants(constants) {
            this.constants = constants;
            return this;
          }
        }, {
          key: "setConstantTypes",
          value: function setConstantTypes(constantTypes) {
            this.constantTypes = constantTypes;
            return this;
          }
        }, {
          key: "setFunctions",
          value: function setFunctions(functions) {
            for (var i = 0; i < functions.length; i++) {
              this.addFunction(functions[i]);
            }

            return this;
          }
        }, {
          key: "setNativeFunctions",
          value: function setNativeFunctions(nativeFunctions) {
            for (var i = 0; i < nativeFunctions.length; i++) {
              var settings = nativeFunctions[i];
              var _name7 = settings.name,
                  source = settings.source;
              this.addNativeFunction(_name7, source, settings);
            }

            return this;
          }
        }, {
          key: "setInjectedNative",
          value: function setInjectedNative(injectedNative) {
            this.injectedNative = injectedNative;
            return this;
          }
        }, {
          key: "setPipeline",
          value: function setPipeline(flag) {
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setDimensions",
          value: function setDimensions(flag) {
            utils.warnDeprecated('method', 'setDimensions', 'setOutput');
            this.output = flag;
            return this;
          }
        }, {
          key: "setOutputToTexture",
          value: function setOutputToTexture(flag) {
            utils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setImmutable",
          value: function setImmutable(flag) {
            this.immutable = flag;
            return this;
          }
        }, {
          key: "setCanvas",
          value: function setCanvas(canvas) {
            this.canvas = canvas;
            return this;
          }
        }, {
          key: "setStrictIntegers",
          value: function setStrictIntegers(flag) {
            this.strictIntegers = flag;
            return this;
          }
        }, {
          key: "setDynamicOutput",
          value: function setDynamicOutput(flag) {
            this.dynamicOutput = flag;
            return this;
          }
        }, {
          key: "setHardcodeConstants",
          value: function setHardcodeConstants(flag) {
            utils.warnDeprecated('method', 'setHardcodeConstants');
            this.setDynamicOutput(flag);
            this.setDynamicArguments(flag);
            return this;
          }
        }, {
          key: "setDynamicArguments",
          value: function setDynamicArguments(flag) {
            this.dynamicArguments = flag;
            return this;
          }
        }, {
          key: "setUseLegacyEncoder",
          value: function setUseLegacyEncoder(flag) {
            this.useLegacyEncoder = flag;
            return this;
          }
        }, {
          key: "setWarnVarUsage",
          value: function setWarnVarUsage(flag) {
            utils.warnDeprecated('method', 'setWarnVarUsage');
            return this;
          }
        }, {
          key: "getCanvas",
          value: function getCanvas() {
            utils.warnDeprecated('method', 'getCanvas');
            return this.canvas;
          }
        }, {
          key: "getWebGl",
          value: function getWebGl() {
            utils.warnDeprecated('method', 'getWebGl');
            return this.context;
          }
        }, {
          key: "setContext",
          value: function setContext(context) {
            this.context = context;
            return this;
          }
        }, {
          key: "setArgumentTypes",
          value: function setArgumentTypes(argumentTypes) {
            if (Array.isArray(argumentTypes)) {
              this.argumentTypes = argumentTypes;
            } else {
              this.argumentTypes = [];

              for (var p in argumentTypes) {
                if (!argumentTypes.hasOwnProperty(p)) continue;
                var argumentIndex = this.argumentNames.indexOf(p);
                if (argumentIndex === -1) throw new Error("unable to find argument ".concat(p));
                this.argumentTypes[argumentIndex] = argumentTypes[p];
              }
            }

            return this;
          }
        }, {
          key: "setTactic",
          value: function setTactic(tactic) {
            this.tactic = tactic;
            return this;
          }
        }, {
          key: "requestFallback",
          value: function requestFallback(args) {
            if (!this.onRequestFallback) {
              throw new Error("\"onRequestFallback\" not defined on ".concat(this.constructor.name));
            }

            this.fallbackRequested = true;
            return this.onRequestFallback(args);
          }
        }, {
          key: "validateSettings",
          value: function validateSettings() {
            throw new Error("\"validateSettings\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "addSubKernel",
          value: function addSubKernel(subKernel) {
            if (this.subKernels === null) {
              this.subKernels = [];
            }

            if (!subKernel.source) throw new Error('subKernel missing "source" property');
            if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing "property" property');
            if (!subKernel.name) throw new Error('subKernel missing "name" property');
            this.subKernels.push(subKernel);
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            throw new Error("\"destroy\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (this.precision === 'single') {
              return 4;
            } else if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            throw new Error("\"getPixels\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "checkOutput",
          value: function checkOutput() {
            if (!this.output || !utils.isArray(this.output)) throw new Error('kernel.output not an array');
            if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');

            for (var i = 0; i < this.output.length; i++) {
              if (isNaN(this.output[i]) || this.output[i] < 1) {
                throw new Error("".concat(this.constructor.name, ".output[").concat(i, "] incorrectly defined as `").concat(this.output[i], "`, needs to be numeric, and greater than 0"));
              }
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            throw new Error("\"prependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            throw new Error("\"hasPrependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              settings: {
                output: this.output,
                pipeline: this.pipeline,
                argumentNames: this.argumentNames,
                argumentsTypes: this.argumentTypes,
                constants: this.constants,
                pluginNames: this.plugins ? this.plugins.map(function (plugin) {
                  return plugin.name;
                }) : null,
                returnType: this.returnType
              }
            };
          }
        }, {
          key: "buildSignature",
          value: function buildSignature(args) {
            var Constructor = this.constructor;
            this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));
          }
        }, {
          key: "functionToIGPUFunction",
          value: function functionToIGPUFunction(source) {
            var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');
            var sourceString = typeof source === 'string' ? source : source.toString();
            var argumentTypes = [];

            if (Array.isArray(settings.argumentTypes)) {
              argumentTypes = settings.argumentTypes;
            } else if (typeof settings.argumentTypes === 'object') {
              argumentTypes = utils.getArgumentNamesFromString(sourceString).map(function (name) {
                return settings.argumentTypes[name];
              }) || [];
            } else {
              argumentTypes = settings.argumentTypes || [];
            }

            return {
              name: utils.getFunctionNameFromString(sourceString) || null,
              source: sourceString,
              argumentTypes: argumentTypes,
              returnType: settings.returnType || null
            };
          }
        }, {
          key: "onActivate",
          value: function onActivate(previousKernel) {}
        }], [{
          key: "isSupported",
          get: function get() {
            throw new Error("\"isSupported\" not implemented on ".concat(this.name));
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            throw new Error("\"isContextMatch\" not implemented on ".concat(this.name));
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            throw new Error("\"getFeatures\" not implemented on ".concat(this.name));
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            throw new Error("\"destroyContext\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            throw new Error("\"nativeFunctionArguments\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            throw new Error("\"nativeFunctionReturnType\" called on ".concat(this.name));
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            throw new Error("\"combineKernels\" called on ".concat(this.name));
          }
        }, {
          key: "getArgumentTypes",
          value: function getArgumentTypes(kernel, args) {
            var argumentTypes = new Array(args.length);

            for (var i = 0; i < args.length; i++) {
              var arg = args[i];
              var type = kernel.argumentTypes[i];

              if (arg.type) {
                argumentTypes[i] = arg.type;
              } else {
                switch (type) {
                  case 'Number':
                  case 'Integer':
                  case 'Float':
                  case 'ArrayTexture(1)':
                    argumentTypes[i] = utils.getVariableType(arg);
                    break;

                  default:
                    argumentTypes[i] = type;
                }
              }
            }

            return argumentTypes;
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            throw new Error("\"getSignature\" not implemented on ".concat(this.name));
          }
        }]);

        return Kernel;
      }();

      function splitArgumentTypes(argumentTypesObject) {
        var argumentNames = Object.keys(argumentTypesObject);
        var argumentTypes = [];

        for (var i = 0; i < argumentNames.length; i++) {
          var argumentName = argumentNames[i];
          argumentTypes.push(argumentTypesObject[argumentName]);
        }

        return {
          argumentTypes: argumentTypes,
          argumentNames: argumentNames
        };
      }

      module.exports = {
        Kernel: Kernel
      };
    }, {
      "../input": 110,
      "../utils": 114
    }],
    37: [function (require, module, exports) {
      var fragmentShader = "__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nfloat acosh(float x) {\n  return log(x + sqrt(x * x - 1.0));\n}\n\nfloat sinh(float x) {\n  return (pow(".concat(Math.E, ", x) - pow(").concat(Math.E, ", -x)) / 2.0;\n}\n\nfloat asinh(float x) {\n  return log(x + sqrt(x * x + 1.0));\n}\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat atanh(float x) {\n  x = (x + 1.0) / (x - 1.0);\n  if (x < 0.0) {\n    return 0.5 * log(-x);\n  }\n  return 0.5 * log(x);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat cosh(float x) {\n  return (pow(").concat(Math.E, ", x) + pow(").concat(Math.E, ", -x)) / 2.0; \n}\n\nfloat expm1(float x) {\n  return pow(").concat(Math.E, ", x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat tanh(float x) {\n  float e = exp(2.0 * x);\n  return (e - 1.0) / (e + 1.0);\n}\n\nfloat trunc(float x) {\n  if (x >= 0.0) {\n    return floor(x); \n  } else {\n    return ceil(x);\n  }\n}\n\nvec4 _round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(_round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}");
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    38: [function (require, module, exports) {
      var _require77 = require('../../utils'),
          utils = _require77.utils;

      var _require78 = require('../function-node'),
          FunctionNode = _require78.FunctionNode;

      var WebGLFunctionNode = /*#__PURE__*/function (_FunctionNode2) {
        "use strict";

        _inherits(WebGLFunctionNode, _FunctionNode2);

        var _super25 = _createSuper(WebGLFunctionNode);

        function WebGLFunctionNode(source, settings) {
          var _this25;

          _classCallCheck(this, WebGLFunctionNode);

          _this25 = _super25.call(this, source, settings);

          if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {
            _this25.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;
          }

          return _this25;
        }

        _createClass(WebGLFunctionNode, [{
          key: "astConditionalExpression",
          value: function astConditionalExpression(ast, retArr) {
            if (ast.type !== 'ConditionalExpression') {
              throw this.astErrorOutput('Not a conditional expression', ast);
            }

            var consequentType = this.getType(ast.consequent);
            var alternateType = this.getType(ast.alternate);

            if (consequentType === null && alternateType === null) {
              retArr.push('if (');
              this.astGeneric(ast.test, retArr);
              retArr.push(') {');
              this.astGeneric(ast.consequent, retArr);
              retArr.push(';');
              retArr.push('} else {');
              this.astGeneric(ast.alternate, retArr);
              retArr.push(';');
              retArr.push('}');
              return retArr;
            }

            retArr.push('(');
            this.astGeneric(ast.test, retArr);
            retArr.push('?');
            this.astGeneric(ast.consequent, retArr);
            retArr.push(':');
            this.astGeneric(ast.alternate, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (this.isRootKernel) {
              retArr.push('void');
            } else {
              if (!this.returnType) {
                var lastReturn = this.findLastReturn();

                if (lastReturn) {
                  this.returnType = this.getType(ast.body);

                  if (this.returnType === 'LiteralInteger') {
                    this.returnType = 'Number';
                  }
                }
              }

              var returnType = this.returnType;

              if (!returnType) {
                retArr.push('void');
              } else {
                var type = typeMap[returnType];

                if (!type) {
                  throw new Error("unknown type ".concat(returnType));
                }

                retArr.push(type);
              }
            }

            retArr.push(' ');
            retArr.push(this.name);
            retArr.push('(');

            if (!this.isRootKernel) {
              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                var argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];

                if (!argumentType) {
                  throw this.astErrorOutput("Unknown argument ".concat(argumentName, " type"), ast);
                }

                if (argumentType === 'LiteralInteger') {
                  this.argumentTypes[i] = argumentType = 'Number';
                }

                var _type = typeMap[argumentType];

                if (!_type) {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                var _name8 = utils.sanitizeName(argumentName);

                if (_type === 'sampler2D' || _type === 'sampler2DArray') {
                  retArr.push("".concat(_type, " user_").concat(_name8, ",ivec2 user_").concat(_name8, "Size,ivec3 user_").concat(_name8, "Dim"));
                } else {
                  retArr.push("".concat(_type, " user_").concat(_name8));
                }
              }
            }

            retArr.push(') {\n');

            for (var _i15 = 0; _i15 < ast.body.body.length; ++_i15) {
              this.astGeneric(ast.body.body[_i15], retArr);
              retArr.push('\n');
            }

            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);
            this.pushState('skip-literal-correction');
            var type = this.getType(ast.argument);
            this.popState('skip-literal-correction');
            var result = [];

            if (!this.returnType) {
              if (type === 'LiteralInteger' || type === 'Integer') {
                this.returnType = 'Number';
              } else {
                this.returnType = type;
              }
            }

            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Float':
                switch (type) {
                  case 'Integer':
                    result.push('float(');
                    this.astGeneric(ast.argument, result);
                    result.push(')');
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToFloat(ast.argument, result);

                    if (this.getType(ast) === 'Integer') {
                      result.unshift('float(');
                      result.push(')');
                    }

                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Integer':
                switch (type) {
                  case 'Float':
                  case 'Number':
                    this.castValueToInteger(ast.argument, result);
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToInteger(ast.argument, result);
                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Array(4)':
              case 'Array(3)':
              case 'Array(2)':
              case 'Matrix(2)':
              case 'Matrix(3)':
              case 'Matrix(4)':
              case 'Input':
                this.astGeneric(ast.argument, result);
                break;

              default:
                throw this.astErrorOutput("unhandled return type ".concat(this.returnType), ast);
            }

            if (this.isRootKernel) {
              retArr.push("kernelResult = ".concat(result.join(''), ";"));
              retArr.push('return;');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = ").concat(result.join(''), ";"));
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push("return ".concat(result.join(''), ";"));
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            var key = this.astKey(ast);

            if (Number.isInteger(ast.value)) {
              if (this.isState('casting-to-integer') || this.isState('building-integer')) {
                this.literalTypes[key] = 'Integer';
                retArr.push("".concat(ast.value));
              } else if (this.isState('casting-to-float') || this.isState('building-float')) {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              } else {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              }
            } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {
              this.literalTypes[key] = 'Integer';
              retArr.push(Math.round(ast.value));
            } else {
              this.literalTypes[key] = 'Number';
              retArr.push("".concat(ast.value));
            }

            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            if (this.checkAndUpconvertOperator(ast, retArr)) {
              return retArr;
            }

            if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {
              retArr.push('divWithIntCheck(');
              this.pushState('building-float');

              switch (this.getType(ast.left)) {
                case 'Integer':
                  this.castValueToFloat(ast.left, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.left, retArr);
                  break;

                default:
                  this.astGeneric(ast.left, retArr);
              }

              retArr.push(', ');

              switch (this.getType(ast.right)) {
                case 'Integer':
                  this.castValueToFloat(ast.right, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.right, retArr);
                  break;

                default:
                  this.astGeneric(ast.right, retArr);
              }

              this.popState('building-float');
              retArr.push(')');
              return retArr;
            }

            retArr.push('(');
            var leftType = this.getType(ast.left) || 'Number';
            var rightType = this.getType(ast.right) || 'Number';

            if (!leftType || !rightType) {
              throw this.astErrorOutput("Unhandled binary expression", ast);
            }

            var key = leftType + ' & ' + rightType;

            switch (key) {
              case 'Integer & Integer':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Float':
              case 'Float & Number':
              case 'Float & Float':
              case 'Number & Number':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'LiteralInteger & LiteralInteger':
                if (this.isState('casting-to-integer') || this.isState('building-integer')) {
                  this.pushState('building-integer');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.castLiteralToFloat(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToFloat(ast.right, retArr);
                  this.popState('building-float');
                }

                break;

              case 'Integer & Float':
              case 'Integer & Number':
                if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {
                  if (!Number.isInteger(ast.right.value)) {
                    this.pushState('building-float');
                    this.castValueToFloat(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.astGeneric(ast.right, retArr);
                    this.popState('building-float');
                    break;
                  }
                }

                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.pushState('casting-to-integer');

                if (ast.right.type === 'Literal') {
                  var literalResult = [];
                  this.astGeneric(ast.right, literalResult);
                  var literalType = this.getType(ast.right);

                  if (literalType === 'Integer') {
                    retArr.push(literalResult.join(''));
                  } else {
                    throw this.astErrorOutput("Unhandled binary expression with literal", ast);
                  }
                } else {
                  retArr.push('int(');
                  this.astGeneric(ast.right, retArr);
                  retArr.push(')');
                }

                this.popState('casting-to-integer');
                this.popState('building-integer');
                break;

              case 'Integer & LiteralInteger':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castLiteralToInteger(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'Float & LiteralInteger':
              case 'Number & LiteralInteger':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castLiteralToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'LiteralInteger & Float':
              case 'LiteralInteger & Number':
                if (this.isState('casting-to-integer')) {
                  this.pushState('building-integer');
                  this.castLiteralToInteger(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castValueToInteger(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.pushState('casting-to-float');
                  this.astGeneric(ast.right, retArr);
                  this.popState('casting-to-float');
                  this.popState('building-float');
                }

                break;

              case 'LiteralInteger & Integer':
                this.pushState('building-integer');
                this.castLiteralToInteger(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Boolean & Boolean':
                this.pushState('building-boolean');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-boolean');
                break;

              case 'Float & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              default:
                throw this.astErrorOutput("Unhandled binary expression between ".concat(key), ast);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertOperator",
          value: function checkAndUpconvertOperator(ast, retArr) {
            var bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);

            if (bitwiseResult) {
              return bitwiseResult;
            }

            var upconvertableOperators = {
              '%': this.fixIntegerDivisionAccuracy ? 'integerCorrectionModulo' : 'modulo',
              '**': 'pow'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.left)) {
              case 'Integer':
                this.castValueToFloat(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');

            switch (this.getType(ast.right)) {
              case 'Integer':
                this.castValueToFloat(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseOperators",
          value: function checkAndUpconvertBitwiseOperators(ast, retArr) {
            var upconvertableOperators = {
              '&': 'bitwiseAnd',
              '|': 'bitwiseOr',
              '^': 'bitwiseXOR',
              '<<': 'bitwiseZeroFillLeftShift',
              '>>': 'bitwiseSignedRightShift',
              '>>>': 'bitwiseZeroFillRightShift'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');
            var leftType = this.getType(ast.left);

            switch (leftType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');
            var rightType = this.getType(ast.right);

            switch (rightType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(ast, retArr) {
            var upconvertableOperators = {
              '~': 'bitwiseNot'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.argument)) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.argument, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.argument, retArr);
                break;

              default:
                this.astGeneric(ast.argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "castLiteralToInteger",
          value: function castLiteralToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castLiteralToFloat",
          value: function castLiteralToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "castValueToInteger",
          value: function castValueToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            retArr.push('int(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castValueToFloat",
          value: function castValueToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            retArr.push('float(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);
            var name = utils.sanitizeName(idtNode.name);

            if (idtNode.name === 'Infinity') {
              retArr.push('3.402823466e+38');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(name) > -1) {
                retArr.push("bool(user_".concat(name, ")"));
              } else {
                retArr.push("user_".concat(name));
              }
            } else {
              retArr.push("user_".concat(name));
            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              var declarations = forNode.init.declarations;

              if (declarations.length > 1) {
                isSafe = false;
              }

              this.astGeneric(forNode.init, initArr);

              for (var i = 0; i < declarations.length; i++) {
                if (declarations[i].init && declarations[i].init.type !== 'Literal') {
                  isSafe = false;
                }
              }
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.astGeneric(forNode.test, testArr);
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              var initString = initArr.join('');
              var initNeedsSemiColon = initString[initString.length - 1] !== ';';
              retArr.push("for (".concat(initString).concat(initNeedsSemiColon ? ';' : '').concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), '\n');
              }

              retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            retArr.push('if (!');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') break;\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') break;\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            if (assNode.operator === '%=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('mod(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else if (assNode.operator === '**=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('pow(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else {
              var leftType = this.getType(assNode.left);
              var rightType = this.getType(assNode.right);
              this.astGeneric(assNode.left, retArr);
              retArr.push(assNode.operator);

              if (leftType !== 'Integer' && rightType === 'Integer') {
                retArr.push('float(');
                this.astGeneric(assNode.right, retArr);
                retArr.push(')');
              } else {
                this.astGeneric(assNode.right, retArr);
              }

              return retArr;
            }
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i16 = 0; _i16 < bNode.body.length; _i16++) {
                this.astGeneric(bNode.body[_i16], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            var declarations = varDecNode.declarations;

            if (!declarations || !declarations[0] || !declarations[0].init) {
              throw this.astErrorOutput('Unexpected expression', varDecNode);
            }

            var result = [];
            var lastType = null;
            var declarationSets = [];
            var declarationSet = [];

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var init = declaration.init;
              var info = this.getDeclaration(declaration.id);
              var actualType = this.getType(declaration.init);
              var type = actualType;

              if (type === 'LiteralInteger') {
                if (info.suggestedType === 'Integer') {
                  type = 'Integer';
                } else {
                  type = 'Number';
                }
              }

              var markupType = typeMap[type];

              if (!markupType) {
                throw this.astErrorOutput("Markup type ".concat(type, " not handled"), varDecNode);
              }

              var declarationResult = [];

              if (actualType === 'Integer' && type === 'Integer') {
                info.valueType = 'Number';

                if (i === 0 || lastType === null) {
                  declarationResult.push('float ');
                } else if (type !== lastType) {
                  throw new Error('Unhandled declaration');
                }

                lastType = type;
                declarationResult.push("user_".concat(utils.sanitizeName(declaration.id.name), "="));
                declarationResult.push('float(');
                this.astGeneric(init, declarationResult);
                declarationResult.push(')');
              } else {
                info.valueType = type;

                if (i === 0 || lastType === null) {
                  declarationResult.push("".concat(markupType, " "));
                } else if (type !== lastType) {
                  declarationSets.push(declarationSet.join(','));
                  declarationSet = [];
                  declarationResult.push("".concat(markupType, " "));
                }

                lastType = type;
                declarationResult.push("user_".concat(utils.sanitizeName(declaration.id.name), "="));

                if (actualType === 'Number' && type === 'Integer') {
                  if (init.left && init.left.type === 'Literal') {
                    this.astGeneric(init, declarationResult);
                  } else {
                    declarationResult.push('int(');
                    this.astGeneric(init, declarationResult);
                    declarationResult.push(')');
                  }
                } else if (actualType === 'LiteralInteger' && type === 'Integer') {
                  this.castLiteralToInteger(init, declarationResult);
                } else {
                  this.astGeneric(init, declarationResult);
                }
              }

              declarationSet.push(declarationResult.join(''));
            }

            if (declarationSet.length > 0) {
              declarationSets.push(declarationSet.join(','));
            }

            result.push(declarationSets.join(';'));
            retArr.push(result.join(''));
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            if (ast.type !== 'SwitchStatement') {
              throw this.astErrorOutput('Invalid switch statement', ast);
            }

            var discriminant = ast.discriminant,
                cases = ast.cases;
            var type = this.getType(discriminant);
            var varName = "switchDiscriminant".concat(this.astKey(ast, '_'));

            switch (type) {
              case 'Float':
              case 'Number':
                retArr.push("float ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;

              case 'Integer':
                retArr.push("int ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;
            }

            if (cases.length === 1 && !cases[0].test) {
              this.astGeneric(cases[0].consequent, retArr);
              return retArr;
            }

            var fallingThrough = false;
            var defaultResult = [];
            var movingDefaultToEnd = false;
            var pastFirstIf = false;

            for (var i = 0; i < cases.length; i++) {
              if (!cases[i].test) {
                if (cases.length > i + 1) {
                  movingDefaultToEnd = true;
                  this.astGeneric(cases[i].consequent, defaultResult);
                  continue;
                } else {
                  retArr.push(' else {\n');
                }
              } else {
                if (i === 0 || !pastFirstIf) {
                  pastFirstIf = true;
                  retArr.push("if (".concat(varName, " == "));
                } else {
                  if (fallingThrough) {
                    retArr.push("".concat(varName, " == "));
                    fallingThrough = false;
                  } else {
                    retArr.push(" else if (".concat(varName, " == "));
                  }
                }

                if (type === 'Integer') {
                  var testType = this.getType(cases[i].test);

                  switch (testType) {
                    case 'Number':
                    case 'Float':
                      this.castValueToInteger(cases[i].test, retArr);
                      break;

                    case 'LiteralInteger':
                      this.castLiteralToInteger(cases[i].test, retArr);
                      break;
                  }
                } else if (type === 'Float') {
                  var _testType = this.getType(cases[i].test);

                  switch (_testType) {
                    case 'LiteralInteger':
                      this.castLiteralToFloat(cases[i].test, retArr);
                      break;

                    case 'Integer':
                      this.castValueToFloat(cases[i].test, retArr);
                      break;
                  }
                } else {
                  throw new Error('unhanlded');
                }

                if (!cases[i].consequent || cases[i].consequent.length === 0) {
                  fallingThrough = true;
                  retArr.push(' || ');
                  continue;
                }

                retArr.push(") {\n");
              }

              this.astGeneric(cases[i].consequent, retArr);
              retArr.push('\n}');
            }

            if (movingDefaultToEnd) {
              retArr.push(' else {');
              retArr.push(defaultResult.join(''));
              retArr.push('}');
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres2 = this.getMemberExpressionDetails(mNode),
                property = _this$getMemberExpres2.property,
                name = _this$getMemberExpres2.name,
                signature = _this$getMemberExpres2.signature,
                origin = _this$getMemberExpres2.origin,
                type = _this$getMemberExpres2.type,
                xProperty = _this$getMemberExpres2.xProperty,
                yProperty = _this$getMemberExpres2.yProperty,
                zProperty = _this$getMemberExpres2.zProperty;

            switch (signature) {
              case 'value.thread.value':
              case 'this.thread.value':
                if (name !== 'x' && name !== 'y' && name !== 'z') {
                  throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);
                }

                retArr.push("threadId.".concat(name));
                return retArr;

              case 'this.output.value':
                if (this.dynamicOutput) {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.x)');
                      } else {
                        retArr.push('uOutputDim.x');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.y)');
                      } else {
                        retArr.push('uOutputDim.y');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.z)');
                      } else {
                        retArr.push('uOutputDim.z');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                } else {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[0]);
                      } else {
                        retArr.push(this.output[0], '.0');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[1]);
                      } else {
                        retArr.push(this.output[1], '.0');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[2]);
                      } else {
                        retArr.push(this.output[2], '.0');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value[][][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                var cleanName = utils.sanitizeName(name);

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(cleanName, ".r"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(cleanName, ".g"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(cleanName, ".b"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(cleanName, ".a"));
                    return retArr;
                }

                break;

              case 'this.constants.value':
                if (typeof xProperty === 'undefined') {
                  switch (type) {
                    case 'Array(2)':
                    case 'Array(3)':
                    case 'Array(4)':
                      retArr.push("constants_".concat(utils.sanitizeName(name)));
                      return retArr;
                  }
                }

              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
              case 'this.constants.value[][][][]':
                break;

              case 'fn()[]':
                this.astCallExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              case 'fn()[][]':
                this.astCallExpression(mNode.object.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(mNode.object.property));
                retArr.push(']');
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(mNode.property));
                retArr.push(']');
                return retArr;

              case '[][]':
                this.astArrayExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (mNode.computed === false) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(utils.sanitizeName(name)));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(utils.sanitizeName(name));

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(xProperty));
                retArr.push(']');
                break;

              case 'HTMLImageArray':
                retArr.push("getImage3D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(1)':
                retArr.push("getFloatFromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(2)':
              case 'Array2D(2)':
              case 'Array3D(2)':
                retArr.push("getMemoryOptimizedVec2(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(2)':
                retArr.push("getVec2FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(3)':
              case 'Array2D(3)':
              case 'Array3D(3)':
                retArr.push("getMemoryOptimizedVec3(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(3)':
                retArr.push("getVec3FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(4)':
              case 'Array2D(4)':
              case 'Array3D(4)':
                retArr.push("getMemoryOptimizedVec4(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(4)':
              case 'HTMLCanvas':
              case 'HTMLImage':
              case 'HTMLVideo':
                retArr.push("getVec4FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'NumberTexture':
              case 'Array':
              case 'Array2D':
              case 'Array3D':
              case 'Array4D':
              case 'Input':
              case 'Number':
              case 'Float':
              case 'Integer':
                if (this.precision === 'single') {
                  retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                } else {
                  var bitRatio = origin === 'user' ? this.lookupFunctionArgumentBitRatio(this.name, name) : this.constantBitRatios[name];

                  switch (bitRatio) {
                    case 1:
                      retArr.push("get8(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 2:
                      retArr.push("get16(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 4:
                    case 0:
                      retArr.push("get32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    default:
                      throw new Error("unhandled bit ratio of ".concat(bitRatio));
                  }

                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                }

                break;

              case 'MemoryOptimizedNumberTexture':
                retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Matrix(2)':
              case 'Matrix(3)':
              case 'Matrix(4)':
                retArr.push("".concat(markupName, "[").concat(this.memberExpressionPropertyMarkup(yProperty), "]"));

                if (yProperty) {
                  retArr.push("[".concat(this.memberExpressionPropertyMarkup(xProperty), "]"));
                }

                break;

              default:
                throw new Error("unhandled member expression \"".concat(type, "\""));
            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (!ast.callee) {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = null;
            var isMathFunction = this.isAstMathFunction(ast);

            if (isMathFunction || ast.callee.object && ast.callee.object.type === 'ThisExpression') {
              functionName = ast.callee.property.name;
            } else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {
              functionName = ast.callee.expressions[1].property.name;
            } else {
              functionName = ast.callee.name;
            }

            if (!functionName) {
              throw this.astErrorOutput("Unhandled function, couldn't find name", ast);
            }

            switch (functionName) {
              case 'pow':
                functionName = '_pow';
                break;

              case 'round':
                functionName = '_round';
                break;
            }

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            if (functionName === 'random' && this.plugins && this.plugins.length > 0) {
              for (var i = 0; i < this.plugins.length; i++) {
                var plugin = this.plugins[i];

                if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {
                  retArr.push(plugin.functionReplace);
                  return retArr;
                }
              }
            }

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');

            if (isMathFunction) {
              for (var _i17 = 0; _i17 < ast.arguments.length; ++_i17) {
                var argument = ast.arguments[_i17];
                var argumentType = this.getType(argument);

                if (_i17 > 0) {
                  retArr.push(', ');
                }

                switch (argumentType) {
                  case 'Integer':
                    this.castValueToFloat(argument, retArr);
                    break;

                  default:
                    this.astGeneric(argument, retArr);
                    break;
                }
              }
            } else {
              var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

              for (var _i18 = 0; _i18 < ast.arguments.length; ++_i18) {
                var _argument = ast.arguments[_i18];
                var targetType = targetTypes[_i18];

                if (_i18 > 0) {
                  retArr.push(', ');
                }

                var _argumentType = this.getType(_argument);

                if (!targetType) {
                  this.triggerImplyArgumentType(functionName, _i18, _argumentType, this);
                  targetType = _argumentType;
                }

                switch (_argumentType) {
                  case 'Boolean':
                    this.astGeneric(_argument, retArr);
                    continue;

                  case 'Number':
                  case 'Float':
                    if (targetType === 'Integer') {
                      retArr.push('int(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Integer':
                    if (targetType === 'Number' || targetType === 'Float') {
                      retArr.push('float(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Integer') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'LiteralInteger':
                    if (targetType === 'Integer') {
                      this.castLiteralToInteger(_argument, retArr);
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    if (targetType === _argumentType) {
                      if (_argument.type === 'Identifier') {
                        retArr.push("user_".concat(utils.sanitizeName(_argument.name)));
                      } else if (_argument.type === 'ArrayExpression' || _argument.type === 'MemberExpression' || _argument.type === 'CallExpression') {
                        this.astGeneric(_argument, retArr);
                      } else {
                        throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      }

                      continue;
                    }

                    break;

                  case 'HTMLCanvas':
                  case 'HTMLImage':
                  case 'HTMLImageArray':
                  case 'HTMLVideo':
                  case 'ArrayTexture(1)':
                  case 'ArrayTexture(2)':
                  case 'ArrayTexture(3)':
                  case 'ArrayTexture(4)':
                  case 'Array':
                  case 'Input':
                    if (targetType === _argumentType) {
                      if (_argument.type !== 'Identifier') throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      this.triggerImplyArgumentBitRatio(this.name, _argument.name, functionName, _i18);

                      var _name9 = utils.sanitizeName(_argument.name);

                      retArr.push("user_".concat(_name9, ",user_").concat(_name9, "Size,user_").concat(_name9, "Dim"));
                      continue;
                    }

                    break;
                }

                throw this.astErrorOutput("Unhandled argument combination of ".concat(_argumentType, " and ").concat(targetType, " for argument named \"").concat(_argument.name, "\""), ast);
              }
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var returnType = this.getType(arrNode);
            var arrLen = arrNode.elements.length;

            switch (returnType) {
              case 'Matrix(2)':
              case 'Matrix(3)':
              case 'Matrix(4)':
                retArr.push("mat".concat(arrLen, "("));
                break;

              default:
                retArr.push("vec".concat(arrLen, "("));
            }

            for (var i = 0; i < arrLen; ++i) {
              if (i > 0) {
                retArr.push(', ');
              }

              var subNode = arrNode.elements[i];
              this.astGeneric(subNode, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "memberExpressionXYZ",
          value: function memberExpressionXYZ(x, y, z, retArr) {
            if (z) {
              retArr.push(this.memberExpressionPropertyMarkup(z), ', ');
            } else {
              retArr.push('0, ');
            }

            if (y) {
              retArr.push(this.memberExpressionPropertyMarkup(y), ', ');
            } else {
              retArr.push('0, ');
            }

            retArr.push(this.memberExpressionPropertyMarkup(x));
            return retArr;
          }
        }, {
          key: "memberExpressionPropertyMarkup",
          value: function memberExpressionPropertyMarkup(property) {
            if (!property) {
              throw new Error('Property not set');
            }

            var type = this.getType(property);
            var result = [];

            switch (type) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(property, result);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(property, result);
                break;

              default:
                this.astGeneric(property, result);
            }

            return result.join('');
          }
        }]);

        return WebGLFunctionNode;
      }(FunctionNode);

      var typeMap = {
        'Array': 'sampler2D',
        'Array(2)': 'vec2',
        'Array(3)': 'vec3',
        'Array(4)': 'vec4',
        'Matrix(2)': 'mat2',
        'Matrix(3)': 'mat3',
        'Matrix(4)': 'mat4',
        'Array2D': 'sampler2D',
        'Array3D': 'sampler2D',
        'Boolean': 'bool',
        'Float': 'float',
        'Input': 'sampler2D',
        'Integer': 'int',
        'Number': 'float',
        'LiteralInteger': 'float',
        'NumberTexture': 'sampler2D',
        'MemoryOptimizedNumberTexture': 'sampler2D',
        'ArrayTexture(1)': 'sampler2D',
        'ArrayTexture(2)': 'sampler2D',
        'ArrayTexture(3)': 'sampler2D',
        'ArrayTexture(4)': 'sampler2D',
        'HTMLVideo': 'sampler2D',
        'HTMLCanvas': 'sampler2D',
        'HTMLImage': 'sampler2D',
        'HTMLImageArray': 'sampler2DArray'
      };
      var operatorMap = {
        '===': '==',
        '!==': '!='
      };
      module.exports = {
        WebGLFunctionNode: WebGLFunctionNode
      };
    }, {
      "../../utils": 114,
      "../function-node": 10
    }],
    39: [function (require, module, exports) {
      var _require79 = require('./kernel-value/boolean'),
          WebGLKernelValueBoolean = _require79.WebGLKernelValueBoolean;

      var _require80 = require('./kernel-value/float'),
          WebGLKernelValueFloat = _require80.WebGLKernelValueFloat;

      var _require81 = require('./kernel-value/integer'),
          WebGLKernelValueInteger = _require81.WebGLKernelValueInteger;

      var _require82 = require('./kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require82.WebGLKernelValueHTMLImage;

      var _require83 = require('./kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require83.WebGLKernelValueDynamicHTMLImage;

      var _require84 = require('./kernel-value/html-video'),
          WebGLKernelValueHTMLVideo = _require84.WebGLKernelValueHTMLVideo;

      var _require85 = require('./kernel-value/dynamic-html-video'),
          WebGLKernelValueDynamicHTMLVideo = _require85.WebGLKernelValueDynamicHTMLVideo;

      var _require86 = require('./kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require86.WebGLKernelValueSingleInput;

      var _require87 = require('./kernel-value/dynamic-single-input'),
          WebGLKernelValueDynamicSingleInput = _require87.WebGLKernelValueDynamicSingleInput;

      var _require88 = require('./kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require88.WebGLKernelValueUnsignedInput;

      var _require89 = require('./kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require89.WebGLKernelValueDynamicUnsignedInput;

      var _require90 = require('./kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require90.WebGLKernelValueMemoryOptimizedNumberTexture;

      var _require91 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require91.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var _require92 = require('./kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require92.WebGLKernelValueNumberTexture;

      var _require93 = require('./kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require93.WebGLKernelValueDynamicNumberTexture;

      var _require94 = require('./kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require94.WebGLKernelValueSingleArray;

      var _require95 = require('./kernel-value/dynamic-single-array'),
          WebGLKernelValueDynamicSingleArray = _require95.WebGLKernelValueDynamicSingleArray;

      var _require96 = require('./kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require96.WebGLKernelValueSingleArray1DI;

      var _require97 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGLKernelValueDynamicSingleArray1DI = _require97.WebGLKernelValueDynamicSingleArray1DI;

      var _require98 = require('./kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require98.WebGLKernelValueSingleArray2DI;

      var _require99 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGLKernelValueDynamicSingleArray2DI = _require99.WebGLKernelValueDynamicSingleArray2DI;

      var _require100 = require('./kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require100.WebGLKernelValueSingleArray3DI;

      var _require101 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGLKernelValueDynamicSingleArray3DI = _require101.WebGLKernelValueDynamicSingleArray3DI;

      var _require102 = require('./kernel-value/array2'),
          WebGLKernelValueArray2 = _require102.WebGLKernelValueArray2;

      var _require103 = require('./kernel-value/array3'),
          WebGLKernelValueArray3 = _require103.WebGLKernelValueArray3;

      var _require104 = require('./kernel-value/array4'),
          WebGLKernelValueArray4 = _require104.WebGLKernelValueArray4;

      var _require105 = require('./kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require105.WebGLKernelValueUnsignedArray;

      var _require106 = require('./kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require106.WebGLKernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicUnsignedArray,
            'Array(2)': WebGLKernelValueArray2,
            'Array(3)': WebGLKernelValueArray3,
            'Array(4)': WebGLKernelValueArray4,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueDynamicUnsignedInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueUnsignedArray,
            'Array(2)': WebGLKernelValueArray2,
            'Array(3)': WebGLKernelValueArray3,
            'Array(4)': WebGLKernelValueArray4,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueUnsignedInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueHTMLImage,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicSingleArray,
            'Array(2)': WebGLKernelValueArray2,
            'Array(3)': WebGLKernelValueArray3,
            'Array(4)': WebGLKernelValueArray4,
            'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,
            'Input': WebGLKernelValueDynamicSingleInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueSingleArray,
            'Array(2)': WebGLKernelValueArray2,
            'Array(3)': WebGLKernelValueArray3,
            'Array(4)': WebGLKernelValueArray4,
            'Array1D(2)': WebGLKernelValueSingleArray1DI,
            'Array1D(3)': WebGLKernelValueSingleArray1DI,
            'Array1D(4)': WebGLKernelValueSingleArray1DI,
            'Array2D(2)': WebGLKernelValueSingleArray2DI,
            'Array2D(3)': WebGLKernelValueSingleArray2DI,
            'Array2D(4)': WebGLKernelValueSingleArray2DI,
            'Array3D(2)': WebGLKernelValueSingleArray3DI,
            'Array3D(3)': WebGLKernelValueSingleArray3DI,
            'Array3D(4)': WebGLKernelValueSingleArray3DI,
            'Input': WebGLKernelValueSingleInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueHTMLImage,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        lookupKernelValueType: lookupKernelValueType,
        kernelValueMaps: kernelValueMaps
      };
    }, {
      "./kernel-value/array2": 41,
      "./kernel-value/array3": 42,
      "./kernel-value/array4": 43,
      "./kernel-value/boolean": 44,
      "./kernel-value/dynamic-html-image": 45,
      "./kernel-value/dynamic-html-video": 46,
      "./kernel-value/dynamic-memory-optimized-number-texture": 47,
      "./kernel-value/dynamic-number-texture": 48,
      "./kernel-value/dynamic-single-array": 49,
      "./kernel-value/dynamic-single-array1d-i": 50,
      "./kernel-value/dynamic-single-array2d-i": 51,
      "./kernel-value/dynamic-single-array3d-i": 52,
      "./kernel-value/dynamic-single-input": 53,
      "./kernel-value/dynamic-unsigned-array": 54,
      "./kernel-value/dynamic-unsigned-input": 55,
      "./kernel-value/float": 56,
      "./kernel-value/html-image": 57,
      "./kernel-value/html-video": 58,
      "./kernel-value/integer": 60,
      "./kernel-value/memory-optimized-number-texture": 61,
      "./kernel-value/number-texture": 62,
      "./kernel-value/single-array": 63,
      "./kernel-value/single-array1d-i": 64,
      "./kernel-value/single-array2d-i": 65,
      "./kernel-value/single-array3d-i": 66,
      "./kernel-value/single-input": 67,
      "./kernel-value/unsigned-array": 68,
      "./kernel-value/unsigned-input": 69
    }],
    40: [function (require, module, exports) {
      var _require107 = require('./index'),
          WebGLKernelValue = _require107.WebGLKernelValue;

      var _require108 = require('../../../input'),
          Input = _require108.Input;

      var WebGLKernelArray = /*#__PURE__*/function (_WebGLKernelValue) {
        "use strict";

        _inherits(WebGLKernelArray, _WebGLKernelValue);

        var _super26 = _createSuper(WebGLKernelArray);

        function WebGLKernelArray() {
          _classCallCheck(this, WebGLKernelArray);

          return _super26.apply(this, arguments);
        }

        _createClass(WebGLKernelArray, [{
          key: "checkSize",
          value: function checkSize(width, height) {
            if (!this.kernel.validate) return;
            var maxTextureSize = this.kernel.constructor.features.maxTextureSize;

            if (width > maxTextureSize || height > maxTextureSize) {
              if (width > height) {
                throw new Error("Argument texture width of ".concat(width, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              } else if (width < height) {
                throw new Error("Argument texture height of ".concat(height, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              } else {
                throw new Error("Argument texture height and width of ".concat(height, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              }
            }
          }
        }, {
          key: "setup",
          value: function setup() {
            this.requestTexture();
            this.setupTexture();
            this.defineTexture();
          }
        }, {
          key: "requestTexture",
          value: function requestTexture() {
            this.texture = this.onRequestTexture();
          }
        }, {
          key: "defineTexture",
          value: function defineTexture() {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          }
        }, {
          key: "setupTexture",
          value: function setupTexture() {
            this.contextHandle = this.onRequestContextHandle();
            this.index = this.onRequestIndex();
            this.dimensionsId = this.id + 'Dim';
            this.sizeId = this.id + 'Size';
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.prevArg) {
              this.prevArg.delete();
            }

            this.context.deleteTexture(this.texture);
          }
        }]);

        return WebGLKernelArray;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelArray: WebGLKernelArray
      };
    }, {
      "../../../input": 110,
      "./index": 59
    }],
    41: [function (require, module, exports) {
      var _require109 = require('./index'),
          WebGLKernelValue = _require109.WebGLKernelValue;

      var WebGLKernelValueArray2 = /*#__PURE__*/function (_WebGLKernelValue2) {
        "use strict";

        _inherits(WebGLKernelValueArray2, _WebGLKernelValue2);

        var _super27 = _createSuper(WebGLKernelValueArray2);

        function WebGLKernelValueArray2(value, settings) {
          var _this26;

          _classCallCheck(this, WebGLKernelValueArray2);

          _this26 = _super27.call(this, value, settings);
          _this26.uploadValue = value;
          return _this26;
        }

        _createClass(WebGLKernelValueArray2, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec2 ".concat(this.id, " = vec2(").concat(value[0], ",").concat(value[1], ");\n");
            }

            return "uniform vec2 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform2fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueArray2;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueArray2: WebGLKernelValueArray2
      };
    }, {
      "./index": 59
    }],
    42: [function (require, module, exports) {
      var _require110 = require('./index'),
          WebGLKernelValue = _require110.WebGLKernelValue;

      var WebGLKernelValueArray3 = /*#__PURE__*/function (_WebGLKernelValue3) {
        "use strict";

        _inherits(WebGLKernelValueArray3, _WebGLKernelValue3);

        var _super28 = _createSuper(WebGLKernelValueArray3);

        function WebGLKernelValueArray3(value, settings) {
          var _this27;

          _classCallCheck(this, WebGLKernelValueArray3);

          _this27 = _super28.call(this, value, settings);
          _this27.uploadValue = value;
          return _this27;
        }

        _createClass(WebGLKernelValueArray3, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec3 ".concat(this.id, " = vec3(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ");\n");
            }

            return "uniform vec3 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform3fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueArray3;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueArray3: WebGLKernelValueArray3
      };
    }, {
      "./index": 59
    }],
    43: [function (require, module, exports) {
      var _require111 = require('./index'),
          WebGLKernelValue = _require111.WebGLKernelValue;

      var WebGLKernelValueArray4 = /*#__PURE__*/function (_WebGLKernelValue4) {
        "use strict";

        _inherits(WebGLKernelValueArray4, _WebGLKernelValue4);

        var _super29 = _createSuper(WebGLKernelValueArray4);

        function WebGLKernelValueArray4(value, settings) {
          var _this28;

          _classCallCheck(this, WebGLKernelValueArray4);

          _this28 = _super29.call(this, value, settings);
          _this28.uploadValue = value;
          return _this28;
        }

        _createClass(WebGLKernelValueArray4, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec4 ".concat(this.id, " = vec4(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ",").concat(value[3], ");\n");
            }

            return "uniform vec4 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform4fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueArray4;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueArray4: WebGLKernelValueArray4
      };
    }, {
      "./index": 59
    }],
    44: [function (require, module, exports) {
      var _require112 = require('../../../utils'),
          utils = _require112.utils;

      var _require113 = require('./index'),
          WebGLKernelValue = _require113.WebGLKernelValue;

      var WebGLKernelValueBoolean = /*#__PURE__*/function (_WebGLKernelValue5) {
        "use strict";

        _inherits(WebGLKernelValueBoolean, _WebGLKernelValue5);

        var _super30 = _createSuper(WebGLKernelValueBoolean);

        function WebGLKernelValueBoolean(value, settings) {
          var _this29;

          _classCallCheck(this, WebGLKernelValueBoolean);

          _this29 = _super30.call(this, value, settings);
          _this29.uploadValue = value;
          return _this29;
        }

        _createClass(WebGLKernelValueBoolean, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const bool ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform bool ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueBoolean;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueBoolean: WebGLKernelValueBoolean
      };
    }, {
      "../../../utils": 114,
      "./index": 59
    }],
    45: [function (require, module, exports) {
      var _require114 = require('../../../utils'),
          utils = _require114.utils;

      var _require115 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require115.WebGLKernelValueHTMLImage;

      var WebGLKernelValueDynamicHTMLImage = /*#__PURE__*/function (_WebGLKernelValueHTML) {
        "use strict";

        _inherits(WebGLKernelValueDynamicHTMLImage, _WebGLKernelValueHTML);

        var _super31 = _createSuper(WebGLKernelValueDynamicHTMLImage);

        function WebGLKernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLImage);

          return _super31.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var width = value.width,
                height = value.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, 1];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicHTMLImage.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 114,
      "./html-image": 57
    }],
    46: [function (require, module, exports) {
      var _require116 = require('./dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require116.WebGLKernelValueDynamicHTMLImage;

      var WebGLKernelValueDynamicHTMLVideo = /*#__PURE__*/function (_WebGLKernelValueDyna) {
        "use strict";

        _inherits(WebGLKernelValueDynamicHTMLVideo, _WebGLKernelValueDyna);

        var _super32 = _createSuper(WebGLKernelValueDynamicHTMLVideo);

        function WebGLKernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLVideo);

          return _super32.apply(this, arguments);
        }

        return WebGLKernelValueDynamicHTMLVideo;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLVideo: WebGLKernelValueDynamicHTMLVideo
      };
    }, {
      "./dynamic-html-image": 45
    }],
    47: [function (require, module, exports) {
      var _require117 = require('../../../utils'),
          utils = _require117.utils;

      var _require118 = require('./memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require118.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGLKernelValueDynamicMemoryOptimizedNumberTexture = /*#__PURE__*/function (_WebGLKernelValueMemo) {
        "use strict";

        _inherits(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueMemo);

        var _super33 = _createSuper(WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

        function WebGLKernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

          return _super33.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            this.dimensions = inputTexture.dimensions;
            this.checkSize(inputTexture.size[0], inputTexture.size[1]);
            this.textureSize = inputTexture.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicMemoryOptimizedNumberTexture.prototype), "updateValue", this).call(this, inputTexture);
          }
        }]);

        return WebGLKernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./memory-optimized-number-texture": 61
    }],
    48: [function (require, module, exports) {
      var _require119 = require('../../../utils'),
          utils = _require119.utils;

      var _require120 = require('./number-texture'),
          WebGLKernelValueNumberTexture = _require120.WebGLKernelValueNumberTexture;

      var WebGLKernelValueDynamicNumberTexture = /*#__PURE__*/function (_WebGLKernelValueNumb) {
        "use strict";

        _inherits(WebGLKernelValueDynamicNumberTexture, _WebGLKernelValueNumb);

        var _super34 = _createSuper(WebGLKernelValueDynamicNumberTexture);

        function WebGLKernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicNumberTexture);

          return _super34.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = value.dimensions;
            this.checkSize(value.size[0], value.size[1]);
            this.textureSize = value.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicNumberTexture.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./number-texture": 62
    }],
    49: [function (require, module, exports) {
      var _require121 = require('../../../utils'),
          utils = _require121.utils;

      var _require122 = require('./single-array'),
          WebGLKernelValueSingleArray = _require122.WebGLKernelValueSingleArray;

      var WebGLKernelValueDynamicSingleArray = /*#__PURE__*/function (_WebGLKernelValueSing) {
        "use strict";

        _inherits(WebGLKernelValueDynamicSingleArray, _WebGLKernelValueSing);

        var _super35 = _createSuper(WebGLKernelValueDynamicSingleArray);

        function WebGLKernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray);

          return _super35.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGLKernelValueDynamicSingleArray: WebGLKernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 114,
      "./single-array": 63
    }],
    50: [function (require, module, exports) {
      var _require123 = require('../../../utils'),
          utils = _require123.utils;

      var _require124 = require('./single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require124.WebGLKernelValueSingleArray1DI;

      var WebGLKernelValueDynamicSingleArray1DI = /*#__PURE__*/function (_WebGLKernelValueSing2) {
        "use strict";

        _inherits(WebGLKernelValueDynamicSingleArray1DI, _WebGLKernelValueSing2);

        var _super36 = _createSuper(WebGLKernelValueDynamicSingleArray1DI);

        function WebGLKernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray1DI);

          return _super36.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray1DI: WebGLKernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "./single-array1d-i": 64
    }],
    51: [function (require, module, exports) {
      var _require125 = require('../../../utils'),
          utils = _require125.utils;

      var _require126 = require('./single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require126.WebGLKernelValueSingleArray2DI;

      var WebGLKernelValueDynamicSingleArray2DI = /*#__PURE__*/function (_WebGLKernelValueSing3) {
        "use strict";

        _inherits(WebGLKernelValueDynamicSingleArray2DI, _WebGLKernelValueSing3);

        var _super37 = _createSuper(WebGLKernelValueDynamicSingleArray2DI);

        function WebGLKernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray2DI);

          return _super37.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray2DI: WebGLKernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "./single-array2d-i": 65
    }],
    52: [function (require, module, exports) {
      var _require127 = require('../../../utils'),
          utils = _require127.utils;

      var _require128 = require('./single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require128.WebGLKernelValueSingleArray3DI;

      var WebGLKernelValueDynamicSingleArray3DI = /*#__PURE__*/function (_WebGLKernelValueSing4) {
        "use strict";

        _inherits(WebGLKernelValueDynamicSingleArray3DI, _WebGLKernelValueSing4);

        var _super38 = _createSuper(WebGLKernelValueDynamicSingleArray3DI);

        function WebGLKernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray3DI);

          return _super38.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray3DI: WebGLKernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "./single-array3d-i": 66
    }],
    53: [function (require, module, exports) {
      var _require129 = require('../../../utils'),
          utils = _require129.utils;

      var _require130 = require('./single-input'),
          WebGLKernelValueSingleInput = _require130.WebGLKernelValueSingleInput;

      var WebGLKernelValueDynamicSingleInput = /*#__PURE__*/function (_WebGLKernelValueSing5) {
        "use strict";

        _inherits(WebGLKernelValueDynamicSingleInput, _WebGLKernelValueSing5);

        var _super39 = _createSuper(WebGLKernelValueDynamicSingleInput);

        function WebGLKernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleInput);

          return _super39.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size = _slicedToArray(value.size, 3),
                w = _value$size[0],
                h = _value$size[1],
                d = _value$size[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGLKernelValueDynamicSingleInput: WebGLKernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 114,
      "./single-input": 67
    }],
    54: [function (require, module, exports) {
      var _require131 = require('../../../utils'),
          utils = _require131.utils;

      var _require132 = require('./unsigned-array'),
          WebGLKernelValueUnsignedArray = _require132.WebGLKernelValueUnsignedArray;

      var WebGLKernelValueDynamicUnsignedArray = /*#__PURE__*/function (_WebGLKernelValueUnsi) {
        "use strict";

        _inherits(WebGLKernelValueDynamicUnsignedArray, _WebGLKernelValueUnsi);

        var _super40 = _createSuper(WebGLKernelValueDynamicUnsignedArray);

        function WebGLKernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedArray);

          return _super40.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            var Type = this.getTransferArrayType(value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "./unsigned-array": 68
    }],
    55: [function (require, module, exports) {
      var _require133 = require('../../../utils'),
          utils = _require133.utils;

      var _require134 = require('./unsigned-input'),
          WebGLKernelValueUnsignedInput = _require134.WebGLKernelValueUnsignedInput;

      var WebGLKernelValueDynamicUnsignedInput = /*#__PURE__*/function (_WebGLKernelValueUnsi2) {
        "use strict";

        _inherits(WebGLKernelValueDynamicUnsignedInput, _WebGLKernelValueUnsi2);

        var _super41 = _createSuper(WebGLKernelValueDynamicUnsignedInput);

        function WebGLKernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedInput);

          return _super41.apply(this, arguments);
        }

        _createClass(WebGLKernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size2 = _slicedToArray(value.size, 3),
                w = _value$size2[0],
                h = _value$size2[1],
                d = _value$size2[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            var Type = this.getTransferArrayType(value.value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "./unsigned-input": 69
    }],
    56: [function (require, module, exports) {
      var _require135 = require('../../../utils'),
          utils = _require135.utils;

      var _require136 = require('./index'),
          WebGLKernelValue = _require136.WebGLKernelValue;

      var WebGLKernelValueFloat = /*#__PURE__*/function (_WebGLKernelValue6) {
        "use strict";

        _inherits(WebGLKernelValueFloat, _WebGLKernelValue6);

        var _super42 = _createSuper(WebGLKernelValueFloat);

        function WebGLKernelValueFloat(value, settings) {
          var _this30;

          _classCallCheck(this, WebGLKernelValueFloat);

          _this30 = _super42.call(this, value, settings);
          _this30.uploadValue = value;
          return _this30;
        }

        _createClass(WebGLKernelValueFloat, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              if (Number.isInteger(value)) {
                return "const float ".concat(this.id, " = ").concat(value, ".0;\n");
              }

              return "const float ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform float ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1f(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueFloat;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueFloat: WebGLKernelValueFloat
      };
    }, {
      "../../../utils": 114,
      "./index": 59
    }],
    57: [function (require, module, exports) {
      var _require137 = require('../../../utils'),
          utils = _require137.utils;

      var _require138 = require('./array'),
          WebGLKernelArray = _require138.WebGLKernelArray;

      var WebGLKernelValueHTMLImage = /*#__PURE__*/function (_WebGLKernelArray) {
        "use strict";

        _inherits(WebGLKernelValueHTMLImage, _WebGLKernelArray);

        var _super43 = _createSuper(WebGLKernelValueHTMLImage);

        function WebGLKernelValueHTMLImage(value, settings) {
          var _this31;

          _classCallCheck(this, WebGLKernelValueHTMLImage);

          _this31 = _super43.call(this, value, settings);
          var width = value.width,
              height = value.height;

          _this31.checkSize(width, height);

          _this31.dimensions = [width, height, 1];
          _this31.textureSize = [width, height];
          _this31.uploadValue = value;
          return _this31;
        }

        _createClass(WebGLKernelValueHTMLImage, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputImage) {
            if (inputImage.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputImage.constructor);
              return;
            }

            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueHTMLImage;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    58: [function (require, module, exports) {
      var _require139 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require139.WebGLKernelValueHTMLImage;

      var WebGLKernelValueHTMLVideo = /*#__PURE__*/function (_WebGLKernelValueHTML2) {
        "use strict";

        _inherits(WebGLKernelValueHTMLVideo, _WebGLKernelValueHTML2);

        var _super44 = _createSuper(WebGLKernelValueHTMLVideo);

        function WebGLKernelValueHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueHTMLVideo);

          return _super44.apply(this, arguments);
        }

        return WebGLKernelValueHTMLVideo;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueHTMLVideo: WebGLKernelValueHTMLVideo
      };
    }, {
      "./html-image": 57
    }],
    59: [function (require, module, exports) {
      var _require140 = require('../../../utils'),
          utils = _require140.utils;

      var _require141 = require('../../kernel-value'),
          KernelValue = _require141.KernelValue;

      var WebGLKernelValue = /*#__PURE__*/function (_KernelValue) {
        "use strict";

        _inherits(WebGLKernelValue, _KernelValue);

        var _super45 = _createSuper(WebGLKernelValue);

        function WebGLKernelValue(value, settings) {
          var _this32;

          _classCallCheck(this, WebGLKernelValue);

          _this32 = _super45.call(this, value, settings);
          _this32.dimensionsId = null;
          _this32.sizeId = null;
          _this32.initialValueConstructor = value.constructor;
          _this32.onRequestTexture = settings.onRequestTexture;
          _this32.onRequestIndex = settings.onRequestIndex;
          _this32.uploadValue = null;
          _this32.textureSize = null;
          _this32.bitRatio = null;
          _this32.prevArg = null;
          return _this32;
        }

        _createClass(WebGLKernelValue, [{
          key: "id",
          get: function get() {
            return "".concat(this.origin, "_").concat(utils.sanitizeName(this.name));
          }
        }, {
          key: "setup",
          value: function setup() {}
        }, {
          key: "getTransferArrayType",
          value: function getTransferArrayType(value) {
            if (Array.isArray(value[0])) {
              return this.getTransferArrayType(value[0]);
            }

            switch (value.constructor) {
              case Array:
              case Int32Array:
              case Int16Array:
              case Int8Array:
                return Float32Array;

              case Uint8ClampedArray:
              case Uint8Array:
              case Uint16Array:
              case Uint32Array:
              case Float32Array:
              case Float64Array:
                return value.constructor;
            }

            console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');
            return value.constructor;
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            throw new Error("\"getStringValueHandler\" not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);
          }
        }, {
          key: "destroy",
          value: function destroy() {}
        }]);

        return WebGLKernelValue;
      }(KernelValue);

      module.exports = {
        WebGLKernelValue: WebGLKernelValue
      };
    }, {
      "../../../utils": 114,
      "../../kernel-value": 35
    }],
    60: [function (require, module, exports) {
      var _require142 = require('../../../utils'),
          utils = _require142.utils;

      var _require143 = require('./index'),
          WebGLKernelValue = _require143.WebGLKernelValue;

      var WebGLKernelValueInteger = /*#__PURE__*/function (_WebGLKernelValue7) {
        "use strict";

        _inherits(WebGLKernelValueInteger, _WebGLKernelValue7);

        var _super46 = _createSuper(WebGLKernelValueInteger);

        function WebGLKernelValueInteger(value, settings) {
          var _this33;

          _classCallCheck(this, WebGLKernelValueInteger);

          _this33 = _super46.call(this, value, settings);
          _this33.uploadValue = value;
          return _this33;
        }

        _createClass(WebGLKernelValueInteger, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const int ".concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform int ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueInteger;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueInteger: WebGLKernelValueInteger
      };
    }, {
      "../../../utils": 114,
      "./index": 59
    }],
    61: [function (require, module, exports) {
      var _require144 = require('../../../utils'),
          utils = _require144.utils;

      var _require145 = require('./array'),
          WebGLKernelArray = _require145.WebGLKernelArray;

      var sameError = "Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()";

      var WebGLKernelValueMemoryOptimizedNumberTexture = /*#__PURE__*/function (_WebGLKernelArray2) {
        "use strict";

        _inherits(WebGLKernelValueMemoryOptimizedNumberTexture, _WebGLKernelArray2);

        var _super47 = _createSuper(WebGLKernelValueMemoryOptimizedNumberTexture);

        function WebGLKernelValueMemoryOptimizedNumberTexture(value, settings) {
          var _this34;

          _classCallCheck(this, WebGLKernelValueMemoryOptimizedNumberTexture);

          _this34 = _super47.call(this, value, settings);

          var _value$size3 = _slicedToArray(value.size, 2),
              width = _value$size3[0],
              height = _value$size3[1];

          _this34.checkSize(width, height);

          _this34.dimensions = value.dimensions;
          _this34.textureSize = value.size;
          _this34.uploadValue = value.texture;
          _this34.forceUploadEachRun = true;
          return _this34;
        }

        _createClass(WebGLKernelValueMemoryOptimizedNumberTexture, [{
          key: "setup",
          value: function setup() {
            this.setupTexture();
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var kernel = this.kernel,
                gl = this.context;

            if (kernel.pipeline) {
              if (kernel.immutable) {
                kernel.updateTextureArgumentRefs(this, inputTexture);
              } else {
                if (kernel.texture && kernel.texture.texture === inputTexture.texture) {
                  throw new Error(sameError);
                } else if (kernel.mappedTextures) {
                  var mappedTextures = kernel.mappedTextures;

                  for (var i = 0; i < mappedTextures.length; i++) {
                    if (mappedTextures[i].texture === inputTexture.texture) {
                      throw new Error(sameError);
                    }
                  }
                }
              }
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture,
        sameError: sameError
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    62: [function (require, module, exports) {
      var _require146 = require('../../../utils'),
          utils = _require146.utils;

      var _require147 = require('./array'),
          WebGLKernelArray = _require147.WebGLKernelArray;

      var _require148 = require('./memory-optimized-number-texture'),
          sameError = _require148.sameError;

      var WebGLKernelValueNumberTexture = /*#__PURE__*/function (_WebGLKernelArray3) {
        "use strict";

        _inherits(WebGLKernelValueNumberTexture, _WebGLKernelArray3);

        var _super48 = _createSuper(WebGLKernelValueNumberTexture);

        function WebGLKernelValueNumberTexture(value, settings) {
          var _this35;

          _classCallCheck(this, WebGLKernelValueNumberTexture);

          _this35 = _super48.call(this, value, settings);

          var _value$size4 = _slicedToArray(value.size, 2),
              width = _value$size4[0],
              height = _value$size4[1];

          _this35.checkSize(width, height);

          var textureSize = value.size,
              dimensions = value.dimensions;
          _this35.bitRatio = _this35.getBitRatio(value);
          _this35.dimensions = dimensions;
          _this35.textureSize = textureSize;
          _this35.uploadValue = value.texture;
          _this35.forceUploadEachRun = true;
          return _this35;
        }

        _createClass(WebGLKernelValueNumberTexture, [{
          key: "setup",
          value: function setup() {
            this.setupTexture();
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var kernel = this.kernel,
                gl = this.context;

            if (kernel.pipeline) {
              if (kernel.immutable) {
                kernel.updateTextureArgumentRefs(this, inputTexture);
              } else {
                if (kernel.texture && kernel.texture.texture === inputTexture.texture) {
                  throw new Error(sameError);
                } else if (kernel.mappedTextures) {
                  var mappedTextures = kernel.mappedTextures;

                  for (var i = 0; i < mappedTextures.length; i++) {
                    if (mappedTextures[i].texture === inputTexture.texture) {
                      throw new Error(sameError);
                    }
                  }
                }
              }
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueNumberTexture;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./array": 40,
      "./memory-optimized-number-texture": 61
    }],
    63: [function (require, module, exports) {
      var _require149 = require('../../../utils'),
          utils = _require149.utils;

      var _require150 = require('./array'),
          WebGLKernelArray = _require150.WebGLKernelArray;

      var WebGLKernelValueSingleArray = /*#__PURE__*/function (_WebGLKernelArray4) {
        "use strict";

        _inherits(WebGLKernelValueSingleArray, _WebGLKernelArray4);

        var _super49 = _createSuper(WebGLKernelValueSingleArray);

        function WebGLKernelValueSingleArray(value, settings) {
          var _this36;

          _classCallCheck(this, WebGLKernelValueSingleArray);

          _this36 = _super49.call(this, value, settings);
          _this36.bitRatio = 4;
          _this36.dimensions = utils.getDimensions(value, true);
          _this36.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this36.dimensions, _this36.bitRatio);
          _this36.uploadArrayLength = _this36.textureSize[0] * _this36.textureSize[1] * _this36.bitRatio;

          _this36.checkSize(_this36.textureSize[0], _this36.textureSize[1]);

          _this36.uploadValue = new Float32Array(_this36.uploadArrayLength);
          return _this36;
        }

        _createClass(WebGLKernelValueSingleArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray: WebGLKernelValueSingleArray
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    64: [function (require, module, exports) {
      var _require151 = require('../../../utils'),
          utils = _require151.utils;

      var _require152 = require('./array'),
          WebGLKernelArray = _require152.WebGLKernelArray;

      var WebGLKernelValueSingleArray1DI = /*#__PURE__*/function (_WebGLKernelArray5) {
        "use strict";

        _inherits(WebGLKernelValueSingleArray1DI, _WebGLKernelArray5);

        var _super50 = _createSuper(WebGLKernelValueSingleArray1DI);

        function WebGLKernelValueSingleArray1DI(value, settings) {
          var _this37;

          _classCallCheck(this, WebGLKernelValueSingleArray1DI);

          _this37 = _super50.call(this, value, settings);
          _this37.bitRatio = 4;

          _this37.setShape(value);

          return _this37;
        }

        _createClass(WebGLKernelValueSingleArray1DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten2dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray1DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    65: [function (require, module, exports) {
      var _require153 = require('../../../utils'),
          utils = _require153.utils;

      var _require154 = require('./array'),
          WebGLKernelArray = _require154.WebGLKernelArray;

      var WebGLKernelValueSingleArray2DI = /*#__PURE__*/function (_WebGLKernelArray6) {
        "use strict";

        _inherits(WebGLKernelValueSingleArray2DI, _WebGLKernelArray6);

        var _super51 = _createSuper(WebGLKernelValueSingleArray2DI);

        function WebGLKernelValueSingleArray2DI(value, settings) {
          var _this38;

          _classCallCheck(this, WebGLKernelValueSingleArray2DI);

          _this38 = _super51.call(this, value, settings);
          _this38.bitRatio = 4;

          _this38.setShape(value);

          return _this38;
        }

        _createClass(WebGLKernelValueSingleArray2DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten3dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray2DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    66: [function (require, module, exports) {
      var _require155 = require('../../../utils'),
          utils = _require155.utils;

      var _require156 = require('./array'),
          WebGLKernelArray = _require156.WebGLKernelArray;

      var WebGLKernelValueSingleArray3DI = /*#__PURE__*/function (_WebGLKernelArray7) {
        "use strict";

        _inherits(WebGLKernelValueSingleArray3DI, _WebGLKernelArray7);

        var _super52 = _createSuper(WebGLKernelValueSingleArray3DI);

        function WebGLKernelValueSingleArray3DI(value, settings) {
          var _this39;

          _classCallCheck(this, WebGLKernelValueSingleArray3DI);

          _this39 = _super52.call(this, value, settings);
          _this39.bitRatio = 4;

          _this39.setShape(value);

          return _this39;
        }

        _createClass(WebGLKernelValueSingleArray3DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten4dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray3DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    67: [function (require, module, exports) {
      var _require157 = require('../../../utils'),
          utils = _require157.utils;

      var _require158 = require('./array'),
          WebGLKernelArray = _require158.WebGLKernelArray;

      var WebGLKernelValueSingleInput = /*#__PURE__*/function (_WebGLKernelArray8) {
        "use strict";

        _inherits(WebGLKernelValueSingleInput, _WebGLKernelArray8);

        var _super53 = _createSuper(WebGLKernelValueSingleInput);

        function WebGLKernelValueSingleInput(value, settings) {
          var _this40;

          _classCallCheck(this, WebGLKernelValueSingleInput);

          _this40 = _super53.call(this, value, settings);
          _this40.bitRatio = 4;

          var _value$size5 = _slicedToArray(value.size, 3),
              w = _value$size5[0],
              h = _value$size5[1],
              d = _value$size5[2];

          _this40.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this40.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this40.dimensions, _this40.bitRatio);
          _this40.uploadArrayLength = _this40.textureSize[0] * _this40.textureSize[1] * _this40.bitRatio;

          _this40.checkSize(_this40.textureSize[0], _this40.textureSize[1]);

          _this40.uploadValue = new Float32Array(_this40.uploadArrayLength);
          return _this40;
        }

        _createClass(WebGLKernelValueSingleInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ".value, uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(input.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleInput;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleInput: WebGLKernelValueSingleInput
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    68: [function (require, module, exports) {
      var _require159 = require('../../../utils'),
          utils = _require159.utils;

      var _require160 = require('./array'),
          WebGLKernelArray = _require160.WebGLKernelArray;

      var WebGLKernelValueUnsignedArray = /*#__PURE__*/function (_WebGLKernelArray9) {
        "use strict";

        _inherits(WebGLKernelValueUnsignedArray, _WebGLKernelArray9);

        var _super54 = _createSuper(WebGLKernelValueUnsignedArray);

        function WebGLKernelValueUnsignedArray(value, settings) {
          var _this41;

          _classCallCheck(this, WebGLKernelValueUnsignedArray);

          _this41 = _super54.call(this, value, settings);
          _this41.bitRatio = _this41.getBitRatio(value);
          _this41.dimensions = utils.getDimensions(value, true);
          _this41.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this41.dimensions, _this41.bitRatio);
          _this41.uploadArrayLength = _this41.textureSize[0] * _this41.textureSize[1] * (4 / _this41.bitRatio);

          _this41.checkSize(_this41.textureSize[0], _this41.textureSize[1]);

          _this41.TranserArrayType = _this41.getTransferArrayType(value);
          _this41.preUploadValue = new _this41.TranserArrayType(_this41.uploadArrayLength);
          _this41.uploadValue = new Uint8Array(_this41.preUploadValue.buffer);
          return _this41;
        }

        _createClass(WebGLKernelValueUnsignedArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ", preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    69: [function (require, module, exports) {
      var _require161 = require('../../../utils'),
          utils = _require161.utils;

      var _require162 = require('./array'),
          WebGLKernelArray = _require162.WebGLKernelArray;

      var WebGLKernelValueUnsignedInput = /*#__PURE__*/function (_WebGLKernelArray10) {
        "use strict";

        _inherits(WebGLKernelValueUnsignedInput, _WebGLKernelArray10);

        var _super55 = _createSuper(WebGLKernelValueUnsignedInput);

        function WebGLKernelValueUnsignedInput(value, settings) {
          var _this42;

          _classCallCheck(this, WebGLKernelValueUnsignedInput);

          _this42 = _super55.call(this, value, settings);
          _this42.bitRatio = _this42.getBitRatio(value);

          var _value$size6 = _slicedToArray(value.size, 3),
              w = _value$size6[0],
              h = _value$size6[1],
              d = _value$size6[2];

          _this42.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this42.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this42.dimensions, _this42.bitRatio);
          _this42.uploadArrayLength = _this42.textureSize[0] * _this42.textureSize[1] * (4 / _this42.bitRatio);

          _this42.checkSize(_this42.textureSize[0], _this42.textureSize[1]);

          _this42.TranserArrayType = _this42.getTransferArrayType(value.value);
          _this42.preUploadValue = new _this42.TranserArrayType(_this42.uploadArrayLength);
          _this42.uploadValue = new Uint8Array(_this42.preUploadValue.buffer);
          return _this42;
        }

        _createClass(WebGLKernelValueUnsignedInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ".value, preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedInput;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    70: [function (require, module, exports) {
      var _require163 = require('../gl/kernel'),
          GLKernel = _require163.GLKernel;

      var _require164 = require('../function-builder'),
          FunctionBuilder = _require164.FunctionBuilder;

      var _require165 = require('./function-node'),
          WebGLFunctionNode = _require165.WebGLFunctionNode;

      var _require166 = require('../../utils'),
          utils = _require166.utils;

      var mrud = require('../../plugins/math-random-uniformly-distributed');

      var _require167 = require('./fragment-shader'),
          fragmentShader = _require167.fragmentShader;

      var _require168 = require('./vertex-shader'),
          vertexShader = _require168.vertexShader;

      var _require169 = require('../gl/kernel-string'),
          glKernelString = _require169.glKernelString;

      var _require170 = require('./kernel-value-maps'),
          _lookupKernelValueType = _require170.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;
      var plugins = [mrud];
      var canvases = [];
      var maxTexSizes = {};

      var WebGLKernel = /*#__PURE__*/function (_GLKernel) {
        "use strict";

        _inherits(WebGLKernel, _GLKernel);

        var _super56 = _createSuper(WebGLKernel);

        function WebGLKernel(source, settings) {
          var _this43;

          _classCallCheck(this, WebGLKernel);

          _this43 = _super56.call(this, source, settings);
          _this43.program = null;
          _this43.pipeline = settings.pipeline;
          _this43.endianness = utils.systemEndianness();
          _this43.extensions = {};
          _this43.argumentTextureCount = 0;
          _this43.constantTextureCount = 0;
          _this43.fragShader = null;
          _this43.vertShader = null;
          _this43.drawBuffersMap = null;
          _this43.maxTexSize = null;
          _this43.onRequestSwitchKernel = null;
          _this43.texture = null;
          _this43.mappedTextures = null;

          _this43.mergeSettings(source.settings || settings);

          _this43.threadDim = null;
          _this43.framebuffer = null;
          _this43.buffer = null;
          _this43.textureCache = [];
          _this43.programUniformLocationCache = {};
          _this43.uniform1fCache = {};
          _this43.uniform1iCache = {};
          _this43.uniform2fCache = {};
          _this43.uniform2fvCache = {};
          _this43.uniform2ivCache = {};
          _this43.uniform3fvCache = {};
          _this43.uniform3ivCache = {};
          _this43.uniform4fvCache = {};
          _this43.uniform4ivCache = {};
          return _this43;
        }

        _createClass(WebGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              var canvas = document.createElement('canvas');
              canvas.width = 2;
              canvas.height = 2;
              return canvas;
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            var pluginsToUse = [];
            var source = this.source;

            if (typeof source === 'string') {
              for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];

                if (source.match(plugin.functionMatch)) {
                  pluginsToUse.push(plugin);
                }
              }
            } else if (typeof source === 'object') {
              if (settings.pluginNames) {
                var _loop2 = function _loop2(_i19) {
                  var plugin = plugins[_i19];
                  var usePlugin = settings.pluginNames.some(function (pluginName) {
                    return pluginName === plugin.name;
                  });

                  if (usePlugin) {
                    pluginsToUse.push(plugin);
                  }
                };

                for (var _i19 = 0; _i19 < plugins.length; _i19++) {
                  _loop2(_i19);
                }
              }
            }

            return pluginsToUse;
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),
              WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.optimizeFloatMemory === true && !features.isTextureFloat) {
              throw new Error('Float textures are not supported');
            } else if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Single precision not supported');
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {
              throw new Error('could not instantiate draw buffers extension');
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'precision') {
                this.precision = 'unsigned';
                console.warn('Cannot use graphical mode and single precision at the same time');
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "updateMaxTexSize",
          value: function updateMaxTexSize() {
            var texSize = this.texSize,
                canvas = this.canvas;

            if (this.maxTexSize === null) {
              var canvasIndex = canvases.indexOf(canvas);

              if (canvasIndex === -1) {
                canvasIndex = canvases.length;
                canvases.push(canvas);
                maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
              }

              this.maxTexSize = maxTexSizes[canvasIndex];
            }

            if (this.maxTexSize[0] < texSize[0]) {
              this.maxTexSize[0] = texSize[0];
            }

            if (this.maxTexSize[1] < texSize[1]) {
              this.maxTexSize[1] = texSize[1];
            }
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            var _this44 = this;

            this.kernelArguments = [];
            this.argumentTextureCount = 0;
            var needsArgumentTypes = this.argumentTypes === null;

            if (needsArgumentTypes) {
              this.argumentTypes = [];
            }

            this.argumentSizes = [];
            this.argumentBitRatios = [];

            if (args.length < this.argumentNames.length) {
              throw new Error('not enough arguments for kernel');
            } else if (args.length > this.argumentNames.length) {
              throw new Error('too many arguments for kernel');
            }

            var gl = this.context;
            var textureIndexes = 0;

            var onRequestTexture = function onRequestTexture() {
              return _this44.createTexture();
            };

            var onRequestIndex = function onRequestIndex() {
              return _this44.constantTextureCount + textureIndexes++;
            };

            var onUpdateValueMismatch = function onUpdateValueMismatch(constructor) {
              _this44.switchKernels({
                type: 'argumentMismatch',
                needed: constructor
              });
            };

            var onRequestContextHandle = function onRequestContextHandle() {
              return gl.TEXTURE0 + _this44.constantTextureCount + _this44.argumentTextureCount++;
            };

            for (var index = 0; index < args.length; index++) {
              var _value = args[index];
              var _name10 = this.argumentNames[index];
              var type = void 0;

              if (needsArgumentTypes) {
                type = utils.getVariableType(_value, this.strictIntegers);
                this.argumentTypes.push(type);
              } else {
                type = this.argumentTypes[index];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelArgument = new KernelValue(_value, {
                name: _name10,
                type: type,
                tactic: this.tactic,
                origin: 'user',
                context: gl,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: onRequestTexture,
                onRequestIndex: onRequestIndex,
                onUpdateValueMismatch: onUpdateValueMismatch,
                onRequestContextHandle: onRequestContextHandle
              });
              this.kernelArguments.push(kernelArgument);
              kernelArgument.setup();
              this.argumentSizes.push(kernelArgument.textureSize);
              this.argumentBitRatios[index] = kernelArgument.bitRatio;
            }
          }
        }, {
          key: "createTexture",
          value: function createTexture() {
            var texture = this.context.createTexture();
            this.textureCache.push(texture);
            return texture;
          }
        }, {
          key: "setupConstants",
          value: function setupConstants(args) {
            var _this45 = this;

            var gl = this.context;
            this.kernelConstants = [];
            this.forceUploadKernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};
            var textureIndexes = 0;

            for (var _name11 in this.constants) {
              var _value2 = this.constants[_name11];
              var type = void 0;

              if (needsConstantTypes) {
                type = utils.getVariableType(_value2, this.strictIntegers);
                this.constantTypes[_name11] = type;
              } else {
                type = this.constantTypes[_name11];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, _value2);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelValue = new KernelValue(_value2, {
                name: _name11,
                type: type,
                tactic: this.tactic,
                origin: 'constants',
                context: this.context,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: function onRequestTexture() {
                  return _this45.createTexture();
                },
                onRequestIndex: function onRequestIndex() {
                  return textureIndexes++;
                },
                onRequestContextHandle: function onRequestContextHandle() {
                  return gl.TEXTURE0 + _this45.constantTextureCount++;
                }
              });
              this.constantBitRatios[_name11] = kernelValue.bitRatio;
              this.kernelConstants.push(kernelValue);
              kernelValue.setup();

              if (kernelValue.forceUploadEachRun) {
                this.forceUploadKernelConstants.push(kernelValue);
              }
            }
          }
        }, {
          key: "build",
          value: function build() {
            if (this.built) return;
            this.initExtensions();
            this.validateSettings(arguments);
            this.setupConstants(arguments);
            if (this.fallbackRequested) return;
            this.setupArguments(arguments);
            if (this.fallbackRequested) return;
            this.updateMaxTexSize();
            this.translateSource();
            var failureResult = this.pickRenderStrategy(arguments);

            if (failureResult) {
              return failureResult;
            }

            var texSize = this.texSize,
                gl = this.context,
                canvas = this.canvas;
            gl.enable(gl.SCISSOR_TEST);

            if (this.pipeline && this.precision === 'single') {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            } else {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            }

            var threadDim = this.threadDim = Array.from(this.output);

            while (threadDim.length < 3) {
              threadDim.push(1);
            }

            var compiledVertexShader = this.getVertexShader(arguments);
            var vertShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertShader, compiledVertexShader);
            gl.compileShader(vertShader);
            this.vertShader = vertShader;
            var compiledFragmentShader = this.getFragmentShader(arguments);
            var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragShader, compiledFragmentShader);
            gl.compileShader(fragShader);
            this.fragShader = fragShader;

            if (this.debug) {
              console.log('GLSL Shader Output:');
              console.log(compiledFragmentShader);
            }

            if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));
            }

            if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));
            }

            var program = this.program = gl.createProgram();
            gl.attachShader(program, vertShader);
            gl.attachShader(program, fragShader);
            gl.linkProgram(program);
            this.framebuffer = gl.createFramebuffer();
            this.framebuffer.width = texSize[0];
            this.framebuffer.height = texSize[1];
            this.rawValueFramebuffers = {};
            var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
            var texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);
            var texCoordOffset = vertices.byteLength;
            var buffer = this.buffer;

            if (!buffer) {
              buffer = this.buffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
            } else {
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            }

            gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
            gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);
            var aPosLoc = gl.getAttribLocation(this.program, 'aPos');
            gl.enableVertexAttribArray(aPosLoc);
            gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);
            var aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');
            gl.enableVertexAttribArray(aTexCoordLoc);
            gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            var i = 0;
            gl.useProgram(this.program);

            for (var p in this.constants) {
              this.kernelConstants[i++].updateValue(this.constants[p]);
            }

            this._setupOutputTexture();

            if (this.subKernels !== null && this.subKernels.length > 0) {
              this._mappedTextureSwitched = {};

              this._setupSubOutputTextures();
            }

            this.buildSignature(arguments);
            this.built = true;
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "setupReturnTypes",
          value: function setupReturnTypes(functionBuilder) {
            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }

            if (this.subKernels && this.subKernels.length > 0) {
              for (var i = 0; i < this.subKernels.length; i++) {
                var subKernel = this.subKernels[i];

                if (!subKernel.returnType) {
                  subKernel.returnType = functionBuilder.getSubKernelResultType(i);
                }
              }
            }
          }
        }, {
          key: "run",
          value: function run() {
            var kernelArguments = this.kernelArguments,
                texSize = this.texSize,
                forceUploadKernelConstants = this.forceUploadKernelConstants,
                gl = this.context;
            gl.useProgram(this.program);
            gl.scissor(0, 0, texSize[0], texSize[1]);

            if (this.dynamicOutput) {
              this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));
              this.setUniform2iv('uTexSize', texSize);
            }

            this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);

            for (var i = 0; i < forceUploadKernelConstants.length; i++) {
              var constant = forceUploadKernelConstants[i];
              constant.updateValue(this.constants[constant.name]);
              if (this.switchingKernels) return;
            }

            for (var _i20 = 0; _i20 < kernelArguments.length; _i20++) {
              kernelArguments[_i20].updateValue(arguments[_i20]);

              if (this.switchingKernels) return;
            }

            if (this.plugins) {
              for (var _i21 = 0; _i21 < this.plugins.length; _i21++) {
                var plugin = this.plugins[_i21];

                if (plugin.onBeforeRun) {
                  plugin.onBeforeRun(this);
                }
              }
            }

            if (this.graphical) {
              if (this.pipeline) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

                if (this.immutable) {
                  this._replaceOutputTexture();
                }

                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                return this.immutable ? this.texture.clone() : this.texture;
              }

              gl.bindRenderbuffer(gl.RENDERBUFFER, null);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
              return;
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

            if (this.immutable) {
              this._replaceOutputTexture();
            }

            if (this.subKernels !== null) {
              if (this.immutable) {
                this._replaceSubOutputTextures();
              }

              this.drawBuffers();
            }

            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            return this.context.RGBA;
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "_replaceOutputTexture",
          value: function _replaceOutputTexture() {
            if (this.texture.beforeMutate() || this._textureSwitched) {
              var gl = this.context;
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
              this._textureSwitched = false;
            }
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var gl = this.context;
            var texSize = this.texSize;

            if (this.texture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
              return;
            }

            var texture = this.createTexture();
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            this.texture = new this.TextureConstructor({
              texture: texture,
              size: texSize,
              dimensions: this.threadDim,
              output: this.output,
              context: this.context,
              internalFormat: this.getInternalFormat(),
              textureFormat: this.getTextureFormat(),
              kernel: this
            });
          }
        }, {
          key: "_replaceSubOutputTextures",
          value: function _replaceSubOutputTextures() {
            var gl = this.context;

            for (var i = 0; i < this.mappedTextures.length; i++) {
              var mappedTexture = this.mappedTextures[i];

              if (mappedTexture.beforeMutate() || this._mappedTextureSwitched[i]) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);
                this._mappedTextureSwitched[i] = false;
              }
            }
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var gl = this.context;

            if (this.mappedTextures) {
              for (var i = 0; i < this.subKernels.length; i++) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);
              }

              return;
            }

            var texSize = this.texSize;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.mappedTextures = [];

            for (var _i22 = 0; _i22 < this.subKernels.length; _i22++) {
              var texture = this.createTexture();
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + _i22 + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + _i22);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

              if (this.precision === 'single') {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i22 + 1, gl.TEXTURE_2D, texture, 0);
              this.mappedTextures.push(new this.TextureConstructor({
                texture: texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              }));
            }
          }
        }, {
          key: "setUniform1f",
          value: function setUniform1f(name, value) {
            if (this.uniform1fCache.hasOwnProperty(name)) {
              var cache = this.uniform1fCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1fCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1f(loc, value);
          }
        }, {
          key: "setUniform1i",
          value: function setUniform1i(name, value) {
            if (this.uniform1iCache.hasOwnProperty(name)) {
              var cache = this.uniform1iCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1iCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1i(loc, value);
          }
        }, {
          key: "setUniform2f",
          value: function setUniform2f(name, value1, value2) {
            if (this.uniform2fCache.hasOwnProperty(name)) {
              var cache = this.uniform2fCache[name];

              if (value1 === cache[0] && value2 === cache[1]) {
                return;
              }
            }

            this.uniform2fCache[name] = [value1, value2];
            var loc = this.getUniformLocation(name);
            this.context.uniform2f(loc, value1, value2);
          }
        }, {
          key: "setUniform2fv",
          value: function setUniform2fv(name, value) {
            if (this.uniform2fvCache.hasOwnProperty(name)) {
              var cache = this.uniform2fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2fv(loc, value);
          }
        }, {
          key: "setUniform2iv",
          value: function setUniform2iv(name, value) {
            if (this.uniform2ivCache.hasOwnProperty(name)) {
              var cache = this.uniform2ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2iv(loc, value);
          }
        }, {
          key: "setUniform3fv",
          value: function setUniform3fv(name, value) {
            if (this.uniform3fvCache.hasOwnProperty(name)) {
              var cache = this.uniform3fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3fv(loc, value);
          }
        }, {
          key: "setUniform3iv",
          value: function setUniform3iv(name, value) {
            if (this.uniform3ivCache.hasOwnProperty(name)) {
              var cache = this.uniform3ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3iv(loc, value);
          }
        }, {
          key: "setUniform4fv",
          value: function setUniform4fv(name, value) {
            if (this.uniform4fvCache.hasOwnProperty(name)) {
              var cache = this.uniform4fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4fv(loc, value);
          }
        }, {
          key: "setUniform4iv",
          value: function setUniform4iv(name, value) {
            if (this.uniform4ivCache.hasOwnProperty(name)) {
              var cache = this.uniform4ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4iv(loc, value);
          }
        }, {
          key: "getUniformLocation",
          value: function getUniformLocation(name) {
            if (this.programUniformLocationCache.hasOwnProperty(name)) {
              return this.programUniformLocationCache[name];
            }

            return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);
          }
        }, {
          key: "_getFragShaderArtifactMap",
          value: function _getFragShaderArtifactMap(args) {
            return {
              HEADER: this._getHeaderString(),
              LOOP_MAX: this._getLoopMaxString(),
              PLUGINS: this._getPluginsString(),
              CONSTANTS: this._getConstantsString(),
              DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
              ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
              DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),
              INJECTED_NATIVE: this._getInjectedNative(),
              MAIN_CONSTANTS: this._getMainConstantsString(),
              MAIN_ARGUMENTS: this._getMainArgumentsString(args),
              KERNEL: this.getKernelString(),
              MAIN_RESULT: this.getMainResultString(),
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getVertShaderArtifactMap",
          value: function _getVertShaderArtifactMap(args) {
            return {
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return this.subKernels !== null ? '#extension GL_EXT_draw_buffers : require\n' : '';
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";\n") : ' 1000;\n';
          }
        }, {
          key: "_getPluginsString",
          value: function _getPluginsString() {
            var _this46 = this;

            if (!this.plugins) return '\n';
            return this.plugins.map(function (plugin) {
              return plugin.source && _this46.source.match(plugin.functionMatch) ? plugin.source : '';
            }).join('\n');
          }
        }, {
          key: "_getConstantsString",
          value: function _getConstantsString() {
            var result = [];
            var threadDim = this.threadDim,
                texSize = this.texSize;

            if (this.dynamicOutput) {
              result.push('uniform ivec3 uOutputDim', 'uniform ivec2 uTexSize');
            } else {
              result.push("ivec3 uOutputDim = ivec3(".concat(threadDim[0], ", ").concat(threadDim[1], ", ").concat(threadDim[2], ")"), "ivec2 uTexSize = ivec2(".concat(texSize[0], ", ").concat(texSize[1], ")"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;

            if (subKernels === null || subKernels.length < 1) {
              return 'varying vec2 vTexCoord;\n';
            } else {
              return 'out vec2 vTexCoord;\n';
            }
          }
        }, {
          key: "_getDecode32EndiannessString",
          value: function _getDecode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getEncode32EndiannessString",
          value: function _getEncode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getDivideWithIntegerCheckString",
          value: function _getDivideWithIntegerCheckString() {
            return this.fixIntegerDivisionAccuracy ? "float divWithIntCheck(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x) / int(y));\n  }\n  return x / y;\n}\n\nfloat integerCorrectionModulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\n}" : '';
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var results = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              results.push(this.kernelArguments[i].getSource(args[i]));
            }

            return results.join('');
          }
        }, {
          key: "_getInjectedNative",
          value: function _getInjectedNative() {
            return this.injectedNative || '';
          }
        }, {
          key: "_getMainConstantsString",
          value: function _getMainConstantsString() {
            var result = [];
            var constants = this.constants;

            if (constants) {
              var i = 0;

              for (var _name12 in constants) {
                if (!this.constants.hasOwnProperty(_name12)) continue;
                result.push(this.kernelConstants[i++].getSource(this.constants[_name12]));
              }
            }

            return result.join('');
          }
        }, {
          key: "getRawValueFramebuffer",
          value: function getRawValueFramebuffer(width, height) {
            if (!this.rawValueFramebuffers[width]) {
              this.rawValueFramebuffers[width] = {};
            }

            if (!this.rawValueFramebuffers[width][height]) {
              var framebuffer = this.context.createFramebuffer();
              framebuffer.width = width;
              framebuffer.height = height;
              this.rawValueFramebuffers[width][height] = framebuffer;
            }

            return this.rawValueFramebuffers[width][height];
          }
        }, {
          key: "getKernelResultDeclaration",
          value: function getKernelResultDeclaration() {
            switch (this.returnType) {
              case 'Array(2)':
                return 'vec2 kernelResult';

              case 'Array(3)':
                return 'vec3 kernelResult';

              case 'Array(4)':
                return 'vec4 kernelResult';

              case 'LiteralInteger':
              case 'Float':
              case 'Number':
              case 'Integer':
                return 'float kernelResult';

              default:
                if (this.graphical) {
                  return 'float kernelResult';
                } else {
                  throw new Error("unrecognized output type \"".concat(this.returnType, "\""));
                }

            }
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [this.getKernelResultDeclaration()];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              switch (this.returnType) {
                case 'Number':
                case 'Float':
                case 'Integer':
                  for (var i = 0; i < subKernels.length; i++) {
                    var subKernel = subKernels[i];
                    result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"));
                  }

                  break;

                case 'Array(2)':
                  for (var _i23 = 0; _i23 < subKernels.length; _i23++) {
                    result.push("vec2 subKernelResult_".concat(subKernels[_i23].name));
                  }

                  break;

                case 'Array(3)':
                  for (var _i24 = 0; _i24 < subKernels.length; _i24++) {
                    result.push("vec3 subKernelResult_".concat(subKernels[_i24].name));
                  }

                  break;

                case 'Array(4)':
                  for (var _i25 = 0; _i25 < subKernels.length; _i25++) {
                    result.push("vec4 subKernelResult_".concat(subKernels[_i25].name));
                  }

                  break;
              }
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0] = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            var result = ['  index *= 4'];

            switch (this.returnType) {
              case 'Number':
              case 'Integer':
              case 'Float':
                var channels = ['r', 'g', 'b', 'a'];

                for (var i = 0; i < channels.length; i++) {
                  var channel = channels[i];
                  this.getMainResultKernelMemoryOptimizedFloats(result, channel);
                  this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);

                  if (i + 1 < channels.length) {
                    result.push('  index += 1');
                  }
                }

                break;

              default:
                throw new Error("optimized output only usable with Numbers, ".concat(this.returnType, " specified"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0].".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = subKernelResult_").concat(this.subKernels[i].name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "][0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]', '  gl_FragData[0][2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"), "  gl_FragData[".concat(i + 1, "][2] = subKernelResult_").concat(this.subKernels[i].name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            switch (this.returnType) {
              case 'Number':
              case 'Float':
              case 'Integer':
                for (var i = 0; i < this.subKernels.length; ++i) {
                  var subKernel = this.subKernels[i];

                  if (subKernel.returnType === 'Integer') {
                    result.push("  gl_FragData[".concat(i + 1, "] = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
                  } else {
                    result.push("  gl_FragData[".concat(i + 1, "] = subKernelResult_").concat(this.subKernels[i].name));
                  }
                }

                break;

              case 'Array(2)':
                for (var _i26 = 0; _i26 < this.subKernels.length; ++_i26) {
                  result.push("  gl_FragData[".concat(_i26 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i26].name, "[0]"), "  gl_FragData[".concat(_i26 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i26].name, "[1]"));
                }

                break;

              case 'Array(3)':
                for (var _i27 = 0; _i27 < this.subKernels.length; ++_i27) {
                  result.push("  gl_FragData[".concat(_i27 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i27].name, "[0]"), "  gl_FragData[".concat(_i27 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i27].name, "[1]"), "  gl_FragData[".concat(_i27 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i27].name, "[2]"));
                }

                break;

              case 'Array(4)':
                for (var _i28 = 0; _i28 < this.subKernels.length; ++_i28) {
                  result.push("  gl_FragData[".concat(_i28 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i28].name, "[0]"), "  gl_FragData[".concat(_i28 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i28].name, "[1]"), "  gl_FragData[".concat(_i28 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i28].name, "[2]"), "  gl_FragData[".concat(_i28 + 1, "][3] = subKernelResult_").concat(this.subKernels[_i28].name, "[3]"));
                }

                break;
            }

            return result;
          }
        }, {
          key: "replaceArtifacts",
          value: function replaceArtifacts(src, map) {
            return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\n/g, function (match, artifact) {
              if (map.hasOwnProperty(artifact)) {
                return map[artifact];
              }

              throw "unhandled artifact ".concat(artifact);
            });
          }
        }, {
          key: "getFragmentShader",
          value: function getFragmentShader(args) {
            if (this.compiledFragmentShader !== null) {
              return this.compiledFragmentShader;
            }

            return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));
          }
        }, {
          key: "getVertexShader",
          value: function getVertexShader(args) {
            if (this.compiledVertexShader !== null) {
              return this.compiledVertexShader;
            }

            return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = utils.linesToString(["const gl = context"]);
            return glKernelString(this.constructor, arguments, this, setupContextString);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            if (!this.context) return;

            if (this.buffer) {
              this.context.deleteBuffer(this.buffer);
            }

            if (this.framebuffer) {
              this.context.deleteFramebuffer(this.framebuffer);
            }

            for (var width in this.rawValueFramebuffers) {
              for (var height in this.rawValueFramebuffers[width]) {
                this.context.deleteFramebuffer(this.rawValueFramebuffers[width][height]);
                delete this.rawValueFramebuffers[width][height];
              }

              delete this.rawValueFramebuffers[width];
            }

            if (this.vertShader) {
              this.context.deleteShader(this.vertShader);
            }

            if (this.fragShader) {
              this.context.deleteShader(this.fragShader);
            }

            if (this.program) {
              this.context.deleteProgram(this.program);
            }

            if (this.texture) {
              this.texture.delete();
              var textureCacheIndex = this.textureCache.indexOf(this.texture.texture);

              if (textureCacheIndex > -1) {
                this.textureCache.splice(textureCacheIndex, 1);
              }

              this.texture = null;
            }

            if (this.mappedTextures && this.mappedTextures.length) {
              for (var _i29 = 0; _i29 < this.mappedTextures.length; _i29++) {
                var mappedTexture = this.mappedTextures[_i29];
                mappedTexture.delete();

                var _textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);

                if (_textureCacheIndex > -1) {
                  this.textureCache.splice(_textureCacheIndex, 1);
                }
              }

              this.mappedTextures = null;
            }

            if (this.kernelArguments) {
              for (var _i30 = 0; _i30 < this.kernelArguments.length; _i30++) {
                this.kernelArguments[_i30].destroy();
              }
            }

            if (this.kernelConstants) {
              for (var _i31 = 0; _i31 < this.kernelConstants.length; _i31++) {
                this.kernelConstants[_i31].destroy();
              }
            }

            while (this.textureCache.length > 0) {
              var texture = this.textureCache.pop();
              this.context.deleteTexture(texture);
            }

            if (removeCanvasReferences) {
              var idx = canvases.indexOf(this.canvas);

              if (idx >= 0) {
                canvases[idx] = null;
                maxTexSizes[idx] = null;
              }
            }

            this.destroyExtensions();
            delete this.context;
            delete this.canvas;
            if (!this.gpu) return;
            var i = this.gpu.kernels.indexOf(this);
            if (i === -1) return;
            this.gpu.kernels.splice(i, 1);
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGLKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              OES_texture_float: testContext.getExtension('OES_texture_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGLRenderingContext !== 'undefined') {
              return context instanceof WebGLRenderingContext;
            }

            return false;
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType(type, dynamic, precision, value);
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('WEBGL_lose_context');

            if (extension) {
              extension.loseContext();
            }
          }
        }]);

        return WebGLKernel;
      }(GLKernel);

      module.exports = {
        WebGLKernel: WebGLKernel
      };
    }, {
      "../../plugins/math-random-uniformly-distributed": 112,
      "../../utils": 114,
      "../function-builder": 9,
      "../gl/kernel": 13,
      "../gl/kernel-string": 12,
      "./fragment-shader": 37,
      "./function-node": 38,
      "./kernel-value-maps": 39,
      "./vertex-shader": 71
    }],
    71: [function (require, module, exports) {
      var vertexShader = "__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    72: [function (require, module, exports) {
      var fragmentShader = "#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat expm1(float x) {\n  return pow(".concat(Math.E, ", x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}");
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    73: [function (require, module, exports) {
      var _require171 = require('../../utils'),
          utils = _require171.utils;

      var _require172 = require('../web-gl/function-node'),
          WebGLFunctionNode = _require172.WebGLFunctionNode;

      var WebGL2FunctionNode = /*#__PURE__*/function (_WebGLFunctionNode) {
        "use strict";

        _inherits(WebGL2FunctionNode, _WebGLFunctionNode);

        var _super57 = _createSuper(WebGL2FunctionNode);

        function WebGL2FunctionNode() {
          _classCallCheck(this, WebGL2FunctionNode);

          return _super57.apply(this, arguments);
        }

        _createClass(WebGL2FunctionNode, [{
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);
            var name = utils.sanitizeName(idtNode.name);

            if (idtNode.name === 'Infinity') {
              retArr.push('intBitsToFloat(2139095039)');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(name) > -1) {
                retArr.push("bool(user_".concat(name, ")"));
              } else {
                retArr.push("user_".concat(name));
              }
            } else {
              retArr.push("user_".concat(name));
            }

            return retArr;
          }
        }]);

        return WebGL2FunctionNode;
      }(WebGLFunctionNode);

      module.exports = {
        WebGL2FunctionNode: WebGL2FunctionNode
      };
    }, {
      "../../utils": 114,
      "../web-gl/function-node": 38
    }],
    74: [function (require, module, exports) {
      var _require173 = require('./kernel-value/boolean'),
          WebGL2KernelValueBoolean = _require173.WebGL2KernelValueBoolean;

      var _require174 = require('./kernel-value/float'),
          WebGL2KernelValueFloat = _require174.WebGL2KernelValueFloat;

      var _require175 = require('./kernel-value/integer'),
          WebGL2KernelValueInteger = _require175.WebGL2KernelValueInteger;

      var _require176 = require('./kernel-value/html-image'),
          WebGL2KernelValueHTMLImage = _require176.WebGL2KernelValueHTMLImage;

      var _require177 = require('./kernel-value/dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require177.WebGL2KernelValueDynamicHTMLImage;

      var _require178 = require('./kernel-value/html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require178.WebGL2KernelValueHTMLImageArray;

      var _require179 = require('./kernel-value/dynamic-html-image-array'),
          WebGL2KernelValueDynamicHTMLImageArray = _require179.WebGL2KernelValueDynamicHTMLImageArray;

      var _require180 = require('./kernel-value/html-video'),
          WebGL2KernelValueHTMLVideo = _require180.WebGL2KernelValueHTMLVideo;

      var _require181 = require('./kernel-value/dynamic-html-video'),
          WebGL2KernelValueDynamicHTMLVideo = _require181.WebGL2KernelValueDynamicHTMLVideo;

      var _require182 = require('./kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require182.WebGL2KernelValueSingleInput;

      var _require183 = require('./kernel-value/dynamic-single-input'),
          WebGL2KernelValueDynamicSingleInput = _require183.WebGL2KernelValueDynamicSingleInput;

      var _require184 = require('./kernel-value/unsigned-input'),
          WebGL2KernelValueUnsignedInput = _require184.WebGL2KernelValueUnsignedInput;

      var _require185 = require('./kernel-value/dynamic-unsigned-input'),
          WebGL2KernelValueDynamicUnsignedInput = _require185.WebGL2KernelValueDynamicUnsignedInput;

      var _require186 = require('./kernel-value/memory-optimized-number-texture'),
          WebGL2KernelValueMemoryOptimizedNumberTexture = _require186.WebGL2KernelValueMemoryOptimizedNumberTexture;

      var _require187 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGL2KernelValueDynamicMemoryOptimizedNumberTexture = _require187.WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;

      var _require188 = require('./kernel-value/number-texture'),
          WebGL2KernelValueNumberTexture = _require188.WebGL2KernelValueNumberTexture;

      var _require189 = require('./kernel-value/dynamic-number-texture'),
          WebGL2KernelValueDynamicNumberTexture = _require189.WebGL2KernelValueDynamicNumberTexture;

      var _require190 = require('./kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require190.WebGL2KernelValueSingleArray;

      var _require191 = require('./kernel-value/dynamic-single-array'),
          WebGL2KernelValueDynamicSingleArray = _require191.WebGL2KernelValueDynamicSingleArray;

      var _require192 = require('./kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require192.WebGL2KernelValueSingleArray1DI;

      var _require193 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGL2KernelValueDynamicSingleArray1DI = _require193.WebGL2KernelValueDynamicSingleArray1DI;

      var _require194 = require('./kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require194.WebGL2KernelValueSingleArray2DI;

      var _require195 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGL2KernelValueDynamicSingleArray2DI = _require195.WebGL2KernelValueDynamicSingleArray2DI;

      var _require196 = require('./kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require196.WebGL2KernelValueSingleArray3DI;

      var _require197 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGL2KernelValueDynamicSingleArray3DI = _require197.WebGL2KernelValueDynamicSingleArray3DI;

      var _require198 = require('./kernel-value/array2'),
          WebGL2KernelValueArray2 = _require198.WebGL2KernelValueArray2;

      var _require199 = require('./kernel-value/array3'),
          WebGL2KernelValueArray3 = _require199.WebGL2KernelValueArray3;

      var _require200 = require('./kernel-value/array4'),
          WebGL2KernelValueArray4 = _require200.WebGL2KernelValueArray4;

      var _require201 = require('./kernel-value/unsigned-array'),
          WebGL2KernelValueUnsignedArray = _require201.WebGL2KernelValueUnsignedArray;

      var _require202 = require('./kernel-value/dynamic-unsigned-array'),
          WebGL2KernelValueDynamicUnsignedArray = _require202.WebGL2KernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicUnsignedArray,
            'Array(2)': WebGL2KernelValueArray2,
            'Array(3)': WebGL2KernelValueArray3,
            'Array(4)': WebGL2KernelValueArray4,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueDynamicUnsignedInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueUnsignedArray,
            'Array(2)': WebGL2KernelValueArray2,
            'Array(3)': WebGL2KernelValueArray3,
            'Array(4)': WebGL2KernelValueArray4,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueUnsignedInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueHTMLImage,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicSingleArray,
            'Array(2)': WebGL2KernelValueArray2,
            'Array(3)': WebGL2KernelValueArray3,
            'Array(4)': WebGL2KernelValueArray4,
            'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,
            'Input': WebGL2KernelValueDynamicSingleInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueSingleArray,
            'Array(2)': WebGL2KernelValueArray2,
            'Array(3)': WebGL2KernelValueArray3,
            'Array(4)': WebGL2KernelValueArray4,
            'Array1D(2)': WebGL2KernelValueSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueSingleArray3DI,
            'Input': WebGL2KernelValueSingleInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueHTMLImage,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        kernelValueMaps: kernelValueMaps,
        lookupKernelValueType: lookupKernelValueType
      };
    }, {
      "./kernel-value/array2": 75,
      "./kernel-value/array3": 76,
      "./kernel-value/array4": 77,
      "./kernel-value/boolean": 78,
      "./kernel-value/dynamic-html-image": 80,
      "./kernel-value/dynamic-html-image-array": 79,
      "./kernel-value/dynamic-html-video": 81,
      "./kernel-value/dynamic-memory-optimized-number-texture": 82,
      "./kernel-value/dynamic-number-texture": 83,
      "./kernel-value/dynamic-single-array": 84,
      "./kernel-value/dynamic-single-array1d-i": 85,
      "./kernel-value/dynamic-single-array2d-i": 86,
      "./kernel-value/dynamic-single-array3d-i": 87,
      "./kernel-value/dynamic-single-input": 88,
      "./kernel-value/dynamic-unsigned-array": 89,
      "./kernel-value/dynamic-unsigned-input": 90,
      "./kernel-value/float": 91,
      "./kernel-value/html-image": 93,
      "./kernel-value/html-image-array": 92,
      "./kernel-value/html-video": 94,
      "./kernel-value/integer": 95,
      "./kernel-value/memory-optimized-number-texture": 96,
      "./kernel-value/number-texture": 97,
      "./kernel-value/single-array": 98,
      "./kernel-value/single-array1d-i": 99,
      "./kernel-value/single-array2d-i": 100,
      "./kernel-value/single-array3d-i": 101,
      "./kernel-value/single-input": 102,
      "./kernel-value/unsigned-array": 103,
      "./kernel-value/unsigned-input": 104
    }],
    75: [function (require, module, exports) {
      var _require203 = require('../../web-gl/kernel-value/array2'),
          WebGLKernelValueArray2 = _require203.WebGLKernelValueArray2;

      var WebGL2KernelValueArray2 = /*#__PURE__*/function (_WebGLKernelValueArra) {
        "use strict";

        _inherits(WebGL2KernelValueArray2, _WebGLKernelValueArra);

        var _super58 = _createSuper(WebGL2KernelValueArray2);

        function WebGL2KernelValueArray2() {
          _classCallCheck(this, WebGL2KernelValueArray2);

          return _super58.apply(this, arguments);
        }

        return WebGL2KernelValueArray2;
      }(WebGLKernelValueArray2);

      module.exports = {
        WebGL2KernelValueArray2: WebGL2KernelValueArray2
      };
    }, {
      "../../web-gl/kernel-value/array2": 41
    }],
    76: [function (require, module, exports) {
      var _require204 = require('../../web-gl/kernel-value/array3'),
          WebGLKernelValueArray3 = _require204.WebGLKernelValueArray3;

      var WebGL2KernelValueArray3 = /*#__PURE__*/function (_WebGLKernelValueArra2) {
        "use strict";

        _inherits(WebGL2KernelValueArray3, _WebGLKernelValueArra2);

        var _super59 = _createSuper(WebGL2KernelValueArray3);

        function WebGL2KernelValueArray3() {
          _classCallCheck(this, WebGL2KernelValueArray3);

          return _super59.apply(this, arguments);
        }

        return WebGL2KernelValueArray3;
      }(WebGLKernelValueArray3);

      module.exports = {
        WebGL2KernelValueArray3: WebGL2KernelValueArray3
      };
    }, {
      "../../web-gl/kernel-value/array3": 42
    }],
    77: [function (require, module, exports) {
      var _require205 = require('../../web-gl/kernel-value/array4'),
          WebGLKernelValueArray4 = _require205.WebGLKernelValueArray4;

      var WebGL2KernelValueArray4 = /*#__PURE__*/function (_WebGLKernelValueArra3) {
        "use strict";

        _inherits(WebGL2KernelValueArray4, _WebGLKernelValueArra3);

        var _super60 = _createSuper(WebGL2KernelValueArray4);

        function WebGL2KernelValueArray4() {
          _classCallCheck(this, WebGL2KernelValueArray4);

          return _super60.apply(this, arguments);
        }

        return WebGL2KernelValueArray4;
      }(WebGLKernelValueArray4);

      module.exports = {
        WebGL2KernelValueArray4: WebGL2KernelValueArray4
      };
    }, {
      "../../web-gl/kernel-value/array4": 43
    }],
    78: [function (require, module, exports) {
      var _require206 = require('../../web-gl/kernel-value/boolean'),
          WebGLKernelValueBoolean = _require206.WebGLKernelValueBoolean;

      var WebGL2KernelValueBoolean = /*#__PURE__*/function (_WebGLKernelValueBool) {
        "use strict";

        _inherits(WebGL2KernelValueBoolean, _WebGLKernelValueBool);

        var _super61 = _createSuper(WebGL2KernelValueBoolean);

        function WebGL2KernelValueBoolean() {
          _classCallCheck(this, WebGL2KernelValueBoolean);

          return _super61.apply(this, arguments);
        }

        return WebGL2KernelValueBoolean;
      }(WebGLKernelValueBoolean);

      module.exports = {
        WebGL2KernelValueBoolean: WebGL2KernelValueBoolean
      };
    }, {
      "../../web-gl/kernel-value/boolean": 44
    }],
    79: [function (require, module, exports) {
      var _require207 = require('../../../utils'),
          utils = _require207.utils;

      var _require208 = require('./html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require208.WebGL2KernelValueHTMLImageArray;

      var WebGL2KernelValueDynamicHTMLImageArray = /*#__PURE__*/function (_WebGL2KernelValueHTM) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicHTMLImageArray, _WebGL2KernelValueHTM);

        var _super62 = _createSuper(WebGL2KernelValueDynamicHTMLImageArray);

        function WebGL2KernelValueDynamicHTMLImageArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImageArray);

          return _super62.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicHTMLImageArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var _images$ = images[0],
                width = _images$.width,
                height = _images$.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, images.length];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicHTMLImageArray.prototype), "updateValue", this).call(this, images);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImageArray;
      }(WebGL2KernelValueHTMLImageArray);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImageArray: WebGL2KernelValueDynamicHTMLImageArray
      };
    }, {
      "../../../utils": 114,
      "./html-image-array": 92
    }],
    80: [function (require, module, exports) {
      var _require209 = require('../../../utils'),
          utils = _require209.utils;

      var _require210 = require('../../web-gl/kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require210.WebGLKernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLImage = /*#__PURE__*/function (_WebGLKernelValueDyna2) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicHTMLImage, _WebGLKernelValueDyna2);

        var _super63 = _createSuper(WebGL2KernelValueDynamicHTMLImage);

        function WebGL2KernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImage);

          return _super63.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImage;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-html-image": 45
    }],
    81: [function (require, module, exports) {
      var _require211 = require('../../../utils'),
          utils = _require211.utils;

      var _require212 = require('./dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require212.WebGL2KernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLVideo = /*#__PURE__*/function (_WebGL2KernelValueDyn) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicHTMLVideo, _WebGL2KernelValueDyn);

        var _super64 = _createSuper(WebGL2KernelValueDynamicHTMLVideo);

        function WebGL2KernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLVideo);

          return _super64.apply(this, arguments);
        }

        return WebGL2KernelValueDynamicHTMLVideo;
      }(WebGL2KernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLVideo: WebGL2KernelValueDynamicHTMLVideo
      };
    }, {
      "../../../utils": 114,
      "./dynamic-html-image": 80
    }],
    82: [function (require, module, exports) {
      var _require213 = require('../../../utils'),
          utils = _require213.utils;

      var _require214 = require('../../web-gl/kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require214.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var WebGL2KernelValueDynamicMemoryOptimizedNumberTexture = /*#__PURE__*/function (_WebGLKernelValueDyna3) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueDyna3);

        var _super65 = _createSuper(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture);

        function WebGL2KernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicMemoryOptimizedNumberTexture);

          return _super65.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicMemoryOptimizedNumberTexture: WebGL2KernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-memory-optimized-number-texture": 47
    }],
    83: [function (require, module, exports) {
      var _require215 = require('../../../utils'),
          utils = _require215.utils;

      var _require216 = require('../../web-gl/kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require216.WebGLKernelValueDynamicNumberTexture;

      var WebGL2KernelValueDynamicNumberTexture = /*#__PURE__*/function (_WebGLKernelValueDyna4) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicNumberTexture, _WebGLKernelValueDyna4);

        var _super66 = _createSuper(WebGL2KernelValueDynamicNumberTexture);

        function WebGL2KernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicNumberTexture);

          return _super66.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicNumberTexture;
      }(WebGLKernelValueDynamicNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicNumberTexture: WebGL2KernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-number-texture": 48
    }],
    84: [function (require, module, exports) {
      var _require217 = require('../../../utils'),
          utils = _require217.utils;

      var _require218 = require('../../web-gl2/kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require218.WebGL2KernelValueSingleArray;

      var WebGL2KernelValueDynamicSingleArray = /*#__PURE__*/function (_WebGL2KernelValueSin) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicSingleArray, _WebGL2KernelValueSin);

        var _super67 = _createSuper(WebGL2KernelValueDynamicSingleArray);

        function WebGL2KernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray);

          return _super67.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray;
      }(WebGL2KernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray: WebGL2KernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array": 98
    }],
    85: [function (require, module, exports) {
      var _require219 = require('../../../utils'),
          utils = _require219.utils;

      var _require220 = require('../../web-gl2/kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require220.WebGL2KernelValueSingleArray1DI;

      var WebGL2KernelValueDynamicSingleArray1DI = /*#__PURE__*/function (_WebGL2KernelValueSin2) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicSingleArray1DI, _WebGL2KernelValueSin2);

        var _super68 = _createSuper(WebGL2KernelValueDynamicSingleArray1DI);

        function WebGL2KernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray1DI);

          return _super68.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray1DI;
      }(WebGL2KernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray1DI: WebGL2KernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array1d-i": 99
    }],
    86: [function (require, module, exports) {
      var _require221 = require('../../../utils'),
          utils = _require221.utils;

      var _require222 = require('../../web-gl2/kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require222.WebGL2KernelValueSingleArray2DI;

      var WebGL2KernelValueDynamicSingleArray2DI = /*#__PURE__*/function (_WebGL2KernelValueSin3) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicSingleArray2DI, _WebGL2KernelValueSin3);

        var _super69 = _createSuper(WebGL2KernelValueDynamicSingleArray2DI);

        function WebGL2KernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray2DI);

          return _super69.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray2DI;
      }(WebGL2KernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray2DI: WebGL2KernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array2d-i": 100
    }],
    87: [function (require, module, exports) {
      var _require223 = require('../../../utils'),
          utils = _require223.utils;

      var _require224 = require('../../web-gl2/kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require224.WebGL2KernelValueSingleArray3DI;

      var WebGL2KernelValueDynamicSingleArray3DI = /*#__PURE__*/function (_WebGL2KernelValueSin4) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicSingleArray3DI, _WebGL2KernelValueSin4);

        var _super70 = _createSuper(WebGL2KernelValueDynamicSingleArray3DI);

        function WebGL2KernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray3DI);

          return _super70.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray3DI;
      }(WebGL2KernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray3DI: WebGL2KernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array3d-i": 101
    }],
    88: [function (require, module, exports) {
      var _require225 = require('../../../utils'),
          utils = _require225.utils;

      var _require226 = require('../../web-gl2/kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require226.WebGL2KernelValueSingleInput;

      var WebGL2KernelValueDynamicSingleInput = /*#__PURE__*/function (_WebGL2KernelValueSin5) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicSingleInput, _WebGL2KernelValueSin5);

        var _super71 = _createSuper(WebGL2KernelValueDynamicSingleInput);

        function WebGL2KernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleInput);

          return _super71.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size7 = _slicedToArray(value.size, 3),
                w = _value$size7[0],
                h = _value$size7[1],
                d = _value$size7[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleInput;
      }(WebGL2KernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueDynamicSingleInput: WebGL2KernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-input": 102
    }],
    89: [function (require, module, exports) {
      var _require227 = require('../../../utils'),
          utils = _require227.utils;

      var _require228 = require('../../web-gl/kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require228.WebGLKernelValueDynamicUnsignedArray;

      var WebGL2KernelValueDynamicUnsignedArray = /*#__PURE__*/function (_WebGLKernelValueDyna5) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicUnsignedArray, _WebGLKernelValueDyna5);

        var _super72 = _createSuper(WebGL2KernelValueDynamicUnsignedArray);

        function WebGL2KernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedArray);

          return _super72.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedArray;
      }(WebGLKernelValueDynamicUnsignedArray);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedArray: WebGL2KernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-unsigned-array": 54
    }],
    90: [function (require, module, exports) {
      var _require229 = require('../../../utils'),
          utils = _require229.utils;

      var _require230 = require('../../web-gl/kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require230.WebGLKernelValueDynamicUnsignedInput;

      var WebGL2KernelValueDynamicUnsignedInput = /*#__PURE__*/function (_WebGLKernelValueDyna6) {
        "use strict";

        _inherits(WebGL2KernelValueDynamicUnsignedInput, _WebGLKernelValueDyna6);

        var _super73 = _createSuper(WebGL2KernelValueDynamicUnsignedInput);

        function WebGL2KernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedInput);

          return _super73.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedInput;
      }(WebGLKernelValueDynamicUnsignedInput);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedInput: WebGL2KernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-unsigned-input": 55
    }],
    91: [function (require, module, exports) {
      var _require231 = require('../../../utils'),
          utils = _require231.utils;

      var _require232 = require('../../web-gl/kernel-value/float'),
          WebGLKernelValueFloat = _require232.WebGLKernelValueFloat;

      var WebGL2KernelValueFloat = /*#__PURE__*/function (_WebGLKernelValueFloa) {
        "use strict";

        _inherits(WebGL2KernelValueFloat, _WebGLKernelValueFloa);

        var _super74 = _createSuper(WebGL2KernelValueFloat);

        function WebGL2KernelValueFloat() {
          _classCallCheck(this, WebGL2KernelValueFloat);

          return _super74.apply(this, arguments);
        }

        return WebGL2KernelValueFloat;
      }(WebGLKernelValueFloat);

      module.exports = {
        WebGL2KernelValueFloat: WebGL2KernelValueFloat
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/float": 56
    }],
    92: [function (require, module, exports) {
      var _require233 = require('../../../utils'),
          utils = _require233.utils;

      var _require234 = require('../../web-gl/kernel-value/array'),
          WebGLKernelArray = _require234.WebGLKernelArray;

      var WebGL2KernelValueHTMLImageArray = /*#__PURE__*/function (_WebGLKernelArray11) {
        "use strict";

        _inherits(WebGL2KernelValueHTMLImageArray, _WebGLKernelArray11);

        var _super75 = _createSuper(WebGL2KernelValueHTMLImageArray);

        function WebGL2KernelValueHTMLImageArray(value, settings) {
          var _this47;

          _classCallCheck(this, WebGL2KernelValueHTMLImageArray);

          _this47 = _super75.call(this, value, settings);

          _this47.checkSize(value[0].width, value[0].height);

          _this47.dimensions = [value[0].width, value[0].height, value.length];
          _this47.textureSize = [value[0].width, value[0].height];
          return _this47;
        }

        _createClass(WebGL2KernelValueHTMLImageArray, [{
          key: "defineTexture",
          value: function defineTexture() {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, images[0].width, images[0].height, images.length, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

            for (var i = 0; i < images.length; i++) {
              var xOffset = 0;
              var yOffset = 0;
              var imageDepth = 1;
              gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, xOffset, yOffset, i, images[i].width, images[i].height, imageDepth, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = images[i]);
            }

            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueHTMLImageArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/array": 40
    }],
    93: [function (require, module, exports) {
      var _require235 = require('../../../utils'),
          utils = _require235.utils;

      var _require236 = require('../../web-gl/kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require236.WebGLKernelValueHTMLImage;

      var WebGL2KernelValueHTMLImage = /*#__PURE__*/function (_WebGLKernelValueHTML3) {
        "use strict";

        _inherits(WebGL2KernelValueHTMLImage, _WebGLKernelValueHTML3);

        var _super76 = _createSuper(WebGL2KernelValueHTMLImage);

        function WebGL2KernelValueHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueHTMLImage);

          return _super76.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/html-image": 57
    }],
    94: [function (require, module, exports) {
      var _require237 = require('../../../utils'),
          utils = _require237.utils;

      var _require238 = require('./html-image'),
          WebGL2KernelValueHTMLImage = _require238.WebGL2KernelValueHTMLImage;

      var WebGL2KernelValueHTMLVideo = /*#__PURE__*/function (_WebGL2KernelValueHTM2) {
        "use strict";

        _inherits(WebGL2KernelValueHTMLVideo, _WebGL2KernelValueHTM2);

        var _super77 = _createSuper(WebGL2KernelValueHTMLVideo);

        function WebGL2KernelValueHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueHTMLVideo);

          return _super77.apply(this, arguments);
        }

        return WebGL2KernelValueHTMLVideo;
      }(WebGL2KernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLVideo: WebGL2KernelValueHTMLVideo
      };
    }, {
      "../../../utils": 114,
      "./html-image": 93
    }],
    95: [function (require, module, exports) {
      var _require239 = require('../../web-gl/kernel-value/integer'),
          WebGLKernelValueInteger = _require239.WebGLKernelValueInteger;

      var WebGL2KernelValueInteger = /*#__PURE__*/function (_WebGLKernelValueInte) {
        "use strict";

        _inherits(WebGL2KernelValueInteger, _WebGLKernelValueInte);

        var _super78 = _createSuper(WebGL2KernelValueInteger);

        function WebGL2KernelValueInteger() {
          _classCallCheck(this, WebGL2KernelValueInteger);

          return _super78.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueInteger, [{
          key: "getSource",
          value: function getSource(value) {
            var variablePrecision = this.getVariablePrecisionString();

            if (this.origin === 'constants') {
              return "const ".concat(variablePrecision, " int ").concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform ".concat(variablePrecision, " int ").concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGL2KernelValueInteger;
      }(WebGLKernelValueInteger);

      module.exports = {
        WebGL2KernelValueInteger: WebGL2KernelValueInteger
      };
    }, {
      "../../web-gl/kernel-value/integer": 60
    }],
    96: [function (require, module, exports) {
      var _require240 = require('../../../utils'),
          utils = _require240.utils;

      var _require241 = require('../../web-gl/kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require241.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGL2KernelValueMemoryOptimizedNumberTexture = /*#__PURE__*/function (_WebGLKernelValueMemo2) {
        "use strict";

        _inherits(WebGL2KernelValueMemoryOptimizedNumberTexture, _WebGLKernelValueMemo2);

        var _super79 = _createSuper(WebGL2KernelValueMemoryOptimizedNumberTexture);

        function WebGL2KernelValueMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueMemoryOptimizedNumberTexture);

          return _super79.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform sampler2D ".concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueMemoryOptimizedNumberTexture: WebGL2KernelValueMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/memory-optimized-number-texture": 61
    }],
    97: [function (require, module, exports) {
      var _require242 = require('../../../utils'),
          utils = _require242.utils;

      var _require243 = require('../../web-gl/kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require243.WebGLKernelValueNumberTexture;

      var WebGL2KernelValueNumberTexture = /*#__PURE__*/function (_WebGLKernelValueNumb2) {
        "use strict";

        _inherits(WebGL2KernelValueNumberTexture, _WebGLKernelValueNumb2);

        var _super80 = _createSuper(WebGL2KernelValueNumberTexture);

        function WebGL2KernelValueNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueNumberTexture);

          return _super80.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGL2KernelValueNumberTexture: WebGL2KernelValueNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/number-texture": 62
    }],
    98: [function (require, module, exports) {
      var _require244 = require('../../../utils'),
          utils = _require244.utils;

      var _require245 = require('../../web-gl/kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require245.WebGLKernelValueSingleArray;

      var WebGL2KernelValueSingleArray = /*#__PURE__*/function (_WebGLKernelValueSing6) {
        "use strict";

        _inherits(WebGL2KernelValueSingleArray, _WebGLKernelValueSing6);

        var _super81 = _createSuper(WebGL2KernelValueSingleArray);

        function WebGL2KernelValueSingleArray() {
          _classCallCheck(this, WebGL2KernelValueSingleArray);

          return _super81.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array": 63
    }],
    99: [function (require, module, exports) {
      var _require246 = require('../../../utils'),
          utils = _require246.utils;

      var _require247 = require('../../web-gl/kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require247.WebGLKernelValueSingleArray1DI;

      var WebGL2KernelValueSingleArray1DI = /*#__PURE__*/function (_WebGLKernelValueSing7) {
        "use strict";

        _inherits(WebGL2KernelValueSingleArray1DI, _WebGLKernelValueSing7);

        var _super82 = _createSuper(WebGL2KernelValueSingleArray1DI);

        function WebGL2KernelValueSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray1DI);

          return _super82.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueSingleArray1DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array1d-i": 64
    }],
    100: [function (require, module, exports) {
      var _require248 = require('../../../utils'),
          utils = _require248.utils;

      var _require249 = require('../../web-gl/kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require249.WebGLKernelValueSingleArray2DI;

      var WebGL2KernelValueSingleArray2DI = /*#__PURE__*/function (_WebGLKernelValueSing8) {
        "use strict";

        _inherits(WebGL2KernelValueSingleArray2DI, _WebGLKernelValueSing8);

        var _super83 = _createSuper(WebGL2KernelValueSingleArray2DI);

        function WebGL2KernelValueSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray2DI);

          return _super83.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueSingleArray2DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array2d-i": 65
    }],
    101: [function (require, module, exports) {
      var _require250 = require('../../../utils'),
          utils = _require250.utils;

      var _require251 = require('../../web-gl/kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require251.WebGLKernelValueSingleArray3DI;

      var WebGL2KernelValueSingleArray3DI = /*#__PURE__*/function (_WebGLKernelValueSing9) {
        "use strict";

        _inherits(WebGL2KernelValueSingleArray3DI, _WebGLKernelValueSing9);

        var _super84 = _createSuper(WebGL2KernelValueSingleArray3DI);

        function WebGL2KernelValueSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray3DI);

          return _super84.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueSingleArray3DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array3d-i": 66
    }],
    102: [function (require, module, exports) {
      var _require252 = require('../../../utils'),
          utils = _require252.utils;

      var _require253 = require('../../web-gl/kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require253.WebGLKernelValueSingleInput;

      var WebGL2KernelValueSingleInput = /*#__PURE__*/function (_WebGLKernelValueSing10) {
        "use strict";

        _inherits(WebGL2KernelValueSingleInput, _WebGLKernelValueSing10);

        var _super85 = _createSuper(WebGL2KernelValueSingleInput);

        function WebGL2KernelValueSingleInput() {
          _classCallCheck(this, WebGL2KernelValueSingleInput);

          return _super85.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-input": 67
    }],
    103: [function (require, module, exports) {
      var _require254 = require('../../../utils'),
          utils = _require254.utils;

      var _require255 = require('../../web-gl/kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require255.WebGLKernelValueUnsignedArray;

      var WebGL2KernelValueUnsignedArray = /*#__PURE__*/function (_WebGLKernelValueUnsi3) {
        "use strict";

        _inherits(WebGL2KernelValueUnsignedArray, _WebGLKernelValueUnsi3);

        var _super86 = _createSuper(WebGL2KernelValueUnsignedArray);

        function WebGL2KernelValueUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueUnsignedArray);

          return _super86.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGL2KernelValueUnsignedArray: WebGL2KernelValueUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/unsigned-array": 68
    }],
    104: [function (require, module, exports) {
      var _require256 = require('../../../utils'),
          utils = _require256.utils;

      var _require257 = require('../../web-gl/kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require257.WebGLKernelValueUnsignedInput;

      var WebGL2KernelValueUnsignedInput = /*#__PURE__*/function (_WebGLKernelValueUnsi4) {
        "use strict";

        _inherits(WebGL2KernelValueUnsignedInput, _WebGLKernelValueUnsi4);

        var _super87 = _createSuper(WebGL2KernelValueUnsignedInput);

        function WebGL2KernelValueUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueUnsignedInput);

          return _super87.apply(this, arguments);
        }

        _createClass(WebGL2KernelValueUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGL2KernelValueUnsignedInput: WebGL2KernelValueUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/unsigned-input": 69
    }],
    105: [function (require, module, exports) {
      var _require258 = require('../web-gl/kernel'),
          WebGLKernel = _require258.WebGLKernel;

      var _require259 = require('./function-node'),
          WebGL2FunctionNode = _require259.WebGL2FunctionNode;

      var _require260 = require('../function-builder'),
          FunctionBuilder = _require260.FunctionBuilder;

      var _require261 = require('../../utils'),
          utils = _require261.utils;

      var _require262 = require('./fragment-shader'),
          fragmentShader = _require262.fragmentShader;

      var _require263 = require('./vertex-shader'),
          vertexShader = _require263.vertexShader;

      var _require264 = require('./kernel-value-maps'),
          _lookupKernelValueType2 = _require264.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var WebGL2Kernel = /*#__PURE__*/function (_WebGLKernel2) {
        "use strict";

        _inherits(WebGL2Kernel, _WebGLKernel2);

        var _super88 = _createSuper(WebGL2Kernel);

        function WebGL2Kernel() {
          _classCallCheck(this, WebGL2Kernel);

          return _super88.apply(this, arguments);
        }

        _createClass(WebGL2Kernel, [{
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl2', settings);
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Float texture outputs are not supported');
            } else if (!this.graphical && this.precision === null) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'single') {
                console.warn('Cannot use graphical mode and single precision at the same time');
                this.precision = 'unsigned';
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.context.drawBuffers(this.drawBuffersMap);
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.R32F:
                return gl.RED;

              case gl.RG32F:
                return gl.RG;

              case gl.RGBA32F:
                return gl.RGBA;

              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            var gl = this.context;

            if (this.precision === 'single') {
              if (this.pipeline) {
                switch (this.returnType) {
                  case 'Number':
                  case 'Float':
                  case 'Integer':
                    if (this.optimizeFloatMemory) {
                      return gl.RGBA32F;
                    } else {
                      return gl.R32F;
                    }

                  case 'Array(2)':
                    return gl.RG32F;

                  case 'Array(3)':
                  case 'Array(4)':
                    return gl.RGBA32F;

                  default:
                    throw new Error('Unhandled return type');
                }
              }

              return gl.RGBA32F;
            }

            return gl.RGBA;
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var gl = this.context;

            if (this.texture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
              return;
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            var texture = gl.createTexture();
            var texSize = this.texSize;
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            this.texture = new this.TextureConstructor({
              texture: texture,
              size: texSize,
              dimensions: this.threadDim,
              output: this.output,
              context: this.context,
              internalFormat: this.getInternalFormat(),
              textureFormat: this.getTextureFormat(),
              kernel: this
            });
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var gl = this.context;

            if (this.mappedTextures) {
              for (var i = 0; i < this.subKernels.length; i++) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, this.mappedTextures[i].texture, 0);
              }

              return;
            }

            var texSize = this.texSize;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.mappedTextures = [];

            for (var _i32 = 0; _i32 < this.subKernels.length; _i32++) {
              var texture = this.createTexture();
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + _i32 + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + _i32);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              var format = this.getInternalFormat();

              if (this.precision === 'single') {
                gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i32 + 1, gl.TEXTURE_2D, texture, 0);
              this.mappedTextures.push(new this.TextureConstructor({
                texture: texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              }));
            }
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return '';
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);

            if (subKernels === null || subKernels.length < 1) {
              return "in ".concat(variablePrecision, " vec2 vTexCoord;\n");
            } else {
              return "out ".concat(variablePrecision, " vec2 vTexCoord;\n");
            }
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var result = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              result.push(this.kernelArguments[i].getSource(args[i]));
            }

            return result.join('');
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [this.getKernelResultDeclaration()];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              result.push('layout(location = 0) out vec4 data0');

              switch (this.returnType) {
                case 'Number':
                case 'Float':
                case 'Integer':
                  for (var i = 0; i < subKernels.length; i++) {
                    var subKernel = subKernels[i];
                    result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"), "layout(location = ".concat(i + 1, ") out vec4 data").concat(i + 1));
                  }

                  break;

                case 'Array(2)':
                  for (var _i33 = 0; _i33 < subKernels.length; _i33++) {
                    result.push("vec2 subKernelResult_".concat(subKernels[_i33].name), "layout(location = ".concat(_i33 + 1, ") out vec4 data").concat(_i33 + 1));
                  }

                  break;

                case 'Array(3)':
                  for (var _i34 = 0; _i34 < subKernels.length; _i34++) {
                    result.push("vec3 subKernelResult_".concat(subKernels[_i34].name), "layout(location = ".concat(_i34 + 1, ") out vec4 data").concat(_i34 + 1));
                  }

                  break;

                case 'Array(4)':
                  for (var _i35 = 0; _i35 < subKernels.length; _i35++) {
                    result.push("vec4 subKernelResult_".concat(subKernels[_i35].name), "layout(location = ".concat(_i35 + 1, ") out vec4 data").concat(_i35 + 1));
                  }

                  break;
              }
            } else {
              result.push('out vec4 data0');
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0 = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0.".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, ".").concat(channel, " = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, ".").concat(channel, " = subKernelResult_").concat(subKernel.name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, "[0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]', '  data0[2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"), "  data".concat(i + 1, "[2] = subKernelResult_").concat(subKernel.name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  data".concat(i + 1, " = subKernelResult_").concat(this.subKernels[i].name));
            }

            return result;
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.EXT_color_buffer_float = null;
            this.extensions.OES_texture_float_linear = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGL2Kernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl2');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGL2RenderingContext !== 'undefined') {
              return context instanceof WebGL2RenderingContext;
            }

            return false;
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              isSpeedTacticSupported: this.getIsSpeedTacticSupported(),
              kernelMap: true,
              isTextureFloat: true,
              isDrawBuffers: true,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return true;
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType2(type, dynamic, precision, value);
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }]);

        return WebGL2Kernel;
      }(WebGLKernel);

      module.exports = {
        WebGL2Kernel: WebGL2Kernel
      };
    }, {
      "../../utils": 114,
      "../function-builder": 9,
      "../web-gl/kernel": 70,
      "./fragment-shader": 72,
      "./function-node": 73,
      "./kernel-value-maps": 74,
      "./vertex-shader": 106
    }],
    106: [function (require, module, exports) {
      var vertexShader = "#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    107: [function (require, module, exports) {
      var lib = require('./index');

      var GPU = lib.GPU;

      for (var p in lib) {
        if (!lib.hasOwnProperty(p)) continue;
        if (p === 'GPU') continue;
        GPU[p] = lib[p];
      }

      if (typeof window !== 'undefined') {
        bindTo(window);
      }

      if (typeof self !== 'undefined') {
        bindTo(self);
      }

      function bindTo(target) {
        if (target.GPU) return;
        Object.defineProperty(target, 'GPU', {
          get: function get() {
            return GPU;
          }
        });
      }

      module.exports = lib;
    }, {
      "./index": 109
    }],
    108: [function (require, module, exports) {
      var _require265 = require('gpu-mock.js'),
          gpuMock = _require265.gpuMock;

      var _require266 = require('./utils'),
          utils = _require266.utils;

      var _require267 = require('./backend/kernel'),
          Kernel = _require267.Kernel;

      var _require268 = require('./backend/cpu/kernel'),
          CPUKernel = _require268.CPUKernel;

      var _require269 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require269.HeadlessGLKernel;

      var _require270 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require270.WebGL2Kernel;

      var _require271 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require271.WebGLKernel;

      var _require272 = require('./kernel-run-shortcut'),
          kernelRunShortcut = _require272.kernelRunShortcut;

      var kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];
      var kernelTypes = ['gpu', 'cpu'];
      var internalKernels = {
        'headlessgl': HeadlessGLKernel,
        'webgl2': WebGL2Kernel,
        'webgl': WebGLKernel
      };
      var validate = true;

      var GPU = /*#__PURE__*/function () {
        "use strict";

        function GPU(settings) {
          _classCallCheck(this, GPU);

          settings = settings || {};
          this.canvas = settings.canvas || null;
          this.context = settings.context || null;
          this.mode = settings.mode;
          this.Kernel = null;
          this.kernels = [];
          this.functions = [];
          this.nativeFunctions = [];
          this.injectedNative = null;
          if (this.mode === 'dev') return;
          this.chooseKernel();

          if (settings.functions) {
            for (var i = 0; i < settings.functions.length; i++) {
              this.addFunction(settings.functions[i]);
            }
          }

          if (settings.nativeFunctions) {
            for (var p in settings.nativeFunctions) {
              if (!settings.nativeFunctions.hasOwnProperty(p)) continue;
              var s = settings.nativeFunctions[p];
              var _name13 = s.name,
                  source = s.source;
              this.addNativeFunction(_name13, source, s);
            }
          }
        }

        _createClass(GPU, [{
          key: "chooseKernel",
          value: function chooseKernel() {
            if (this.Kernel) return;
            var Kernel = null;

            if (this.context) {
              for (var i = 0; i < kernelOrder.length; i++) {
                var ExternalKernel = kernelOrder[i];

                if (ExternalKernel.isContextMatch(this.context)) {
                  if (!ExternalKernel.isSupported) {
                    throw new Error("Kernel type ".concat(ExternalKernel.name, " not supported"));
                  }

                  Kernel = ExternalKernel;
                  break;
                }
              }

              if (Kernel === null) {
                throw new Error('unknown Context');
              }
            } else if (this.mode) {
              if (this.mode in internalKernels) {
                if (!validate || internalKernels[this.mode].isSupported) {
                  Kernel = internalKernels[this.mode];
                }
              } else if (this.mode === 'gpu') {
                for (var _i36 = 0; _i36 < kernelOrder.length; _i36++) {
                  if (kernelOrder[_i36].isSupported) {
                    Kernel = kernelOrder[_i36];
                    break;
                  }
                }
              } else if (this.mode === 'cpu') {
                Kernel = CPUKernel;
              }

              if (!Kernel) {
                throw new Error("A requested mode of \"".concat(this.mode, "\" and is not supported"));
              }
            } else {
              for (var _i37 = 0; _i37 < kernelOrder.length; _i37++) {
                if (kernelOrder[_i37].isSupported) {
                  Kernel = kernelOrder[_i37];
                  break;
                }
              }

              if (!Kernel) {
                Kernel = CPUKernel;
              }
            }

            if (!this.mode) {
              this.mode = Kernel.mode;
            }

            this.Kernel = Kernel;
          }
        }, {
          key: "createKernel",
          value: function createKernel(source, settings) {
            if (typeof source === 'undefined') {
              throw new Error('Missing source parameter');
            }

            if (typeof source !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {
              throw new Error('source parameter not a function');
            }

            var kernels = this.kernels;

            if (this.mode === 'dev') {
              var devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));
              kernels.push(devKernel);
              return devKernel;
            }

            source = typeof source === 'function' ? source.toString() : source;
            var switchableKernels = {};
            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};

            if (settings && typeof settings.argumentTypes === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            function onRequestFallback(args) {
              console.warn('Falling back to CPU');
              var fallbackKernel = new CPUKernel(source, {
                argumentTypes: kernelRun.argumentTypes,
                constantTypes: kernelRun.constantTypes,
                graphical: kernelRun.graphical,
                loopMaxIterations: kernelRun.loopMaxIterations,
                constants: kernelRun.constants,
                dynamicOutput: kernelRun.dynamicOutput,
                dynamicArgument: kernelRun.dynamicArguments,
                output: kernelRun.output,
                precision: kernelRun.precision,
                pipeline: kernelRun.pipeline,
                immutable: kernelRun.immutable,
                optimizeFloatMemory: kernelRun.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,
                functions: kernelRun.functions,
                nativeFunctions: kernelRun.nativeFunctions,
                injectedNative: kernelRun.injectedNative,
                subKernels: kernelRun.subKernels,
                strictIntegers: kernelRun.strictIntegers,
                debug: kernelRun.debug
              });
              fallbackKernel.build.apply(fallbackKernel, args);
              var result = fallbackKernel.run.apply(fallbackKernel, args);
              kernelRun.replaceKernel(fallbackKernel);
              return result;
            }

            function onRequestSwitchKernel(reasons, args, _kernel) {
              if (_kernel.debug) {
                console.warn('Switching kernels');
              }

              var newOutput = null;

              if (_kernel.signature && !switchableKernels[_kernel.signature]) {
                switchableKernels[_kernel.signature] = _kernel;
              }

              if (_kernel.dynamicOutput) {
                for (var i = reasons.length - 1; i >= 0; i--) {
                  var reason = reasons[i];

                  if (reason.type === 'outputPrecisionMismatch') {
                    newOutput = reason.needed;
                  }
                }
              }

              var Constructor = _kernel.constructor;
              var argumentTypes = Constructor.getArgumentTypes(_kernel, args);
              var signature = Constructor.getSignature(_kernel, argumentTypes);
              var existingKernel = switchableKernels[signature];

              if (existingKernel) {
                existingKernel.onActivate(_kernel);
                return existingKernel;
              }

              var newKernel = switchableKernels[signature] = new Constructor(source, {
                argumentTypes: argumentTypes,
                constantTypes: _kernel.constantTypes,
                graphical: _kernel.graphical,
                loopMaxIterations: _kernel.loopMaxIterations,
                constants: _kernel.constants,
                dynamicOutput: _kernel.dynamicOutput,
                dynamicArgument: _kernel.dynamicArguments,
                context: _kernel.context,
                canvas: _kernel.canvas,
                output: newOutput || _kernel.output,
                precision: _kernel.precision,
                pipeline: _kernel.pipeline,
                immutable: _kernel.immutable,
                optimizeFloatMemory: _kernel.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: _kernel.fixIntegerDivisionAccuracy,
                functions: _kernel.functions,
                nativeFunctions: _kernel.nativeFunctions,
                injectedNative: _kernel.injectedNative,
                subKernels: _kernel.subKernels,
                strictIntegers: _kernel.strictIntegers,
                debug: _kernel.debug,
                gpu: _kernel.gpu,
                validate: validate,
                returnType: _kernel.returnType,
                tactic: _kernel.tactic,
                onRequestFallback: onRequestFallback,
                onRequestSwitchKernel: onRequestSwitchKernel,
                texture: _kernel.texture,
                mappedTextures: _kernel.mappedTextures,
                drawBuffersMap: _kernel.drawBuffersMap
              });
              newKernel.build.apply(newKernel, args);
              kernelRun.replaceKernel(newKernel);
              kernels.push(newKernel);
              return newKernel;
            }

            var mergedSettings = Object.assign({
              context: this.context,
              canvas: this.canvas,
              functions: this.functions,
              nativeFunctions: this.nativeFunctions,
              injectedNative: this.injectedNative,
              gpu: this,
              validate: validate,
              onRequestFallback: onRequestFallback,
              onRequestSwitchKernel: onRequestSwitchKernel
            }, settingsCopy);
            var kernel = new this.Kernel(source, mergedSettings);
            var kernelRun = kernelRunShortcut(kernel);

            if (!this.canvas) {
              this.canvas = kernel.canvas;
            }

            if (!this.context) {
              this.context = kernel.context;
            }

            kernels.push(kernel);
            return kernelRun;
          }
        }, {
          key: "createKernelMap",
          value: function createKernelMap() {
            var fn;
            var settings;
            var argument2Type = typeof arguments[arguments.length - 2];

            if (argument2Type === 'function' || argument2Type === 'string') {
              fn = arguments[arguments.length - 2];
              settings = arguments[arguments.length - 1];
            } else {
              fn = arguments[arguments.length - 1];
            }

            if (this.mode !== 'dev') {
              if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {
                if (this.mode && kernelTypes.indexOf(this.mode) < 0) {
                  throw new Error("kernelMap not supported on ".concat(this.Kernel.name));
                }
              }
            }

            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);

            if (settings && typeof settings.argumentTypes === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            if (Array.isArray(arguments[0])) {
              settingsCopy.subKernels = [];
              var functions = arguments[0];

              for (var i = 0; i < functions.length; i++) {
                var source = functions[i].toString();

                var _name14 = utils.getFunctionNameFromString(source);

                settingsCopy.subKernels.push({
                  name: _name14,
                  source: source,
                  property: i
                });
              }
            } else {
              settingsCopy.subKernels = [];
              var _functions = arguments[0];

              for (var p in _functions) {
                if (!_functions.hasOwnProperty(p)) continue;

                var _source = _functions[p].toString();

                var _name15 = utils.getFunctionNameFromString(_source);

                settingsCopy.subKernels.push({
                  name: _name15 || p,
                  source: _source,
                  property: p
                });
              }
            }

            return this.createKernel(fn, settingsCopy);
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            var firstKernel = arguments[0];
            var combinedKernel = arguments[arguments.length - 1];
            if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;
            var canvas = arguments[0].canvas;
            var context = arguments[0].context;
            var max = arguments.length - 1;

            for (var i = 0; i < max; i++) {
              arguments[i].setCanvas(canvas).setContext(context).setPipeline(true);
            }

            return function () {
              var texture = combinedKernel.apply(this, arguments);

              if (texture.toArray) {
                return texture.toArray();
              }

              return texture;
            };
          }
        }, {
          key: "setFunctions",
          value: function setFunctions(functions) {
            this.functions = functions;
            return this;
          }
        }, {
          key: "setNativeFunctions",
          value: function setNativeFunctions(nativeFunctions) {
            this.nativeFunctions = nativeFunctions;
            return this;
          }
        }, {
          key: "addFunction",
          value: function addFunction(source, settings) {
            this.functions.push({
              source: source,
              settings: settings
            });
            return this;
          }
        }, {
          key: "addNativeFunction",
          value: function addNativeFunction(name, source, settings) {
            if (this.kernels.length > 0) {
              throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');
            }

            this.nativeFunctions.push(Object.assign({
              name: name,
              source: source
            }, settings));
            return this;
          }
        }, {
          key: "injectNative",
          value: function injectNative(source) {
            this.injectedNative = source;
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this48 = this;

            return new Promise(function (resolve, reject) {
              if (!_this48.kernels) {
                resolve();
              }

              setTimeout(function () {
                try {
                  for (var i = 0; i < _this48.kernels.length; i++) {
                    _this48.kernels[i].destroy(true);
                  }

                  var firstKernel = _this48.kernels[0];

                  if (firstKernel) {
                    if (firstKernel.kernel) {
                      firstKernel = firstKernel.kernel;
                    }

                    if (firstKernel.constructor.destroyContext) {
                      firstKernel.constructor.destroyContext(_this48.context);
                    }
                  }
                } catch (e) {
                  reject(e);
                }

                resolve();
              }, 0);
            });
          }
        }], [{
          key: "disableValidation",
          value: function disableValidation() {
            validate = false;
          }
        }, {
          key: "enableValidation",
          value: function enableValidation() {
            validate = true;
          }
        }, {
          key: "isGPUSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported;
            });
          }
        }, {
          key: "isKernelMapSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.kernelMap;
            });
          }
        }, {
          key: "isOffscreenCanvasSupported",
          get: function get() {
            return typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined' || typeof importScripts !== 'undefined';
          }
        }, {
          key: "isWebGLSupported",
          get: function get() {
            return WebGLKernel.isSupported;
          }
        }, {
          key: "isWebGL2Supported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isHeadlessGLSupported",
          get: function get() {
            return HeadlessGLKernel.isSupported;
          }
        }, {
          key: "isCanvasSupported",
          get: function get() {
            return typeof HTMLCanvasElement !== 'undefined';
          }
        }, {
          key: "isGPUHTMLImageArraySupported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isSinglePrecisionSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat;
            });
          }
        }]);

        return GPU;
      }();

      function upgradeDeprecatedCreateKernelSettings(settings) {
        if (!settings) {
          return {};
        }

        var upgradedSettings = Object.assign({}, settings);

        if (settings.hasOwnProperty('floatOutput')) {
          utils.warnDeprecated('setting', 'floatOutput', 'precision');
          upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';
        }

        if (settings.hasOwnProperty('outputToTexture')) {
          utils.warnDeprecated('setting', 'outputToTexture', 'pipeline');
          upgradedSettings.pipeline = Boolean(settings.outputToTexture);
        }

        if (settings.hasOwnProperty('outputImmutable')) {
          utils.warnDeprecated('setting', 'outputImmutable', 'immutable');
          upgradedSettings.immutable = Boolean(settings.outputImmutable);
        }

        if (settings.hasOwnProperty('floatTextures')) {
          utils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');
          upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);
        }

        return upgradedSettings;
      }

      module.exports = {
        GPU: GPU,
        kernelOrder: kernelOrder,
        kernelTypes: kernelTypes
      };
    }, {
      "./backend/cpu/kernel": 8,
      "./backend/headless-gl/kernel": 34,
      "./backend/kernel": 36,
      "./backend/web-gl/kernel": 70,
      "./backend/web-gl2/kernel": 105,
      "./kernel-run-shortcut": 111,
      "./utils": 114,
      "gpu-mock.js": 4
    }],
    109: [function (require, module, exports) {
      var _require273 = require('./gpu'),
          GPU = _require273.GPU;

      var _require274 = require('./alias'),
          alias = _require274.alias;

      var _require275 = require('./utils'),
          utils = _require275.utils;

      var _require276 = require('./input'),
          Input = _require276.Input,
          input = _require276.input;

      var _require277 = require('./texture'),
          Texture = _require277.Texture;

      var _require278 = require('./backend/function-builder'),
          FunctionBuilder = _require278.FunctionBuilder;

      var _require279 = require('./backend/function-node'),
          FunctionNode = _require279.FunctionNode;

      var _require280 = require('./backend/cpu/function-node'),
          CPUFunctionNode = _require280.CPUFunctionNode;

      var _require281 = require('./backend/cpu/kernel'),
          CPUKernel = _require281.CPUKernel;

      var _require282 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require282.HeadlessGLKernel;

      var _require283 = require('./backend/web-gl/function-node'),
          WebGLFunctionNode = _require283.WebGLFunctionNode;

      var _require284 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require284.WebGLKernel;

      var _require285 = require('./backend/web-gl/kernel-value-maps'),
          webGLKernelValueMaps = _require285.kernelValueMaps;

      var _require286 = require('./backend/web-gl2/function-node'),
          WebGL2FunctionNode = _require286.WebGL2FunctionNode;

      var _require287 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require287.WebGL2Kernel;

      var _require288 = require('./backend/web-gl2/kernel-value-maps'),
          webGL2KernelValueMaps = _require288.kernelValueMaps;

      var _require289 = require('./backend/gl/kernel'),
          GLKernel = _require289.GLKernel;

      var _require290 = require('./backend/kernel'),
          Kernel = _require290.Kernel;

      var _require291 = require('./backend/function-tracer'),
          FunctionTracer = _require291.FunctionTracer;

      var mathRandom = require('./plugins/math-random-uniformly-distributed');

      module.exports = {
        alias: alias,
        CPUFunctionNode: CPUFunctionNode,
        CPUKernel: CPUKernel,
        GPU: GPU,
        FunctionBuilder: FunctionBuilder,
        FunctionNode: FunctionNode,
        HeadlessGLKernel: HeadlessGLKernel,
        Input: Input,
        input: input,
        Texture: Texture,
        utils: utils,
        WebGL2FunctionNode: WebGL2FunctionNode,
        WebGL2Kernel: WebGL2Kernel,
        webGL2KernelValueMaps: webGL2KernelValueMaps,
        WebGLFunctionNode: WebGLFunctionNode,
        WebGLKernel: WebGLKernel,
        webGLKernelValueMaps: webGLKernelValueMaps,
        GLKernel: GLKernel,
        Kernel: Kernel,
        FunctionTracer: FunctionTracer,
        plugins: {
          mathRandom: mathRandom
        }
      };
    }, {
      "./alias": 5,
      "./backend/cpu/function-node": 6,
      "./backend/cpu/kernel": 8,
      "./backend/function-builder": 9,
      "./backend/function-node": 10,
      "./backend/function-tracer": 11,
      "./backend/gl/kernel": 13,
      "./backend/headless-gl/kernel": 34,
      "./backend/kernel": 36,
      "./backend/web-gl/function-node": 38,
      "./backend/web-gl/kernel": 70,
      "./backend/web-gl/kernel-value-maps": 39,
      "./backend/web-gl2/function-node": 73,
      "./backend/web-gl2/kernel": 105,
      "./backend/web-gl2/kernel-value-maps": 74,
      "./gpu": 108,
      "./input": 110,
      "./plugins/math-random-uniformly-distributed": 112,
      "./texture": 113,
      "./utils": 114
    }],
    110: [function (require, module, exports) {
      var Input = /*#__PURE__*/function () {
        "use strict";

        function Input(value, size) {
          _classCallCheck(this, Input);

          this.value = value;

          if (Array.isArray(size)) {
            this.size = size;
          } else {
            this.size = new Int32Array(3);

            if (size.z) {
              this.size = new Int32Array([size.x, size.y, size.z]);
            } else if (size.y) {
              this.size = new Int32Array([size.x, size.y]);
            } else {
              this.size = new Int32Array([size.x]);
            }
          }

          var _this$size = _slicedToArray(this.size, 3),
              w = _this$size[0],
              h = _this$size[1],
              d = _this$size[2];

          if (d) {
            if (this.value.length !== w * h * d) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " * ").concat(d, " = ").concat(h * w * d));
            }
          } else if (h) {
            if (this.value.length !== w * h) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " = ").concat(h * w));
            }
          } else {
            if (this.value.length !== w) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w));
            }
          }
        }

        _createClass(Input, [{
          key: "toArray",
          value: function toArray() {
            var _require292 = require('./utils'),
                utils = _require292.utils;

            var _this$size2 = _slicedToArray(this.size, 3),
                w = _this$size2[0],
                h = _this$size2[1],
                d = _this$size2[2];

            if (d) {
              return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);
            } else if (h) {
              return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);
            } else {
              return this.value;
            }
          }
        }]);

        return Input;
      }();

      function input(value, size) {
        return new Input(value, size);
      }

      module.exports = {
        Input: Input,
        input: input
      };
    }, {
      "./utils": 114
    }],
    111: [function (require, module, exports) {
      var _require293 = require('./utils'),
          utils = _require293.utils;

      function kernelRunShortcut(kernel) {
        var _run = function run() {
          kernel.build.apply(kernel, arguments);

          _run = function run() {
            var result = kernel.run.apply(kernel, arguments);

            if (kernel.switchingKernels) {
              var reasons = kernel.resetSwitchingKernels();
              var newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);
              shortcut.kernel = kernel = newKernel;
              result = newKernel.run.apply(newKernel, arguments);
            }

            if (kernel.renderKernels) {
              return kernel.renderKernels();
            } else if (kernel.renderOutput) {
              return kernel.renderOutput();
            } else {
              return result;
            }
          };

          return _run.apply(kernel, arguments);
        };

        var shortcut = function shortcut() {
          return _run.apply(kernel, arguments);
        };

        shortcut.exec = function () {
          var _arguments2 = arguments,
              _this49 = this;

          return new Promise(function (accept, reject) {
            try {
              accept(_run.apply(_this49, _arguments2));
            } catch (e) {
              reject(e);
            }
          });
        };

        shortcut.replaceKernel = function (replacementKernel) {
          kernel = replacementKernel;
          bindKernelToShortcut(kernel, shortcut);
        };

        bindKernelToShortcut(kernel, shortcut);
        return shortcut;
      }

      function bindKernelToShortcut(kernel, shortcut) {
        if (shortcut.kernel) {
          shortcut.kernel = kernel;
          return;
        }

        var properties = utils.allPropertiesOf(kernel);

        var _loop3 = function _loop3(i) {
          var property = properties[i];
          if (property[0] === '_' && property[1] === '_') return "continue";

          if (typeof kernel[property] === 'function') {
            if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {
              shortcut[property] = function () {
                shortcut.kernel[property].apply(shortcut.kernel, arguments);
                return shortcut;
              };
            } else {
              shortcut[property] = function () {
                return shortcut.kernel[property].apply(shortcut.kernel, arguments);
              };
            }
          } else {
            shortcut.__defineGetter__(property, function () {
              return shortcut.kernel[property];
            });

            shortcut.__defineSetter__(property, function (value) {
              shortcut.kernel[property] = value;
            });
          }
        };

        for (var i = 0; i < properties.length; i++) {
          var _ret = _loop3(i);

          if (_ret === "continue") continue;
        }

        shortcut.kernel = kernel;
      }

      module.exports = {
        kernelRunShortcut: kernelRunShortcut
      };
    }, {
      "./utils": 114
    }],
    112: [function (require, module, exports) {
      var source = "// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}";
      var name = 'math-random-uniformly-distributed';
      var functionMatch = "Math.random()";
      var functionReplace = "nrand(vTexCoord)";
      var functionReturnType = 'Number';

      var onBeforeRun = function onBeforeRun(kernel) {
        kernel.setUniform1f('randomSeed1', Math.random());
        kernel.setUniform1f('randomSeed2', Math.random());
      };

      var plugin = {
        name: name,
        onBeforeRun: onBeforeRun,
        functionMatch: functionMatch,
        functionReplace: functionReplace,
        functionReturnType: functionReturnType,
        source: source
      };
      module.exports = plugin;
    }, {}],
    113: [function (require, module, exports) {
      var Texture = /*#__PURE__*/function () {
        "use strict";

        function Texture(settings) {
          _classCallCheck(this, Texture);

          var texture = settings.texture,
              size = settings.size,
              dimensions = settings.dimensions,
              output = settings.output,
              context = settings.context,
              _settings$type = settings.type,
              type = _settings$type === void 0 ? 'NumberTexture' : _settings$type,
              kernel = settings.kernel,
              internalFormat = settings.internalFormat,
              textureFormat = settings.textureFormat;
          if (!output) throw new Error('settings property "output" required.');
          if (!context) throw new Error('settings property "context" required.');
          if (!texture) throw new Error('settings property "texture" required.');
          if (!kernel) throw new Error('settings property "kernel" required.');
          this.texture = texture;

          if (texture._refs) {
            texture._refs++;
          } else {
            texture._refs = 1;
          }

          this.size = size;
          this.dimensions = dimensions;
          this.output = output;
          this.context = context;
          this.kernel = kernel;
          this.type = type;
          this._deleted = false;
          this.internalFormat = internalFormat;
          this.textureFormat = textureFormat;
        }

        _createClass(Texture, [{
          key: "toArray",
          value: function toArray() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "clone",
          value: function clone() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "delete",
          value: function _delete() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "clear",
          value: function clear() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }]);

        return Texture;
      }();

      module.exports = {
        Texture: Texture
      };
    }, {}],
    114: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require294 = require('./input'),
          Input = _require294.Input;

      var _require295 = require('./texture'),
          Texture = _require295.Texture;

      var FUNCTION_NAME = /function ([^(]*)/;
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      var ARGUMENT_NAMES = /([^\s,]+)/g;
      var utils = {
        systemEndianness: function systemEndianness() {
          return _systemEndianness;
        },
        getSystemEndianness: function getSystemEndianness() {
          var b = new ArrayBuffer(4);
          var a = new Uint32Array(b);
          var c = new Uint8Array(b);
          a[0] = 0xdeadbeef;
          if (c[0] === 0xef) return 'LE';
          if (c[0] === 0xde) return 'BE';
          throw new Error('unknown endianness');
        },
        isFunction: function isFunction(funcObj) {
          return typeof funcObj === 'function';
        },
        isFunctionString: function isFunctionString(fn) {
          if (typeof fn === 'string') {
            return fn.slice(0, 'function'.length).toLowerCase() === 'function';
          }

          return false;
        },
        getFunctionNameFromString: function getFunctionNameFromString(funcStr) {
          var result = FUNCTION_NAME.exec(funcStr);
          if (!result || result.length === 0) return null;
          return result[1].trim();
        },
        getFunctionBodyFromString: function getFunctionBodyFromString(funcStr) {
          return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));
        },
        getArgumentNamesFromString: function getArgumentNamesFromString(fn) {
          var fnStr = fn.replace(STRIP_COMMENTS, '');
          var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);

          if (result === null) {
            result = [];
          }

          return result;
        },
        clone: function clone(obj) {
          if (obj === null || typeof obj !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;
          var temp = obj.constructor();

          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              obj.isActiveClone = null;
              temp[key] = utils.clone(obj[key]);
              delete obj.isActiveClone;
            }
          }

          return temp;
        },
        isArray: function isArray(array) {
          return !isNaN(array.length);
        },
        getVariableType: function getVariableType(value, strictIntegers) {
          if (utils.isArray(value)) {
            if (value.length > 0 && value[0].nodeName === 'IMG') {
              return 'HTMLImageArray';
            }

            return 'Array';
          }

          switch (value.constructor) {
            case Boolean:
              return 'Boolean';

            case Number:
              if (strictIntegers && Number.isInteger(value)) {
                return 'Integer';
              }

              return 'Float';

            case Texture:
              return value.type;

            case Input:
              return 'Input';
          }

          switch (value.nodeName) {
            case 'IMG':
              return 'HTMLImage';

            case 'CANVAS':
              return 'HTMLImage';

            case 'VIDEO':
              return 'HTMLVideo';
          }

          if (value.hasOwnProperty('type')) {
            return value.type;
          }

          return 'Unknown';
        },
        getKernelTextureSize: function getKernelTextureSize(settings, dimensions) {
          var _dimensions = _slicedToArray(dimensions, 3),
              w = _dimensions[0],
              h = _dimensions[1],
              d = _dimensions[2];

          var texelCount = (w || 1) * (h || 1) * (d || 1);

          if (settings.optimizeFloatMemory && settings.precision === 'single') {
            w = texelCount = Math.ceil(texelCount / 4);
          }

          if (h > 1 && w * h === texelCount) {
            return new Int32Array([w, h]);
          }

          return utils.closestSquareDimensions(texelCount);
        },
        closestSquareDimensions: function closestSquareDimensions(length) {
          var sqrt = Math.sqrt(length);
          var high = Math.ceil(sqrt);
          var low = Math.floor(sqrt);

          while (high * low < length) {
            high--;
            low = Math.ceil(length / high);
          }

          return new Int32Array([low, Math.ceil(length / low)]);
        },
        getMemoryOptimizedFloatTextureSize: function getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {
          var totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);
          var texelCount = totalArea / bitRatio;
          return utils.closestSquareDimensions(texelCount);
        },
        getMemoryOptimizedPackedTextureSize: function getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {
          var _dimensions2 = _slicedToArray(dimensions, 3),
              w = _dimensions2[0],
              h = _dimensions2[1],
              d = _dimensions2[2];

          var totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);
          var texelCount = totalArea / (4 / bitRatio);
          return utils.closestSquareDimensions(texelCount);
        },
        roundTo: function roundTo(n, d) {
          return Math.floor((n + d - 1) / d) * d;
        },
        getDimensions: function getDimensions(x, pad) {
          var ret;

          if (utils.isArray(x)) {
            var dim = [];
            var temp = x;

            while (utils.isArray(temp)) {
              dim.push(temp.length);
              temp = temp[0];
            }

            ret = dim.reverse();
          } else if (x instanceof Texture) {
            ret = x.output;
          } else if (x instanceof Input) {
            ret = x.size;
          } else {
            throw new Error("Unknown dimensions of ".concat(x));
          }

          if (pad) {
            ret = Array.from(ret);

            while (ret.length < 3) {
              ret.push(1);
            }
          }

          return new Int32Array(ret);
        },
        flatten2dArrayTo: function flatten2dArrayTo(array, target) {
          var offset = 0;

          for (var y = 0; y < array.length; y++) {
            target.set(array[y], offset);
            offset += array[y].length;
          }
        },
        flatten3dArrayTo: function flatten3dArrayTo(array, target) {
          var offset = 0;

          for (var z = 0; z < array.length; z++) {
            for (var y = 0; y < array[z].length; y++) {
              target.set(array[z][y], offset);
              offset += array[z][y].length;
            }
          }
        },
        flatten4dArrayTo: function flatten4dArrayTo(array, target) {
          var offset = 0;

          for (var l = 0; l < array.length; l++) {
            for (var z = 0; z < array[l].length; z++) {
              for (var y = 0; y < array[l][z].length; y++) {
                target.set(array[l][z][y], offset);
                offset += array[l][z][y].length;
              }
            }
          }
        },
        flattenTo: function flattenTo(array, target) {
          if (utils.isArray(array[0])) {
            if (utils.isArray(array[0][0])) {
              if (utils.isArray(array[0][0][0])) {
                utils.flatten4dArrayTo(array, target);
              } else {
                utils.flatten3dArrayTo(array, target);
              }
            } else {
              utils.flatten2dArrayTo(array, target);
            }
          } else {
            target.set(array);
          }
        },
        splitArray: function splitArray(array, part) {
          var result = [];

          for (var i = 0; i < array.length; i += part) {
            result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));
          }

          return result;
        },
        getAstString: function getAstString(source, ast) {
          var lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
          var start = ast.loc.start;
          var end = ast.loc.end;
          var result = [];

          if (start.line === end.line) {
            result.push(lines[start.line - 1].substring(start.column, end.column));
          } else {
            result.push(lines[start.line - 1].slice(start.column));

            for (var i = start.line; i < end.line; i++) {
              result.push(lines[i]);
            }

            result.push(lines[end.line - 1].slice(0, end.column));
          }

          return result.join('\n');
        },
        allPropertiesOf: function allPropertiesOf(obj) {
          var props = [];

          do {
            props.push.apply(props, Object.getOwnPropertyNames(obj));
          } while (obj = Object.getPrototypeOf(obj));

          return props;
        },
        linesToString: function linesToString(lines) {
          if (lines.length > 0) {
            return lines.join(';\n') + ';\n';
          } else {
            return '\n';
          }
        },
        warnDeprecated: function warnDeprecated(type, oldName, newName) {
          if (newName) {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been replaced with \"").concat(newName, "\". Fixing, but please upgrade as it will soon be removed."));
          } else {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been removed. Fixing, but please upgrade as it will soon be removed."));
          }
        },
        flipPixels: function flipPixels(pixels, width, height) {
          var halfHeight = height / 2 | 0;
          var bytesPerRow = width * 4;
          var temp = new Uint8ClampedArray(width * 4);
          var result = pixels.slice(0);

          for (var y = 0; y < halfHeight; ++y) {
            var topOffset = y * bytesPerRow;
            var bottomOffset = (height - y - 1) * bytesPerRow;
            temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
            result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
            result.set(temp, bottomOffset);
          }

          return result;
        },
        erectPackedFloat: function erectPackedFloat(array, width) {
          return array.subarray(0, width);
        },
        erect2DPackedFloat: function erect2DPackedFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xStart = y * width;
            var xEnd = xStart + width;
            yResults[y] = array.subarray(xStart, xEnd);
          }

          return yResults;
        },
        erect3DPackedFloat: function erect3DPackedFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xStart = z * height * width + y * width;
              var xEnd = xStart + width;
              yResults[y] = array.subarray(xStart, xEnd);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectMemoryOptimizedFloat: function erectMemoryOptimizedFloat(array, width) {
          return array.subarray(0, width);
        },
        erectMemoryOptimized2DFloat: function erectMemoryOptimized2DFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var offset = y * width;
            yResults[y] = array.subarray(offset, offset + width);
          }

          return yResults;
        },
        erectMemoryOptimized3DFloat: function erectMemoryOptimized3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var offset = z * height * width + y * width;
              yResults[y] = array.subarray(offset, offset + width);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectFloat: function erectFloat(array, width) {
          var xResults = new Float32Array(width);
          var i = 0;

          for (var x = 0; x < width; x++) {
            xResults[x] = array[i];
            i += 4;
          }

          return xResults;
        },
        erect2DFloat: function erect2DFloat(array, width, height) {
          var yResults = new Array(height);
          var i = 0;

          for (var y = 0; y < height; y++) {
            var xResults = new Float32Array(width);

            for (var x = 0; x < width; x++) {
              xResults[x] = array[i];
              i += 4;
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DFloat: function erect3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);
          var i = 0;

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Float32Array(width);

              for (var x = 0; x < width; x++) {
                xResults[x] = array[i];
                i += 4;
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray2: function erectArray2(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 2);
          }

          return xResults;
        },
        erect2DArray2: function erect2DArray2(array, width, height) {
          var yResults = new Array(height);
          var XResultsMax = width * 4;

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * XResultsMax;
            var i = 0;

            for (var x = 0; x < XResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 2);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray2: function erect3DArray2(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 2);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray3: function erectArray3(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 3);
          }

          return xResults;
        },
        erect2DArray3: function erect2DArray3(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 3);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray3: function erect3DArray3(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 3);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray4: function erectArray4(array, width) {
          var xResults = new Array(array);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 4);
          }

          return xResults;
        },
        erect2DArray4: function erect2DArray4(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 4);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray4: function erect3DArray4(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 4);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        flattenFunctionToString: function flattenFunctionToString(source, settings) {
          var findDependency = settings.findDependency,
              thisLookup = settings.thisLookup,
              doNotDefine = settings.doNotDefine;
          var flattened = settings.flattened;

          if (!flattened) {
            flattened = settings.flattened = {};
          }

          var ast = acorn.parse(source);
          var functionDependencies = [];
          var indent = 0;

          function flatten(ast) {
            if (Array.isArray(ast)) {
              var results = [];

              for (var i = 0; i < ast.length; i++) {
                results.push(flatten(ast[i]));
              }

              return results.join('');
            }

            switch (ast.type) {
              case 'Program':
                return flatten(ast.body) + (ast.body[0].type === 'VariableDeclaration' ? ';' : '');

              case 'FunctionDeclaration':
                return "function ".concat(ast.id.name, "(").concat(ast.params.map(flatten).join(', '), ") ").concat(flatten(ast.body));

              case 'BlockStatement':
                {
                  var _result2 = [];
                  indent += 2;

                  for (var _i38 = 0; _i38 < ast.body.length; _i38++) {
                    var flat = flatten(ast.body[_i38]);

                    if (flat) {
                      _result2.push(' '.repeat(indent) + flat, ';\n');
                    }
                  }

                  indent -= 2;
                  return "{\n".concat(_result2.join(''), "}");
                }

              case 'VariableDeclaration':
                var declarations = utils.normalizeDeclarations(ast).map(flatten).filter(function (r) {
                  return r !== null;
                });

                if (declarations.length < 1) {
                  return '';
                } else {
                  return "".concat(ast.kind, " ").concat(declarations.join(','));
                }

              case 'VariableDeclarator':
                if (ast.init.object && ast.init.object.type === 'ThisExpression') {
                  var lookup = thisLookup(ast.init.property.name, true);

                  if (lookup) {
                    return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                  } else {
                    return null;
                  }
                } else {
                  return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                }

              case 'CallExpression':
                {
                  if (ast.callee.property.name === 'subarray') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.type === 'ThisExpression') {
                    functionDependencies.push(findDependency('this', ast.callee.property.name));
                    return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else if (ast.callee.object.name) {
                    var foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);

                    if (foundSource === null) {
                      return "".concat(ast.callee.object.name, ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    } else {
                      functionDependencies.push(foundSource);
                      return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    }
                  } else if (ast.callee.object.type === 'MemberExpression') {
                    return "".concat(flatten(ast.callee.object), ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else {
                    throw new Error('unknown ast.callee');
                  }
                }

              case 'ReturnStatement':
                return "return ".concat(flatten(ast.argument));

              case 'BinaryExpression':
                return "(".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right), ")");

              case 'UnaryExpression':
                if (ast.prefix) {
                  return "".concat(ast.operator, " ").concat(flatten(ast.argument));
                } else {
                  return "".concat(flatten(ast.argument), " ").concat(ast.operator);
                }

              case 'ExpressionStatement':
                return "".concat(flatten(ast.expression));

              case 'SequenceExpression':
                return "(".concat(flatten(ast.expressions), ")");

              case 'ArrowFunctionExpression':
                return "(".concat(ast.params.map(flatten).join(', '), ") => ").concat(flatten(ast.body));

              case 'Literal':
                return ast.raw;

              case 'Identifier':
                return ast.name;

              case 'MemberExpression':
                if (ast.object.type === 'ThisExpression') {
                  return thisLookup(ast.property.name);
                }

                if (ast.computed) {
                  return "".concat(flatten(ast.object), "[").concat(flatten(ast.property), "]");
                }

                return flatten(ast.object) + '.' + flatten(ast.property);

              case 'ThisExpression':
                return 'this';

              case 'NewExpression':
                return "new ".concat(flatten(ast.callee), "(").concat(ast.arguments.map(function (value) {
                  return flatten(value);
                }).join(', '), ")");

              case 'ForStatement':
                return "for (".concat(flatten(ast.init), ";").concat(flatten(ast.test), ";").concat(flatten(ast.update), ") ").concat(flatten(ast.body));

              case 'AssignmentExpression':
                return "".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right));

              case 'UpdateExpression':
                return "".concat(flatten(ast.argument)).concat(ast.operator);

              case 'IfStatement':
                return "if (".concat(flatten(ast.test), ") ").concat(flatten(ast.consequent));

              case 'ThrowStatement':
                return "throw ".concat(flatten(ast.argument));

              case 'ObjectPattern':
                return ast.properties.map(flatten).join(', ');

              case 'ArrayPattern':
                return ast.elements.map(flatten).join(', ');

              case 'DebuggerStatement':
                return 'debugger;';

              case 'ConditionalExpression':
                return "".concat(flatten(ast.test), "?").concat(flatten(ast.consequent), ":").concat(flatten(ast.alternate));

              case 'Property':
                if (ast.kind === 'init') {
                  return flatten(ast.key);
                }

            }

            throw new Error("unhandled ast.type of ".concat(ast.type));
          }

          var result = flatten(ast);

          if (functionDependencies.length > 0) {
            var flattenedFunctionDependencies = [];

            for (var i = 0; i < functionDependencies.length; i++) {
              var functionDependency = functionDependencies[i];

              if (!flattened[functionDependency]) {
                flattened[functionDependency] = true;
              }

              functionDependency ? flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + '\n') : '';
            }

            return flattenedFunctionDependencies.join('') + result;
          }

          return result;
        },
        normalizeDeclarations: function normalizeDeclarations(ast) {
          if (ast.type !== 'VariableDeclaration') throw new Error('Ast is not of type "VariableDeclaration"');
          var normalizedDeclarations = [];

          for (var declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {
            var declaration = ast.declarations[declarationIndex];

            if (declaration.id && declaration.id.type === 'ObjectPattern' && declaration.id.properties) {
              var properties = declaration.id.properties;

              for (var propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {
                var property = properties[propertyIndex];

                if (property.value.type === 'ObjectPattern' && property.value.properties) {
                  for (var subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {
                    var subProperty = property.value.properties[subPropertyIndex];

                    if (subProperty.type === 'Property') {
                      normalizedDeclarations.push({
                        type: 'VariableDeclarator',
                        id: {
                          type: 'Identifier',
                          name: subProperty.key.name
                        },
                        init: {
                          type: 'MemberExpression',
                          object: {
                            type: 'MemberExpression',
                            object: declaration.init,
                            property: {
                              type: 'Identifier',
                              name: property.key.name
                            },
                            computed: false
                          },
                          property: {
                            type: 'Identifier',
                            name: subProperty.key.name
                          },
                          computed: false
                        }
                      });
                    } else {
                      throw new Error('unexpected state');
                    }
                  }
                } else if (property.value.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: property.value && property.value.name ? property.value.name : property.key.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Identifier',
                        name: property.key.name
                      },
                      computed: false
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else if (declaration.id && declaration.id.type === 'ArrayPattern' && declaration.id.elements) {
              var elements = declaration.id.elements;

              for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {
                var element = elements[elementIndex];

                if (element.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: element.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Literal',
                        value: elementIndex,
                        raw: elementIndex.toString(),
                        start: element.start,
                        end: element.end
                      },
                      computed: true
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else {
              normalizedDeclarations.push(declaration);
            }
          }

          return normalizedDeclarations;
        },
        splitHTMLImageToRGB: function splitHTMLImageToRGB(gpu, image) {
          var rKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.r * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var gKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.g * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var bKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.b * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var aKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.a * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var result = [rKernel(image), gKernel(image), bKernel(image), aKernel(image)];
          result.rKernel = rKernel;
          result.gKernel = gKernel;
          result.bKernel = bKernel;
          result.aKernel = aKernel;
          result.gpu = gpu;
          return result;
        },
        splitRGBAToCanvases: function splitRGBAToCanvases(gpu, rgba, width, height) {
          var visualKernelR = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(pixel.r / 255, 0, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelR(rgba);
          var visualKernelG = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, pixel.g / 255, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelG(rgba);
          var visualKernelB = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, 0, pixel.b / 255, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelB(rgba);
          var visualKernelA = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(255, 255, 255, pixel.a / 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelA(rgba);
          return [visualKernelR.canvas, visualKernelG.canvas, visualKernelB.canvas, visualKernelA.canvas];
        },
        getMinifySafeName: function getMinifySafeName(fn) {
          try {
            var ast = acorn.parse("const value = ".concat(fn.toString()));
            var init = ast.body[0].declarations[0].init;
            return init.body.name || init.body.body[0].argument.name;
          } catch (e) {
            throw new Error('Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }');
          }
        },
        sanitizeName: function sanitizeName(name) {
          if (dollarSign.test(name)) {
            name = name.replace(dollarSign, 'S_S');
          }

          if (doubleUnderscore.test(name)) {
            name = name.replace(doubleUnderscore, 'U_U');
          } else if (singleUnderscore.test(name)) {
            name = name.replace(singleUnderscore, 'u_u');
          }

          return name;
        }
      };
      var dollarSign = /\$/;
      var doubleUnderscore = /__/;
      var singleUnderscore = /_/;

      var _systemEndianness = utils.getSystemEndianness();

      module.exports = {
        utils: utils
      };
    }, {
      "./input": 110,
      "./texture": 113,
      "acorn": 1
    }]
  }, {}, [107])(107);
});

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ _unsupportedIterableToArray; });

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if (false) {}

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (true) {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(12);
} else {}

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _createForOfIteratorHelper; });
/* harmony import */ var _babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = Object(_babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = o[Symbol.iterator]();
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _classCallCheck; });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _createClass; });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ _slicedToArray; });

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js + 1 modules
var unsupportedIterableToArray = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js




function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || Object(unsupportedIterableToArray["a" /* default */])(arr, i) || _nonIterableRest();
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var l = __webpack_require__(4),
    n = 60103,
    p = 60106;

exports.Fragment = 60107;
exports.StrictMode = 60108;
exports.Profiler = 60114;
var q = 60109,
    r = 60110,
    t = 60112;
exports.Suspense = 60113;
var u = 60115,
    v = 60116;

if ("function" === typeof Symbol && Symbol.for) {
  var w = Symbol.for;
  n = w("react.element");
  p = w("react.portal");
  exports.Fragment = w("react.fragment");
  exports.StrictMode = w("react.strict_mode");
  exports.Profiler = w("react.profiler");
  q = w("react.provider");
  r = w("react.context");
  t = w("react.forward_ref");
  exports.Suspense = w("react.suspense");
  u = w("react.memo");
  v = w("react.lazy");
}

var x = "function" === typeof Symbol && Symbol.iterator;

function y(a) {
  if (null === a || "object" !== typeof a) return null;
  a = x && a[x] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

function z(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  }

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

var A = {
  isMounted: function isMounted() {
    return !1;
  },
  enqueueForceUpdate: function enqueueForceUpdate() {},
  enqueueReplaceState: function enqueueReplaceState() {},
  enqueueSetState: function enqueueSetState() {}
},
    B = {};

function C(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = B;
  this.updater = c || A;
}

C.prototype.isReactComponent = {};

C.prototype.setState = function (a, b) {
  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));
  this.updater.enqueueSetState(this, a, b, "setState");
};

C.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};

function D() {}

D.prototype = C.prototype;

function E(a, b, c) {
  this.props = a;
  this.context = b;
  this.refs = B;
  this.updater = c || A;
}

var F = E.prototype = new D();
F.constructor = E;
l(F, C.prototype);
F.isPureReactComponent = !0;
var G = {
  current: null
},
    H = Object.prototype.hasOwnProperty,
    I = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function J(a, b, c) {
  var e,
      d = {},
      k = null,
      h = null;
  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) {
    H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
  }
  var g = arguments.length - 2;
  if (1 === g) d.children = c;else if (1 < g) {
    for (var f = Array(g), m = 0; m < g; m++) {
      f[m] = arguments[m + 2];
    }

    d.children = f;
  }
  if (a && a.defaultProps) for (e in g = a.defaultProps, g) {
    void 0 === d[e] && (d[e] = g[e]);
  }
  return {
    $$typeof: n,
    type: a,
    key: k,
    ref: h,
    props: d,
    _owner: G.current
  };
}

function K(a, b) {
  return {
    $$typeof: n,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}

function L(a) {
  return "object" === typeof a && null !== a && a.$$typeof === n;
}

function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + a.replace(/[=:]/g, function (a) {
    return b[a];
  });
}

var M = /\/+/g;

function N(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
}

function O(a, b, c, e, d) {
  var k = typeof a;
  if ("undefined" === k || "boolean" === k) a = null;
  var h = !1;
  if (null === a) h = !0;else switch (k) {
    case "string":
    case "number":
      h = !0;
      break;

    case "object":
      switch (a.$$typeof) {
        case n:
        case p:
          h = !0;
      }

  }
  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {
    return a;
  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
  h = 0;
  e = "" === e ? "." : e + ":";
  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {
    k = a[g];
    var f = e + N(k, g);
    h += O(k, b, c, f, d);
  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) {
    k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
  } else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
  return h;
}

function P(a, b, c) {
  if (null == a) return a;
  var e = [],
      d = 0;
  O(a, e, "", "", function (a) {
    return b.call(c, a, d++);
  });
  return e;
}

function Q(a) {
  if (-1 === a._status) {
    var b = a._result;
    b = b();
    a._status = 0;
    a._result = b;
    b.then(function (b) {
      0 === a._status && (b = b.default, a._status = 1, a._result = b);
    }, function (b) {
      0 === a._status && (a._status = 2, a._result = b);
    });
  }

  if (1 === a._status) return a._result;
  throw a._result;
}

var R = {
  current: null
};

function S() {
  var a = R.current;
  if (null === a) throw Error(z(321));
  return a;
}

var T = {
  ReactCurrentDispatcher: R,
  ReactCurrentBatchConfig: {
    transition: 0
  },
  ReactCurrentOwner: G,
  IsSomeRendererActing: {
    current: !1
  },
  assign: l
};
exports.Children = {
  map: P,
  forEach: function forEach(a, b, c) {
    P(a, function () {
      b.apply(this, arguments);
    }, c);
  },
  count: function count(a) {
    var b = 0;
    P(a, function () {
      b++;
    });
    return b;
  },
  toArray: function toArray(a) {
    return P(a, function (a) {
      return a;
    }) || [];
  },
  only: function only(a) {
    if (!L(a)) throw Error(z(143));
    return a;
  }
};
exports.Component = C;
exports.PureComponent = E;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;

exports.cloneElement = function (a, b, c) {
  if (null === a || void 0 === a) throw Error(z(267, a));
  var e = l({}, a.props),
      d = a.key,
      k = a.ref,
      h = a._owner;

  if (null != b) {
    void 0 !== b.ref && (k = b.ref, h = G.current);
    void 0 !== b.key && (d = "" + b.key);
    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

    for (f in b) {
      H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
  }

  var f = arguments.length - 2;
  if (1 === f) e.children = c;else if (1 < f) {
    g = Array(f);

    for (var m = 0; m < f; m++) {
      g[m] = arguments[m + 2];
    }

    e.children = g;
  }
  return {
    $$typeof: n,
    type: a.type,
    key: d,
    ref: k,
    props: e,
    _owner: h
  };
};

exports.createContext = function (a, b) {
  void 0 === b && (b = null);
  a = {
    $$typeof: r,
    _calculateChangedBits: b,
    _currentValue: a,
    _currentValue2: a,
    _threadCount: 0,
    Provider: null,
    Consumer: null
  };
  a.Provider = {
    $$typeof: q,
    _context: a
  };
  return a.Consumer = a;
};

exports.createElement = J;

exports.createFactory = function (a) {
  var b = J.bind(null, a);
  b.type = a;
  return b;
};

exports.createRef = function () {
  return {
    current: null
  };
};

exports.forwardRef = function (a) {
  return {
    $$typeof: t,
    render: a
  };
};

exports.isValidElement = L;

exports.lazy = function (a) {
  return {
    $$typeof: v,
    _payload: {
      _status: -1,
      _result: a
    },
    _init: Q
  };
};

exports.memo = function (a, b) {
  return {
    $$typeof: u,
    type: a,
    compare: void 0 === b ? null : b
  };
};

exports.useCallback = function (a, b) {
  return S().useCallback(a, b);
};

exports.useContext = function (a, b) {
  return S().useContext(a, b);
};

exports.useDebugValue = function () {};

exports.useEffect = function (a, b) {
  return S().useEffect(a, b);
};

exports.useImperativeHandle = function (a, b, c) {
  return S().useImperativeHandle(a, b, c);
};

exports.useLayoutEffect = function (a, b) {
  return S().useLayoutEffect(a, b);
};

exports.useMemo = function (a, b) {
  return S().useMemo(a, b);
};

exports.useReducer = function (a, b, c) {
  return S().useReducer(a, b, c);
};

exports.useRef = function (a) {
  return S().useRef(a);
};

exports.useState = function (a) {
  return S().useState(a);
};

exports.version = "17.0.2";

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__(0),
    m = __webpack_require__(4),
    r = __webpack_require__(13);

function y(a) {
  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) {
    b += "&args[]=" + encodeURIComponent(arguments[c]);
  }

  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}

if (!aa) throw Error(y(227));
var ba = new Set(),
    ca = {};

function da(a, b) {
  ea(a, b);
  ea(a + "Capture", b);
}

function ea(a, b) {
  ca[a] = b;

  for (a = 0; a < b.length; a++) {
    ba.add(b[a]);
  }
}

var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
    ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    ia = Object.prototype.hasOwnProperty,
    ja = {},
    ka = {};

function la(a) {
  if (ia.call(ka, a)) return !0;
  if (ia.call(ja, a)) return !1;
  if (ha.test(a)) return ka[a] = !0;
  ja[a] = !0;
  return !1;
}

function ma(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;

  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;

    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;

    default:
      return !1;
  }
}

function na(a, b, c, d) {
  if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;

    case 4:
      return !1 === b;

    case 5:
      return isNaN(b);

    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}

function B(a, b, c, d, e, f, g) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
  this.sanitizeURL = f;
  this.removeEmptyString = g;
}

var D = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  D[a] = new B(a, 0, !1, a, null, !1, !1);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  D[b] = new B(b, 1, !1, a[1], null, !1, !1);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  D[a] = new B(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  D[a] = new B(a, 3, !0, a, null, !1, !1);
});
["capture", "download"].forEach(function (a) {
  D[a] = new B(a, 4, !1, a, null, !1, !1);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  D[a] = new B(a, 6, !1, a, null, !1, !1);
});
["rowSpan", "start"].forEach(function (a) {
  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var oa = /[\-:]([a-z])/g;

function pa(a) {
  return a[1].toUpperCase();
}

"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(oa, pa);
  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
["tabIndex", "crossOrigin"].forEach(function (a) {
  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
["src", "href", "action", "formAction"].forEach(function (a) {
  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
});

function qa(a, b, c, d) {
  var e = D.hasOwnProperty(b) ? D[b] : null;
  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
  f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}

var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    sa = 60103,
    ta = 60106,
    ua = 60107,
    wa = 60108,
    xa = 60114,
    ya = 60109,
    za = 60110,
    Aa = 60112,
    Ba = 60113,
    Ca = 60120,
    Da = 60115,
    Ea = 60116,
    Fa = 60121,
    Ga = 60128,
    Ha = 60129,
    Ia = 60130,
    Ja = 60131;

if ("function" === typeof Symbol && Symbol.for) {
  var E = Symbol.for;
  sa = E("react.element");
  ta = E("react.portal");
  ua = E("react.fragment");
  wa = E("react.strict_mode");
  xa = E("react.profiler");
  ya = E("react.provider");
  za = E("react.context");
  Aa = E("react.forward_ref");
  Ba = E("react.suspense");
  Ca = E("react.suspense_list");
  Da = E("react.memo");
  Ea = E("react.lazy");
  Fa = E("react.block");
  E("react.scope");
  Ga = E("react.opaque.id");
  Ha = E("react.debug_trace_mode");
  Ia = E("react.offscreen");
  Ja = E("react.legacy_hidden");
}

var Ka = "function" === typeof Symbol && Symbol.iterator;

function La(a) {
  if (null === a || "object" !== typeof a) return null;
  a = Ka && a[Ka] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

var Ma;

function Na(a) {
  if (void 0 === Ma) try {
    throw Error();
  } catch (c) {
    var b = c.stack.trim().match(/\n( *(at )?)/);
    Ma = b && b[1] || "";
  }
  return "\n" + Ma + a;
}

var Oa = !1;

function Pa(a, b) {
  if (!a || Oa) return "";
  Oa = !0;
  var c = Error.prepareStackTrace;
  Error.prepareStackTrace = void 0;

  try {
    if (b) {
      if (b = function b() {
        throw Error();
      }, Object.defineProperty(b.prototype, "props", {
        set: function set() {
          throw Error();
        }
      }), "object" === typeof Reflect && Reflect.construct) {
        try {
          Reflect.construct(b, []);
        } catch (k) {
          var d = k;
        }

        Reflect.construct(a, [], b);
      } else {
        try {
          b.call();
        } catch (k) {
          d = k;
        }

        a.call(b.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (k) {
        d = k;
      }

      a();
    }
  } catch (k) {
    if (k && d && "string" === typeof k.stack) {
      for (var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) {
        h--;
      }

      for (; 1 <= g && 0 <= h; g--, h--) {
        if (e[g] !== f[h]) {
          if (1 !== g || 1 !== h) {
            do {
              if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at ");
            } while (1 <= g && 0 <= h);
          }

          break;
        }
      }
    }
  } finally {
    Oa = !1, Error.prepareStackTrace = c;
  }

  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
}

function Qa(a) {
  switch (a.tag) {
    case 5:
      return Na(a.type);

    case 16:
      return Na("Lazy");

    case 13:
      return Na("Suspense");

    case 19:
      return Na("SuspenseList");

    case 0:
    case 2:
    case 15:
      return a = Pa(a.type, !1), a;

    case 11:
      return a = Pa(a.type.render, !1), a;

    case 22:
      return a = Pa(a.type._render, !1), a;

    case 1:
      return a = Pa(a.type, !0), a;

    default:
      return "";
  }
}

function Ra(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;

  switch (a) {
    case ua:
      return "Fragment";

    case ta:
      return "Portal";

    case xa:
      return "Profiler";

    case wa:
      return "StrictMode";

    case Ba:
      return "Suspense";

    case Ca:
      return "SuspenseList";
  }

  if ("object" === typeof a) switch (a.$$typeof) {
    case za:
      return (a.displayName || "Context") + ".Consumer";

    case ya:
      return (a._context.displayName || "Context") + ".Provider";

    case Aa:
      var b = a.render;
      b = b.displayName || b.name || "";
      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

    case Da:
      return Ra(a.type);

    case Fa:
      return Ra(a._render);

    case Ea:
      b = a._payload;
      a = a._init;

      try {
        return Ra(a(b));
      } catch (c) {}

  }
  return null;
}

function Sa(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a;

    default:
      return "";
  }
}

function Ta(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}

function Ua(a) {
  var b = Ta(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];

  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function get() {
        return e.call(this);
      },
      set: function set(a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function getValue() {
        return d;
      },
      setValue: function setValue(a) {
        d = "" + a;
      },
      stopTracking: function stopTracking() {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}

function Va(a) {
  a._valueTracker || (a._valueTracker = Ua(a));
}

function Wa(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}

function Xa(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;

  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}

function Ya(a, b) {
  var c = b.checked;
  return m({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}

function Za(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;
  c = Sa(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}

function $a(a, b) {
  b = b.checked;
  null != b && qa(a, "checked", b, !1);
}

function ab(a, b) {
  $a(a, b);
  var c = Sa(b.value),
      d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}

function cb(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }

  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}

function bb(a, b, c) {
  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}

function db(a) {
  var b = "";
  aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });
  return b;
}

function eb(a, b) {
  a = m({
    children: void 0
  }, b);
  if (b = db(b.children)) a.children = b;
  return a;
}

function fb(a, b, c, d) {
  a = a.options;

  if (b) {
    b = {};

    for (var e = 0; e < c.length; e++) {
      b["$" + c[e]] = !0;
    }

    for (c = 0; c < a.length; c++) {
      e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    }
  } else {
    c = "" + Sa(c);
    b = null;

    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }

      null !== b || a[e].disabled || (b = a[e]);
    }

    null !== b && (b.selected = !0);
  }
}

function gb(a, b) {
  if (null != b.dangerouslySetInnerHTML) throw Error(y(91));
  return m({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}

function hb(a, b) {
  var c = b.value;

  if (null == c) {
    c = b.children;
    b = b.defaultValue;

    if (null != c) {
      if (null != b) throw Error(y(92));

      if (Array.isArray(c)) {
        if (!(1 >= c.length)) throw Error(y(93));
        c = c[0];
      }

      b = c;
    }

    null == b && (b = "");
    c = b;
  }

  a._wrapperState = {
    initialValue: Sa(c)
  };
}

function ib(a, b) {
  var c = Sa(b.value),
      d = Sa(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}

function jb(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}

var kb = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg"
};

function lb(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";

    case "math":
      return "http://www.w3.org/1998/Math/MathML";

    default:
      return "http://www.w3.org/1999/xhtml";
  }
}

function mb(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}

var nb,
    ob = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {
    nb = nb || document.createElement("div");
    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";

    for (b = nb.firstChild; a.firstChild;) {
      a.removeChild(a.firstChild);
    }

    for (; b.firstChild;) {
      a.appendChild(b.firstChild);
    }
  }
});

function pb(a, b) {
  if (b) {
    var c = a.firstChild;

    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }

  a.textContent = b;
}

var qb = {
  animationIterationCount: !0,
  borderImageOutset: !0,
  borderImageSlice: !0,
  borderImageWidth: !0,
  boxFlex: !0,
  boxFlexGroup: !0,
  boxOrdinalGroup: !0,
  columnCount: !0,
  columns: !0,
  flex: !0,
  flexGrow: !0,
  flexPositive: !0,
  flexShrink: !0,
  flexNegative: !0,
  flexOrder: !0,
  gridArea: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowSpan: !0,
  gridRowStart: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnSpan: !0,
  gridColumnStart: !0,
  fontWeight: !0,
  lineClamp: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  tabSize: !0,
  widows: !0,
  zIndex: !0,
  zoom: !0,
  fillOpacity: !0,
  floodOpacity: !0,
  stopOpacity: !0,
  strokeDasharray: !0,
  strokeDashoffset: !0,
  strokeMiterlimit: !0,
  strokeOpacity: !0,
  strokeWidth: !0
},
    rb = ["Webkit", "ms", "Moz", "O"];
Object.keys(qb).forEach(function (a) {
  rb.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    qb[b] = qb[a];
  });
});

function sb(a, b, c) {
  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
}

function tb(a, b) {
  a = a.style;

  for (var c in b) {
    if (b.hasOwnProperty(c)) {
      var d = 0 === c.indexOf("--"),
          e = sb(c, b[c], d);
      "float" === c && (c = "cssFloat");
      d ? a.setProperty(c, e) : a[c] = e;
    }
  }
}

var ub = m({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});

function vb(a, b) {
  if (b) {
    if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));

    if (null != b.dangerouslySetInnerHTML) {
      if (null != b.children) throw Error(y(60));
      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));
    }

    if (null != b.style && "object" !== typeof b.style) throw Error(y(62));
  }
}

function wb(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;

  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;

    default:
      return !0;
  }
}

function xb(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}

var yb = null,
    zb = null,
    Ab = null;

function Bb(a) {
  if (a = Cb(a)) {
    if ("function" !== typeof yb) throw Error(y(280));
    var b = a.stateNode;
    b && (b = Db(b), yb(a.stateNode, a.type, b));
  }
}

function Eb(a) {
  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
}

function Fb() {
  if (zb) {
    var a = zb,
        b = Ab;
    Ab = zb = null;
    Bb(a);
    if (b) for (a = 0; a < b.length; a++) {
      Bb(b[a]);
    }
  }
}

function Gb(a, b) {
  return a(b);
}

function Hb(a, b, c, d, e) {
  return a(b, c, d, e);
}

function Ib() {}

var Jb = Gb,
    Kb = !1,
    Lb = !1;

function Mb() {
  if (null !== zb || null !== Ab) Ib(), Fb();
}

function Nb(a, b, c) {
  if (Lb) return a(b, c);
  Lb = !0;

  try {
    return Jb(a, b, c);
  } finally {
    Lb = !1, Mb();
  }
}

function Ob(a, b) {
  var c = a.stateNode;
  if (null === c) return null;
  var d = Db(c);
  if (null === d) return null;
  c = d[b];

  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
    case "onMouseEnter":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;

    default:
      a = !1;
  }

  if (a) return null;
  if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));
  return c;
}

var Pb = !1;
if (fa) try {
  var Qb = {};
  Object.defineProperty(Qb, "passive", {
    get: function get() {
      Pb = !0;
    }
  });
  window.addEventListener("test", Qb, Qb);
  window.removeEventListener("test", Qb, Qb);
} catch (a) {
  Pb = !1;
}

function Rb(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);

  try {
    b.apply(c, l);
  } catch (n) {
    this.onError(n);
  }
}

var Sb = !1,
    Tb = null,
    Ub = !1,
    Vb = null,
    Wb = {
  onError: function onError(a) {
    Sb = !0;
    Tb = a;
  }
};

function Xb(a, b, c, d, e, f, g, h, k) {
  Sb = !1;
  Tb = null;
  Rb.apply(Wb, arguments);
}

function Yb(a, b, c, d, e, f, g, h, k) {
  Xb.apply(this, arguments);

  if (Sb) {
    if (Sb) {
      var l = Tb;
      Sb = !1;
      Tb = null;
    } else throw Error(y(198));

    Ub || (Ub = !0, Vb = l);
  }
}

function Zb(a) {
  var b = a,
      c = a;
  if (a.alternate) for (; b.return;) {
    b = b.return;
  } else {
    a = b;

    do {
      b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return;
    } while (a);
  }
  return 3 === b.tag ? c : null;
}

function $b(a) {
  if (13 === a.tag) {
    var b = a.memoizedState;
    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
    if (null !== b) return b.dehydrated;
  }

  return null;
}

function ac(a) {
  if (Zb(a) !== a) throw Error(y(188));
}

function bc(a) {
  var b = a.alternate;

  if (!b) {
    b = Zb(a);
    if (null === b) throw Error(y(188));
    return b !== a ? null : a;
  }

  for (var c = a, d = b;;) {
    var e = c.return;
    if (null === e) break;
    var f = e.alternate;

    if (null === f) {
      d = e.return;

      if (null !== d) {
        c = d;
        continue;
      }

      break;
    }

    if (e.child === f.child) {
      for (f = e.child; f;) {
        if (f === c) return ac(e), a;
        if (f === d) return ac(e), b;
        f = f.sibling;
      }

      throw Error(y(188));
    }

    if (c.return !== d.return) c = e, d = f;else {
      for (var g = !1, h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }

        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }

        h = h.sibling;
      }

      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }

          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }

          h = h.sibling;
        }

        if (!g) throw Error(y(189));
      }
    }
    if (c.alternate !== d) throw Error(y(190));
  }

  if (3 !== c.tag) throw Error(y(188));
  return c.stateNode.current === c ? a : b;
}

function cc(a) {
  a = bc(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;
        b = b.return;
      }

      b.sibling.return = b.return;
      b = b.sibling;
    }
  }

  return null;
}

function dc(a, b) {
  for (var c = a.alternate; null !== b;) {
    if (b === a || b === c) return !0;
    b = b.return;
  }

  return !1;
}

var ec,
    fc,
    gc,
    hc,
    ic = !1,
    jc = [],
    kc = null,
    lc = null,
    mc = null,
    nc = new Map(),
    oc = new Map(),
    pc = [],
    qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");

function rc(a, b, c, d, e) {
  return {
    blockedOn: a,
    domEventName: b,
    eventSystemFlags: c | 16,
    nativeEvent: e,
    targetContainers: [d]
  };
}

function sc(a, b) {
  switch (a) {
    case "focusin":
    case "focusout":
      kc = null;
      break;

    case "dragenter":
    case "dragleave":
      lc = null;
      break;

    case "mouseover":
    case "mouseout":
      mc = null;
      break;

    case "pointerover":
    case "pointerout":
      nc.delete(b.pointerId);
      break;

    case "gotpointercapture":
    case "lostpointercapture":
      oc.delete(b.pointerId);
  }
}

function tc(a, b, c, d, e, f) {
  if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;
  a.eventSystemFlags |= d;
  b = a.targetContainers;
  null !== e && -1 === b.indexOf(e) && b.push(e);
  return a;
}

function uc(a, b, c, d, e) {
  switch (b) {
    case "focusin":
      return kc = tc(kc, a, b, c, d, e), !0;

    case "dragenter":
      return lc = tc(lc, a, b, c, d, e), !0;

    case "mouseover":
      return mc = tc(mc, a, b, c, d, e), !0;

    case "pointerover":
      var f = e.pointerId;
      nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));
      return !0;

    case "gotpointercapture":
      return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
  }

  return !1;
}

function vc(a) {
  var b = wc(a.target);

  if (null !== b) {
    var c = Zb(b);
    if (null !== c) if (b = c.tag, 13 === b) {
      if (b = $b(c), null !== b) {
        a.blockedOn = b;
        hc(a.lanePriority, function () {
          r.unstable_runWithPriority(a.priority, function () {
            gc(c);
          });
        });
        return;
      }
    } else if (3 === b && c.stateNode.hydrate) {
      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
      return;
    }
  }

  a.blockedOn = null;
}

function xc(a) {
  if (null !== a.blockedOn) return !1;

  for (var b = a.targetContainers; 0 < b.length;) {
    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
    if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;
    b.shift();
  }

  return !0;
}

function zc(a, b, c) {
  xc(a) && c.delete(b);
}

function Ac() {
  for (ic = !1; 0 < jc.length;) {
    var a = jc[0];

    if (null !== a.blockedOn) {
      a = Cb(a.blockedOn);
      null !== a && ec(a);
      break;
    }

    for (var b = a.targetContainers; 0 < b.length;) {
      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);

      if (null !== c) {
        a.blockedOn = c;
        break;
      }

      b.shift();
    }

    null === a.blockedOn && jc.shift();
  }

  null !== kc && xc(kc) && (kc = null);
  null !== lc && xc(lc) && (lc = null);
  null !== mc && xc(mc) && (mc = null);
  nc.forEach(zc);
  oc.forEach(zc);
}

function Bc(a, b) {
  a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
}

function Cc(a) {
  function b(b) {
    return Bc(b, a);
  }

  if (0 < jc.length) {
    Bc(jc[0], a);

    for (var c = 1; c < jc.length; c++) {
      var d = jc[c];
      d.blockedOn === a && (d.blockedOn = null);
    }
  }

  null !== kc && Bc(kc, a);
  null !== lc && Bc(lc, a);
  null !== mc && Bc(mc, a);
  nc.forEach(b);
  oc.forEach(b);

  for (c = 0; c < pc.length; c++) {
    d = pc[c], d.blockedOn === a && (d.blockedOn = null);
  }

  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) {
    vc(c), null === c.blockedOn && pc.shift();
  }
}

function Dc(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}

var Ec = {
  animationend: Dc("Animation", "AnimationEnd"),
  animationiteration: Dc("Animation", "AnimationIteration"),
  animationstart: Dc("Animation", "AnimationStart"),
  transitionend: Dc("Transition", "TransitionEnd")
},
    Fc = {},
    Gc = {};
fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);

function Hc(a) {
  if (Fc[a]) return Fc[a];
  if (!Ec[a]) return a;
  var b = Ec[a],
      c;

  for (c in b) {
    if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];
  }

  return a;
}

var Ic = Hc("animationend"),
    Jc = Hc("animationiteration"),
    Kc = Hc("animationstart"),
    Lc = Hc("transitionend"),
    Mc = new Map(),
    Nc = new Map(),
    Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];

function Pc(a, b) {
  for (var c = 0; c < a.length; c += 2) {
    var d = a[c],
        e = a[c + 1];
    e = "on" + (e[0].toUpperCase() + e.slice(1));
    Nc.set(d, b);
    Mc.set(d, e);
    da(e, [d]);
  }
}

var Qc = r.unstable_now;
Qc();
var F = 8;

function Rc(a) {
  if (0 !== (1 & a)) return F = 15, 1;
  if (0 !== (2 & a)) return F = 14, 2;
  if (0 !== (4 & a)) return F = 13, 4;
  var b = 24 & a;
  if (0 !== b) return F = 12, b;
  if (0 !== (a & 32)) return F = 11, 32;
  b = 192 & a;
  if (0 !== b) return F = 10, b;
  if (0 !== (a & 256)) return F = 9, 256;
  b = 3584 & a;
  if (0 !== b) return F = 8, b;
  if (0 !== (a & 4096)) return F = 7, 4096;
  b = 4186112 & a;
  if (0 !== b) return F = 6, b;
  b = 62914560 & a;
  if (0 !== b) return F = 5, b;
  if (a & 67108864) return F = 4, 67108864;
  if (0 !== (a & 134217728)) return F = 3, 134217728;
  b = 805306368 & a;
  if (0 !== b) return F = 2, b;
  if (0 !== (1073741824 & a)) return F = 1, 1073741824;
  F = 8;
  return a;
}

function Sc(a) {
  switch (a) {
    case 99:
      return 15;

    case 98:
      return 10;

    case 97:
    case 96:
      return 8;

    case 95:
      return 2;

    default:
      return 0;
  }
}

function Tc(a) {
  switch (a) {
    case 15:
    case 14:
      return 99;

    case 13:
    case 12:
    case 11:
    case 10:
      return 98;

    case 9:
    case 8:
    case 7:
    case 6:
    case 4:
    case 5:
      return 97;

    case 3:
    case 2:
    case 1:
      return 95;

    case 0:
      return 90;

    default:
      throw Error(y(358, a));
  }
}

function Uc(a, b) {
  var c = a.pendingLanes;
  if (0 === c) return F = 0;
  var d = 0,
      e = 0,
      f = a.expiredLanes,
      g = a.suspendedLanes,
      h = a.pingedLanes;
  if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {
    var k = f & ~g;
    0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));
  } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);
  if (0 === d) return 0;
  d = 31 - Vc(d);
  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;

  if (0 !== b && b !== d && 0 === (b & g)) {
    Rc(b);
    if (e <= F) return b;
    F = e;
  }

  b = a.entangledLanes;
  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) {
    c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
  }
  return d;
}

function Wc(a) {
  a = a.pendingLanes & -1073741825;
  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}

function Xc(a, b) {
  switch (a) {
    case 15:
      return 1;

    case 14:
      return 2;

    case 12:
      return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;

    case 10:
      return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;

    case 8:
      return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;

    case 2:
      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
  }

  throw Error(y(358, a));
}

function Yc(a) {
  return a & -a;
}

function Zc(a) {
  for (var b = [], c = 0; 31 > c; c++) {
    b.push(a);
  }

  return b;
}

function $c(a, b, c) {
  a.pendingLanes |= b;
  var d = b - 1;
  a.suspendedLanes &= d;
  a.pingedLanes &= d;
  a = a.eventTimes;
  b = 31 - Vc(b);
  a[b] = c;
}

var Vc = Math.clz32 ? Math.clz32 : ad,
    bd = Math.log,
    cd = Math.LN2;

function ad(a) {
  return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
}

var dd = r.unstable_UserBlockingPriority,
    ed = r.unstable_runWithPriority,
    fd = !0;

function gd(a, b, c, d) {
  Kb || Ib();
  var e = hd,
      f = Kb;
  Kb = !0;

  try {
    Hb(e, a, b, c, d);
  } finally {
    (Kb = f) || Mb();
  }
}

function id(a, b, c, d) {
  ed(dd, hd.bind(null, a, b, c, d));
}

function hd(a, b, c, d) {
  if (fd) {
    var e;
    if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {
      var f = yc(a, b, c, d);
      if (null === f) e && sc(a, d);else {
        if (e) {
          if (-1 < qc.indexOf(a)) {
            a = rc(f, a, b, c, d);
            jc.push(a);
            return;
          }

          if (uc(f, a, b, c, d)) return;
          sc(a, d);
        }

        jd(a, b, d, null, c);
      }
    }
  }
}

function yc(a, b, c, d) {
  var e = xb(d);
  e = wc(e);

  if (null !== e) {
    var f = Zb(e);
    if (null === f) e = null;else {
      var g = f.tag;

      if (13 === g) {
        e = $b(f);
        if (null !== e) return e;
        e = null;
      } else if (3 === g) {
        if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
        e = null;
      } else f !== e && (e = null);
    }
  }

  jd(a, b, d, e, c);
  return null;
}

var kd = null,
    ld = null,
    md = null;

function nd() {
  if (md) return md;
  var a,
      b = ld,
      c = b.length,
      d,
      e = "value" in kd ? kd.value : kd.textContent,
      f = e.length;

  for (a = 0; a < c && b[a] === e[a]; a++) {
    ;
  }

  var g = c - a;

  for (d = 1; d <= g && b[c - d] === e[f - d]; d++) {
    ;
  }

  return md = e.slice(a, 1 < d ? 1 - d : void 0);
}

function od(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}

function pd() {
  return !0;
}

function qd() {
  return !1;
}

function rd(a) {
  function b(b, d, e, f, g) {
    this._reactName = b;
    this._targetInst = e;
    this.type = d;
    this.nativeEvent = f;
    this.target = g;
    this.currentTarget = null;

    for (var c in a) {
      a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
    }

    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
    this.isPropagationStopped = qd;
    return this;
  }

  m(b.prototype, {
    preventDefault: function preventDefault() {
      this.defaultPrevented = !0;
      var a = this.nativeEvent;
      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
    },
    stopPropagation: function stopPropagation() {
      var a = this.nativeEvent;
      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
    },
    persist: function persist() {},
    isPersistent: pd
  });
  return b;
}

var sd = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function timeStamp(a) {
    return a.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
},
    td = rd(sd),
    ud = m({}, sd, {
  view: 0,
  detail: 0
}),
    vd = rd(ud),
    wd,
    xd,
    yd,
    Ad = m({}, ud, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: zd,
  button: 0,
  buttons: 0,
  relatedTarget: function relatedTarget(a) {
    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
  },
  movementX: function movementX(a) {
    if ("movementX" in a) return a.movementX;
    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
    return wd;
  },
  movementY: function movementY(a) {
    return "movementY" in a ? a.movementY : xd;
  }
}),
    Bd = rd(Ad),
    Cd = m({}, Ad, {
  dataTransfer: 0
}),
    Dd = rd(Cd),
    Ed = m({}, ud, {
  relatedTarget: 0
}),
    Fd = rd(Ed),
    Gd = m({}, sd, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
}),
    Hd = rd(Gd),
    Id = m({}, sd, {
  clipboardData: function clipboardData(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  }
}),
    Jd = rd(Id),
    Kd = m({}, sd, {
  data: 0
}),
    Ld = rd(Kd),
    Md = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
},
    Nd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
},
    Od = {
  Alt: "altKey",
  Control: "ctrlKey",
  Meta: "metaKey",
  Shift: "shiftKey"
};

function Pd(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
}

function zd() {
  return Pd;
}

var Qd = m({}, ud, {
  key: function key(a) {
    if (a.key) {
      var b = Md[a.key] || a.key;
      if ("Unidentified" !== b) return b;
    }

    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
  },
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: zd,
  charCode: function charCode(a) {
    return "keypress" === a.type ? od(a) : 0;
  },
  keyCode: function keyCode(a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  },
  which: function which(a) {
    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }
}),
    Rd = rd(Qd),
    Sd = m({}, Ad, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
}),
    Td = rd(Sd),
    Ud = m({}, ud, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: zd
}),
    Vd = rd(Ud),
    Wd = m({}, sd, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
}),
    Xd = rd(Wd),
    Yd = m({}, Ad, {
  deltaX: function deltaX(a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function deltaY(a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: 0,
  deltaMode: 0
}),
    Zd = rd(Yd),
    $d = [9, 13, 27, 32],
    ae = fa && "CompositionEvent" in window,
    be = null;
fa && "documentMode" in document && (be = document.documentMode);
var ce = fa && "TextEvent" in window && !be,
    de = fa && (!ae || be && 8 < be && 11 >= be),
    ee = String.fromCharCode(32),
    fe = !1;

function ge(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== $d.indexOf(b.keyCode);

    case "keydown":
      return 229 !== b.keyCode;

    case "keypress":
    case "mousedown":
    case "focusout":
      return !0;

    default:
      return !1;
  }
}

function he(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}

var ie = !1;

function je(a, b) {
  switch (a) {
    case "compositionend":
      return he(b);

    case "keypress":
      if (32 !== b.which) return null;
      fe = !0;
      return ee;

    case "textInput":
      return a = b.data, a === ee && fe ? null : a;

    default:
      return null;
  }
}

function ke(a, b) {
  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;

  switch (a) {
    case "paste":
      return null;

    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }

      return null;

    case "compositionend":
      return de && "ko" !== b.locale ? null : b.data;

    default:
      return null;
  }
}

var le = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};

function me(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
}

function ne(a, b, c, d) {
  Eb(d);
  b = oe(b, "onChange");
  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
    event: c,
    listeners: b
  }));
}

var pe = null,
    qe = null;

function re(a) {
  se(a, 0);
}

function te(a) {
  var b = ue(a);
  if (Wa(b)) return a;
}

function ve(a, b) {
  if ("change" === a) return b;
}

var we = !1;

if (fa) {
  var xe;

  if (fa) {
    var ye = ("oninput" in document);

    if (!ye) {
      var ze = document.createElement("div");
      ze.setAttribute("oninput", "return;");
      ye = "function" === typeof ze.oninput;
    }

    xe = ye;
  } else xe = !1;

  we = xe && (!document.documentMode || 9 < document.documentMode);
}

function Ae() {
  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
}

function Be(a) {
  if ("value" === a.propertyName && te(qe)) {
    var b = [];
    ne(b, qe, a, xb(a));
    a = re;
    if (Kb) a(b);else {
      Kb = !0;

      try {
        Gb(a, b);
      } finally {
        Kb = !1, Mb();
      }
    }
  }
}

function Ce(a, b, c) {
  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
}

function De(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
}

function Ee(a, b) {
  if ("click" === a) return te(b);
}

function Fe(a, b) {
  if ("input" === a || "change" === a) return te(b);
}

function Ge(a, b) {
  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}

var He = "function" === typeof Object.is ? Object.is : Ge,
    Ie = Object.prototype.hasOwnProperty;

function Je(a, b) {
  if (He(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
      d = Object.keys(b);
  if (c.length !== d.length) return !1;

  for (d = 0; d < c.length; d++) {
    if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;
  }

  return !0;
}

function Ke(a) {
  for (; a && a.firstChild;) {
    a = a.firstChild;
  }

  return a;
}

function Le(a, b) {
  var c = Ke(a);
  a = 0;

  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }

    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }

        c = c.parentNode;
      }

      c = void 0;
    }

    c = Ke(c);
  }
}

function Me(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}

function Ne() {
  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
    try {
      var c = "string" === typeof b.contentWindow.location.href;
    } catch (d) {
      c = !1;
    }

    if (c) a = b.contentWindow;else break;
    b = Xa(a.document);
  }

  return b;
}

function Oe(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}

var Pe = fa && "documentMode" in document && 11 >= document.documentMode,
    Qe = null,
    Re = null,
    Se = null,
    Te = !1;

function Ue(a, b, c) {
  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {
    start: d.selectionStart,
    end: d.selectionEnd
  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
    anchorNode: d.anchorNode,
    anchorOffset: d.anchorOffset,
    focusNode: d.focusNode,
    focusOffset: d.focusOffset
  }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
    event: b,
    listeners: d
  }), b.target = Qe)));
}

Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
Pc(Oc, 2);

for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) {
  Nc.set(Ve[We], 0);
}

ea("onMouseEnter", ["mouseout", "mouseover"]);
ea("onMouseLeave", ["mouseout", "mouseover"]);
ea("onPointerEnter", ["pointerout", "pointerover"]);
ea("onPointerLeave", ["pointerout", "pointerover"]);
da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
    Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));

function Ze(a, b, c) {
  var d = a.type || "unknown-event";
  a.currentTarget = c;
  Yb(d, b, void 0, a);
  a.currentTarget = null;
}

function se(a, b) {
  b = 0 !== (b & 4);

  for (var c = 0; c < a.length; c++) {
    var d = a[c],
        e = d.event;
    d = d.listeners;

    a: {
      var f = void 0;
      if (b) for (var g = d.length - 1; 0 <= g; g--) {
        var h = d[g],
            k = h.instance,
            l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        Ze(e, h, l);
        f = k;
      } else for (g = 0; g < d.length; g++) {
        h = d[g];
        k = h.instance;
        l = h.currentTarget;
        h = h.listener;
        if (k !== f && e.isPropagationStopped()) break a;
        Ze(e, h, l);
        f = k;
      }
    }
  }

  if (Ub) throw a = Vb, Ub = !1, Vb = null, a;
}

function G(a, b) {
  var c = $e(b),
      d = a + "__bubble";
  c.has(d) || (af(b, a, 2, !1), c.add(d));
}

var bf = "_reactListening" + Math.random().toString(36).slice(2);

function cf(a) {
  a[bf] || (a[bf] = !0, ba.forEach(function (b) {
    Ye.has(b) || df(b, !1, a, null);
    df(b, !0, a, null);
  }));
}

function df(a, b, c, d) {
  var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
      f = c;
  "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);

  if (null !== d && !b && Ye.has(a)) {
    if ("scroll" !== a) return;
    e |= 2;
    f = d;
  }

  var g = $e(f),
      h = a + "__" + (b ? "capture" : "bubble");
  g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
}

function af(a, b, c, d) {
  var e = Nc.get(b);

  switch (void 0 === e ? 2 : e) {
    case 0:
      e = gd;
      break;

    case 1:
      e = id;
      break;

    default:
      e = hd;
  }

  c = e.bind(null, b, c, a);
  e = void 0;
  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
  d ? void 0 !== e ? a.addEventListener(b, c, {
    capture: !0,
    passive: e
  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
    passive: e
  }) : a.addEventListener(b, c, !1);
}

function jd(a, b, c, d, e) {
  var f = d;
  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
    if (null === d) return;
    var g = d.tag;

    if (3 === g || 4 === g) {
      var h = d.stateNode.containerInfo;
      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
      if (4 === g) for (g = d.return; null !== g;) {
        var k = g.tag;
        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
        g = g.return;
      }

      for (; null !== h;) {
        g = wc(h);
        if (null === g) return;
        k = g.tag;

        if (5 === k || 6 === k) {
          d = f = g;
          continue a;
        }

        h = h.parentNode;
      }
    }

    d = d.return;
  }
  Nb(function () {
    var d = f,
        e = xb(c),
        g = [];

    a: {
      var h = Mc.get(a);

      if (void 0 !== h) {
        var k = td,
            x = a;

        switch (a) {
          case "keypress":
            if (0 === od(c)) break a;

          case "keydown":
          case "keyup":
            k = Rd;
            break;

          case "focusin":
            x = "focus";
            k = Fd;
            break;

          case "focusout":
            x = "blur";
            k = Fd;
            break;

          case "beforeblur":
          case "afterblur":
            k = Fd;
            break;

          case "click":
            if (2 === c.button) break a;

          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            k = Bd;
            break;

          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            k = Dd;
            break;

          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            k = Vd;
            break;

          case Ic:
          case Jc:
          case Kc:
            k = Hd;
            break;

          case Lc:
            k = Xd;
            break;

          case "scroll":
            k = vd;
            break;

          case "wheel":
            k = Zd;
            break;

          case "copy":
          case "cut":
          case "paste":
            k = Jd;
            break;

          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            k = Td;
        }

        var w = 0 !== (b & 4),
            z = !w && "scroll" === a,
            u = w ? null !== h ? h + "Capture" : null : h;
        w = [];

        for (var t = d, q; null !== t;) {
          q = t;
          var v = q.stateNode;
          5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));
          if (z) break;
          t = t.return;
        }

        0 < w.length && (h = new k(h, x, null, c, e), g.push({
          event: h,
          listeners: w
        }));
      }
    }

    if (0 === (b & 7)) {
      a: {
        h = "mouseover" === a || "pointerover" === a;
        k = "mouseout" === a || "pointerout" === a;
        if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;

        if (k || h) {
          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;

          if (k) {
            if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
          } else k = null, x = d;

          if (k !== x) {
            w = Bd;
            v = "onMouseLeave";
            u = "onMouseEnter";
            t = "mouse";
            if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";
            z = null == k ? h : ue(k);
            q = null == x ? h : ue(x);
            h = new w(v, t + "leave", k, c, e);
            h.target = z;
            h.relatedTarget = q;
            v = null;
            wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);
            z = v;
            if (k && x) b: {
              w = k;
              u = x;
              t = 0;

              for (q = w; q; q = gf(q)) {
                t++;
              }

              q = 0;

              for (v = u; v; v = gf(v)) {
                q++;
              }

              for (; 0 < t - q;) {
                w = gf(w), t--;
              }

              for (; 0 < q - t;) {
                u = gf(u), q--;
              }

              for (; t--;) {
                if (w === u || null !== u && w === u.alternate) break b;
                w = gf(w);
                u = gf(u);
              }

              w = null;
            } else w = null;
            null !== k && hf(g, h, k, w, !1);
            null !== x && null !== z && hf(g, z, x, w, !0);
          }
        }
      }

      a: {
        h = d ? ue(d) : window;
        k = h.nodeName && h.nodeName.toLowerCase();
        if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {
          if (we) J = Fe;else {
            J = De;
            var K = Ce;
          }
        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);

        if (J && (J = J(a, d))) {
          ne(g, J, c, e);
          break a;
        }

        K && K(a, h, d);
        "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
      }

      K = d ? ue(d) : window;

      switch (a) {
        case "focusin":
          if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;
          break;

        case "focusout":
          Se = Re = Qe = null;
          break;

        case "mousedown":
          Te = !0;
          break;

        case "contextmenu":
        case "mouseup":
        case "dragend":
          Te = !1;
          Ue(g, c, e);
          break;

        case "selectionchange":
          if (Pe) break;

        case "keydown":
        case "keyup":
          Ue(g, c, e);
      }

      var Q;
      if (ae) b: {
        switch (a) {
          case "compositionstart":
            var L = "onCompositionStart";
            break b;

          case "compositionend":
            L = "onCompositionEnd";
            break b;

          case "compositionupdate":
            L = "onCompositionUpdate";
            break b;
        }

        L = void 0;
      } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");
      L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({
        event: L,
        listeners: K
      }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));
      if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
        event: e,
        listeners: d
      }), e.data = Q);
    }

    se(g, b);
  });
}

function ef(a, b, c) {
  return {
    instance: a,
    listener: b,
    currentTarget: c
  };
}

function oe(a, b) {
  for (var c = b + "Capture", d = []; null !== a;) {
    var e = a,
        f = e.stateNode;
    5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));
    a = a.return;
  }

  return d;
}

function gf(a) {
  if (null === a) return null;

  do {
    a = a.return;
  } while (a && 5 !== a.tag);

  return a ? a : null;
}

function hf(a, b, c, d, e) {
  for (var f = b._reactName, g = []; null !== c && c !== d;) {
    var h = c,
        k = h.alternate,
        l = h.stateNode;
    if (null !== k && k === d) break;
    5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));
    c = c.return;
  }

  0 !== g.length && a.push({
    event: b,
    listeners: g
  });
}

function jf() {}

var kf = null,
    lf = null;

function mf(a, b) {
  switch (a) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }

  return !1;
}

function nf(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}

var of = "function" === typeof setTimeout ? setTimeout : void 0,
    pf = "function" === typeof clearTimeout ? clearTimeout : void 0;

function qf(a) {
  1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
}

function rf(a) {
  for (; null != a; a = a.nextSibling) {
    var b = a.nodeType;
    if (1 === b || 3 === b) break;
  }

  return a;
}

function sf(a) {
  a = a.previousSibling;

  for (var b = 0; a;) {
    if (8 === a.nodeType) {
      var c = a.data;

      if ("$" === c || "$!" === c || "$?" === c) {
        if (0 === b) return a;
        b--;
      } else "/$" === c && b++;
    }

    a = a.previousSibling;
  }

  return null;
}

var tf = 0;

function uf(a) {
  return {
    $$typeof: Ga,
    toString: a,
    valueOf: a
  };
}

var vf = Math.random().toString(36).slice(2),
    wf = "__reactFiber$" + vf,
    xf = "__reactProps$" + vf,
    ff = "__reactContainer$" + vf,
    yf = "__reactEvents$" + vf;

function wc(a) {
  var b = a[wf];
  if (b) return b;

  for (var c = a.parentNode; c;) {
    if (b = c[ff] || c[wf]) {
      c = b.alternate;
      if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {
        if (c = a[wf]) return c;
        a = sf(a);
      }
      return b;
    }

    a = c;
    c = a.parentNode;
  }

  return null;
}

function Cb(a) {
  a = a[wf] || a[ff];
  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}

function ue(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  throw Error(y(33));
}

function Db(a) {
  return a[xf] || null;
}

function $e(a) {
  var b = a[yf];
  void 0 === b && (b = a[yf] = new Set());
  return b;
}

var zf = [],
    Af = -1;

function Bf(a) {
  return {
    current: a
  };
}

function H(a) {
  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
}

function I(a, b) {
  Af++;
  zf[Af] = a.current;
  a.current = b;
}

var Cf = {},
    M = Bf(Cf),
    N = Bf(!1),
    Df = Cf;

function Ef(a, b) {
  var c = a.type.contextTypes;
  if (!c) return Cf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
      f;

  for (f in c) {
    e[f] = b[f];
  }

  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}

function Ff(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}

function Gf() {
  H(N);
  H(M);
}

function Hf(a, b, c) {
  if (M.current !== Cf) throw Error(y(168));
  I(M, b);
  I(N, c);
}

function If(a, b, c) {
  var d = a.stateNode;
  a = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();

  for (var e in d) {
    if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));
  }

  return m({}, c, d);
}

function Jf(a) {
  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
  Df = M.current;
  I(M, a);
  I(N, N.current);
  return !0;
}

function Kf(a, b, c) {
  var d = a.stateNode;
  if (!d) throw Error(y(169));
  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);
  I(N, c);
}

var Lf = null,
    Mf = null,
    Nf = r.unstable_runWithPriority,
    Of = r.unstable_scheduleCallback,
    Pf = r.unstable_cancelCallback,
    Qf = r.unstable_shouldYield,
    Rf = r.unstable_requestPaint,
    Sf = r.unstable_now,
    Tf = r.unstable_getCurrentPriorityLevel,
    Uf = r.unstable_ImmediatePriority,
    Vf = r.unstable_UserBlockingPriority,
    Wf = r.unstable_NormalPriority,
    Xf = r.unstable_LowPriority,
    Yf = r.unstable_IdlePriority,
    Zf = {},
    $f = void 0 !== Rf ? Rf : function () {},
    ag = null,
    bg = null,
    cg = !1,
    dg = Sf(),
    O = 1E4 > dg ? Sf : function () {
  return Sf() - dg;
};

function eg() {
  switch (Tf()) {
    case Uf:
      return 99;

    case Vf:
      return 98;

    case Wf:
      return 97;

    case Xf:
      return 96;

    case Yf:
      return 95;

    default:
      throw Error(y(332));
  }
}

function fg(a) {
  switch (a) {
    case 99:
      return Uf;

    case 98:
      return Vf;

    case 97:
      return Wf;

    case 96:
      return Xf;

    case 95:
      return Yf;

    default:
      throw Error(y(332));
  }
}

function gg(a, b) {
  a = fg(a);
  return Nf(a, b);
}

function hg(a, b, c) {
  a = fg(a);
  return Of(a, b, c);
}

function ig() {
  if (null !== bg) {
    var a = bg;
    bg = null;
    Pf(a);
  }

  jg();
}

function jg() {
  if (!cg && null !== ag) {
    cg = !0;
    var a = 0;

    try {
      var b = ag;
      gg(99, function () {
        for (; a < b.length; a++) {
          var c = b[a];

          do {
            c = c(!0);
          } while (null !== c);
        }
      });
      ag = null;
    } catch (c) {
      throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
    } finally {
      cg = !1;
    }
  }
}

var kg = ra.ReactCurrentBatchConfig;

function lg(a, b) {
  if (a && a.defaultProps) {
    b = m({}, b);
    a = a.defaultProps;

    for (var c in a) {
      void 0 === b[c] && (b[c] = a[c]);
    }

    return b;
  }

  return b;
}

var mg = Bf(null),
    ng = null,
    og = null,
    pg = null;

function qg() {
  pg = og = ng = null;
}

function rg(a) {
  var b = mg.current;
  H(mg);
  a.type._context._currentValue = b;
}

function sg(a, b) {
  for (; null !== a;) {
    var c = a.alternate;
    if ((a.childLanes & b) === b) {
      if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;
    } else a.childLanes |= b, null !== c && (c.childLanes |= b);
    a = a.return;
  }
}

function tg(a, b) {
  ng = a;
  pg = og = null;
  a = a.dependencies;
  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);
}

function vg(a, b) {
  if (pg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;
    b = {
      context: a,
      observedBits: b,
      next: null
    };

    if (null === og) {
      if (null === ng) throw Error(y(308));
      og = b;
      ng.dependencies = {
        lanes: 0,
        firstContext: b,
        responders: null
      };
    } else og = og.next = b;
  }

  return a._currentValue;
}

var wg = !1;

function xg(a) {
  a.updateQueue = {
    baseState: a.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null
    },
    effects: null
  };
}

function yg(a, b) {
  a = a.updateQueue;
  b.updateQueue === a && (b.updateQueue = {
    baseState: a.baseState,
    firstBaseUpdate: a.firstBaseUpdate,
    lastBaseUpdate: a.lastBaseUpdate,
    shared: a.shared,
    effects: a.effects
  });
}

function zg(a, b) {
  return {
    eventTime: a,
    lane: b,
    tag: 0,
    payload: null,
    callback: null,
    next: null
  };
}

function Ag(a, b) {
  a = a.updateQueue;

  if (null !== a) {
    a = a.shared;
    var c = a.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
  }
}

function Bg(a, b) {
  var c = a.updateQueue,
      d = a.alternate;

  if (null !== d && (d = d.updateQueue, c === d)) {
    var e = null,
        f = null;
    c = c.firstBaseUpdate;

    if (null !== c) {
      do {
        var g = {
          eventTime: c.eventTime,
          lane: c.lane,
          tag: c.tag,
          payload: c.payload,
          callback: c.callback,
          next: null
        };
        null === f ? e = f = g : f = f.next = g;
        c = c.next;
      } while (null !== c);

      null === f ? e = f = b : f = f.next = b;
    } else e = f = b;

    c = {
      baseState: d.baseState,
      firstBaseUpdate: e,
      lastBaseUpdate: f,
      shared: d.shared,
      effects: d.effects
    };
    a.updateQueue = c;
    return;
  }

  a = c.lastBaseUpdate;
  null === a ? c.firstBaseUpdate = b : a.next = b;
  c.lastBaseUpdate = b;
}

function Cg(a, b, c, d) {
  var e = a.updateQueue;
  wg = !1;
  var f = e.firstBaseUpdate,
      g = e.lastBaseUpdate,
      h = e.shared.pending;

  if (null !== h) {
    e.shared.pending = null;
    var k = h,
        l = k.next;
    k.next = null;
    null === g ? f = l : g.next = l;
    g = k;
    var n = a.alternate;

    if (null !== n) {
      n = n.updateQueue;
      var A = n.lastBaseUpdate;
      A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
    }
  }

  if (null !== f) {
    A = e.baseState;
    g = 0;
    n = l = k = null;

    do {
      h = f.lane;
      var p = f.eventTime;

      if ((d & h) === h) {
        null !== n && (n = n.next = {
          eventTime: p,
          lane: 0,
          tag: f.tag,
          payload: f.payload,
          callback: f.callback,
          next: null
        });

        a: {
          var C = a,
              x = f;
          h = b;
          p = c;

          switch (x.tag) {
            case 1:
              C = x.payload;

              if ("function" === typeof C) {
                A = C.call(p, A, h);
                break a;
              }

              A = C;
              break a;

            case 3:
              C.flags = C.flags & -4097 | 64;

            case 0:
              C = x.payload;
              h = "function" === typeof C ? C.call(p, A, h) : C;
              if (null === h || void 0 === h) break a;
              A = m({}, A, h);
              break a;

            case 2:
              wg = !0;
          }
        }

        null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));
      } else p = {
        eventTime: p,
        lane: h,
        tag: f.tag,
        payload: f.payload,
        callback: f.callback,
        next: null
      }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;

      f = f.next;
      if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
    } while (1);

    null === n && (k = A);
    e.baseState = k;
    e.firstBaseUpdate = l;
    e.lastBaseUpdate = n;
    Dg |= g;
    a.lanes = g;
    a.memoizedState = A;
  }
}

function Eg(a, b, c) {
  a = b.effects;
  b.effects = null;
  if (null !== a) for (b = 0; b < a.length; b++) {
    var d = a[b],
        e = d.callback;

    if (null !== e) {
      d.callback = null;
      d = c;
      if ("function" !== typeof e) throw Error(y(191, e));
      e.call(d);
    }
  }
}

var Fg = new aa.Component().refs;

function Gg(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : m({}, b, c);
  a.memoizedState = c;
  0 === a.lanes && (a.updateQueue.baseState = c);
}

var Kg = {
  isMounted: function isMounted(a) {
    return (a = a._reactInternals) ? Zb(a) === a : !1;
  },
  enqueueSetState: function enqueueSetState(a, b, c) {
    a = a._reactInternals;
    var d = Hg(),
        e = Ig(a),
        f = zg(d, e);
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    Ag(a, f);
    Jg(a, e, d);
  },
  enqueueReplaceState: function enqueueReplaceState(a, b, c) {
    a = a._reactInternals;
    var d = Hg(),
        e = Ig(a),
        f = zg(d, e);
    f.tag = 1;
    f.payload = b;
    void 0 !== c && null !== c && (f.callback = c);
    Ag(a, f);
    Jg(a, e, d);
  },
  enqueueForceUpdate: function enqueueForceUpdate(a, b) {
    a = a._reactInternals;
    var c = Hg(),
        d = Ig(a),
        e = zg(c, d);
    e.tag = 2;
    void 0 !== b && null !== b && (e.callback = b);
    Ag(a, e);
    Jg(a, d, c);
  }
};

function Lg(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
}

function Mg(a, b, c) {
  var d = !1,
      e = Cf;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = Kg;
  a.stateNode = b;
  b._reactInternals = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}

function Ng(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
}

function Og(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = Fg;
  xg(a);
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));
  Cg(a, c, e, d);
  e.state = a.memoizedState;
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);
  "function" === typeof e.componentDidMount && (a.flags |= 4);
}

var Pg = Array.isArray;

function Qg(a, b, c) {
  a = c.ref;

  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;

      if (c) {
        if (1 !== c.tag) throw Error(y(309));
        var d = c.stateNode;
      }

      if (!d) throw Error(y(147, a));
      var e = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

      b = function b(a) {
        var b = d.refs;
        b === Fg && (b = d.refs = {});
        null === a ? delete b[e] : b[e] = a;
      };

      b._stringRef = e;
      return b;
    }

    if ("string" !== typeof a) throw Error(y(284));
    if (!c._owner) throw Error(y(290, a));
  }

  return a;
}

function Rg(a, b) {
  if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
}

function Sg(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;
      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
      c.nextEffect = null;
      c.flags = 8;
    }
  }

  function c(c, d) {
    if (!a) return null;

    for (; null !== d;) {
      b(c, d), d = d.sibling;
    }

    return null;
  }

  function d(a, b) {
    for (a = new Map(); null !== b;) {
      null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
    }

    return a;
  }

  function e(a, b) {
    a = Tg(a, b);
    a.index = 0;
    a.sibling = null;
    return a;
  }

  function f(b, c, d) {
    b.index = d;
    if (!a) return c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;
    b.flags = 2;
    return c;
  }

  function g(b) {
    a && null === b.alternate && (b.flags = 2);
    return b;
  }

  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }

  function k(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;
    d = Vg(c.type, c.key, c.props, null, a.mode, d);
    d.ref = Qg(a, b, c);
    d.return = a;
    return d;
  }

  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;
    b = e(b, c.children || []);
    b.return = a;
    return b;
  }

  function n(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;
    b = e(b, c);
    b.return = a;
    return b;
  }

  function A(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;

    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case sa:
          return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;

        case ta:
          return b = Wg(b, a.mode, c), b.return = a, b;
      }

      if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;
      Rg(a, b);
    }

    return null;
  }

  function p(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case sa:
          return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

        case ta:
          return c.key === e ? l(a, b, c, d) : null;
      }

      if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);
      Rg(a, c);
    }

    return null;
  }

  function C(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case sa:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);

        case ta:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
      }

      if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);
      Rg(b, d);
    }

    return null;
  }

  function x(e, g, h, k) {
    for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {
      u.index > z ? (q = u, u = null) : q = u.sibling;
      var n = p(e, u, h[z], k);

      if (null === n) {
        null === u && (u = q);
        break;
      }

      a && u && null === n.alternate && b(e, u);
      g = f(n, g, z);
      null === t ? l = n : t.sibling = n;
      t = n;
      u = q;
    }

    if (z === h.length) return c(e, u), l;

    if (null === u) {
      for (; z < h.length; z++) {
        u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);
      }

      return l;
    }

    for (u = d(e, u); z < h.length; z++) {
      q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);
    }

    a && u.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  function w(e, g, h, k) {
    var l = La(h);
    if ("function" !== typeof l) throw Error(y(150));
    h = l.call(h);
    if (null == h) throw Error(y(151));

    for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {
      u.index > z ? (q = u, u = null) : q = u.sibling;
      var w = p(e, u, n.value, k);

      if (null === w) {
        null === u && (u = q);
        break;
      }

      a && u && null === w.alternate && b(e, u);
      g = f(w, g, z);
      null === t ? l = w : t.sibling = w;
      t = w;
      u = q;
    }

    if (n.done) return c(e, u), l;

    if (null === u) {
      for (; !n.done; z++, n = h.next()) {
        n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
      }

      return l;
    }

    for (u = d(e, u); !n.done; z++, n = h.next()) {
      n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);
    }

    a && u.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  return function (a, d, f, h) {
    var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;
    k && (f = f.props.children);
    var l = "object" === typeof f && null !== f;
    if (l) switch (f.$$typeof) {
      case sa:
        a: {
          l = f.key;

          for (k = d; null !== k;) {
            if (k.key === l) {
              switch (k.tag) {
                case 7:
                  if (f.type === ua) {
                    c(a, k.sibling);
                    d = e(k, f.props.children);
                    d.return = a;
                    a = d;
                    break a;
                  }

                  break;

                default:
                  if (k.elementType === f.type) {
                    c(a, k.sibling);
                    d = e(k, f.props);
                    d.ref = Qg(a, k, f);
                    d.return = a;
                    a = d;
                    break a;
                  }

              }

              c(a, k);
              break;
            } else b(a, k);

            k = k.sibling;
          }

          f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);
        }

        return g(a);

      case ta:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);
                d = e(d, f.children || []);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, d);
                break;
              }
            } else b(a, d);
            d = d.sibling;
          }

          d = Wg(f, a.mode, h);
          d.return = a;
          a = d;
        }

        return g(a);
    }
    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);
    if (Pg(f)) return x(a, d, f, h);
    if (La(f)) return w(a, d, f, h);
    l && Rg(a, f);
    if ("undefined" === typeof f && !k) switch (a.tag) {
      case 1:
      case 22:
      case 0:
      case 11:
      case 15:
        throw Error(y(152, Ra(a.type) || "Component"));
    }
    return c(a, d);
  };
}

var Yg = Sg(!0),
    Zg = Sg(!1),
    $g = {},
    ah = Bf($g),
    bh = Bf($g),
    ch = Bf($g);

function dh(a) {
  if (a === $g) throw Error(y(174));
  return a;
}

function eh(a, b) {
  I(ch, b);
  I(bh, a);
  I(ah, $g);
  a = b.nodeType;

  switch (a) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
      break;

    default:
      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
  }

  H(ah);
  I(ah, b);
}

function fh() {
  H(ah);
  H(bh);
  H(ch);
}

function gh(a) {
  dh(ch.current);
  var b = dh(ah.current);
  var c = mb(b, a.type);
  b !== c && (I(bh, a), I(ah, c));
}

function hh(a) {
  bh.current === a && (H(ah), H(bh));
}

var P = Bf(0);

function ih(a) {
  for (var b = a; null !== b;) {
    if (13 === b.tag) {
      var c = b.memoizedState;
      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
      if (0 !== (b.flags & 64)) return b;
    } else if (null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }

    if (b === a) break;

    for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return null;
      b = b.return;
    }

    b.sibling.return = b.return;
    b = b.sibling;
  }

  return null;
}

var jh = null,
    kh = null,
    lh = !1;

function mh(a, b) {
  var c = nh(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a;
  c.flags = 8;
  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}

function oh(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, !0) : !1;

    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

    case 13:
      return !1;

    default:
      return !1;
  }
}

function ph(a) {
  if (lh) {
    var b = kh;

    if (b) {
      var c = b;

      if (!oh(a, b)) {
        b = rf(c.nextSibling);

        if (!b || !oh(a, b)) {
          a.flags = a.flags & -1025 | 2;
          lh = !1;
          jh = a;
          return;
        }

        mh(jh, c);
      }

      jh = a;
      kh = rf(b.firstChild);
    } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
  }
}

function qh(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) {
    a = a.return;
  }

  jh = a;
}

function rh(a) {
  if (a !== jh) return !1;
  if (!lh) return qh(a), lh = !0, !1;
  var b = a.type;
  if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) {
    mh(a, b), b = rf(b.nextSibling);
  }
  qh(a);

  if (13 === a.tag) {
    a = a.memoizedState;
    a = null !== a ? a.dehydrated : null;
    if (!a) throw Error(y(317));

    a: {
      a = a.nextSibling;

      for (b = 0; a;) {
        if (8 === a.nodeType) {
          var c = a.data;

          if ("/$" === c) {
            if (0 === b) {
              kh = rf(a.nextSibling);
              break a;
            }

            b--;
          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
        }

        a = a.nextSibling;
      }

      kh = null;
    }
  } else kh = jh ? rf(a.stateNode.nextSibling) : null;

  return !0;
}

function sh() {
  kh = jh = null;
  lh = !1;
}

var th = [];

function uh() {
  for (var a = 0; a < th.length; a++) {
    th[a]._workInProgressVersionPrimary = null;
  }

  th.length = 0;
}

var vh = ra.ReactCurrentDispatcher,
    wh = ra.ReactCurrentBatchConfig,
    xh = 0,
    R = null,
    S = null,
    T = null,
    yh = !1,
    zh = !1;

function Ah() {
  throw Error(y(321));
}

function Bh(a, b) {
  if (null === b) return !1;

  for (var c = 0; c < b.length && c < a.length; c++) {
    if (!He(a[c], b[c])) return !1;
  }

  return !0;
}

function Ch(a, b, c, d, e, f) {
  xh = f;
  R = b;
  b.memoizedState = null;
  b.updateQueue = null;
  b.lanes = 0;
  vh.current = null === a || null === a.memoizedState ? Dh : Eh;
  a = c(d, e);

  if (zh) {
    f = 0;

    do {
      zh = !1;
      if (!(25 > f)) throw Error(y(301));
      f += 1;
      T = S = null;
      b.updateQueue = null;
      vh.current = Fh;
      a = c(d, e);
    } while (zh);
  }

  vh.current = Gh;
  b = null !== S && null !== S.next;
  xh = 0;
  T = S = R = null;
  yh = !1;
  if (b) throw Error(y(300));
  return a;
}

function Hh() {
  var a = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  null === T ? R.memoizedState = T = a : T = T.next = a;
  return T;
}

function Ih() {
  if (null === S) {
    var a = R.alternate;
    a = null !== a ? a.memoizedState : null;
  } else a = S.next;

  var b = null === T ? R.memoizedState : T.next;
  if (null !== b) T = b, S = a;else {
    if (null === a) throw Error(y(310));
    S = a;
    a = {
      memoizedState: S.memoizedState,
      baseState: S.baseState,
      baseQueue: S.baseQueue,
      queue: S.queue,
      next: null
    };
    null === T ? R.memoizedState = T = a : T = T.next = a;
  }
  return T;
}

function Jh(a, b) {
  return "function" === typeof b ? b(a) : b;
}

function Kh(a) {
  var b = Ih(),
      c = b.queue;
  if (null === c) throw Error(y(311));
  c.lastRenderedReducer = a;
  var d = S,
      e = d.baseQueue,
      f = c.pending;

  if (null !== f) {
    if (null !== e) {
      var g = e.next;
      e.next = f.next;
      f.next = g;
    }

    d.baseQueue = e = f;
    c.pending = null;
  }

  if (null !== e) {
    e = e.next;
    d = d.baseState;
    var h = g = f = null,
        k = e;

    do {
      var l = k.lane;
      if ((xh & l) === l) null !== h && (h = h.next = {
        lane: 0,
        action: k.action,
        eagerReducer: k.eagerReducer,
        eagerState: k.eagerState,
        next: null
      }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {
        var n = {
          lane: l,
          action: k.action,
          eagerReducer: k.eagerReducer,
          eagerState: k.eagerState,
          next: null
        };
        null === h ? (g = h = n, f = d) : h = h.next = n;
        R.lanes |= l;
        Dg |= l;
      }
      k = k.next;
    } while (null !== k && k !== e);

    null === h ? f = d : h.next = g;
    He(d, b.memoizedState) || (ug = !0);
    b.memoizedState = d;
    b.baseState = f;
    b.baseQueue = h;
    c.lastRenderedState = d;
  }

  return [b.memoizedState, c.dispatch];
}

function Lh(a) {
  var b = Ih(),
      c = b.queue;
  if (null === c) throw Error(y(311));
  c.lastRenderedReducer = a;
  var d = c.dispatch,
      e = c.pending,
      f = b.memoizedState;

  if (null !== e) {
    c.pending = null;
    var g = e = e.next;

    do {
      f = a(f, g.action), g = g.next;
    } while (g !== e);

    He(f, b.memoizedState) || (ug = !0);
    b.memoizedState = f;
    null === b.baseQueue && (b.baseState = f);
    c.lastRenderedState = f;
  }

  return [f, d];
}

function Mh(a, b, c) {
  var d = b._getVersion;
  d = d(b._source);
  var e = b._workInProgressVersionPrimary;
  if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);
  if (a) return c(b._source);
  th.push(b);
  throw Error(y(350));
}

function Nh(a, b, c, d) {
  var e = U;
  if (null === e) throw Error(y(349));
  var f = b._getVersion,
      g = f(b._source),
      h = vh.current,
      k = h.useState(function () {
    return Mh(e, b, c);
  }),
      l = k[1],
      n = k[0];
  k = T;
  var A = a.memoizedState,
      p = A.refs,
      C = p.getSnapshot,
      x = A.source;
  A = A.subscribe;
  var w = R;
  a.memoizedState = {
    refs: p,
    source: b,
    subscribe: d
  };
  h.useEffect(function () {
    p.getSnapshot = c;
    p.setSnapshot = l;
    var a = f(b._source);

    if (!He(g, a)) {
      a = c(b._source);
      He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);
      a = e.mutableReadLanes;
      e.entangledLanes |= a;

      for (var d = e.entanglements, h = a; 0 < h;) {
        var k = 31 - Vc(h),
            v = 1 << k;
        d[k] |= a;
        h &= ~v;
      }
    }
  }, [c, b, d]);
  h.useEffect(function () {
    return d(b._source, function () {
      var a = p.getSnapshot,
          c = p.setSnapshot;

      try {
        c(a(b._source));
        var d = Ig(w);
        e.mutableReadLanes |= d & e.pendingLanes;
      } catch (q) {
        c(function () {
          throw q;
        });
      }
    });
  }, [b, d]);
  He(C, c) && He(x, b) && He(A, d) || (a = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: Jh,
    lastRenderedState: n
  }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);
  return n;
}

function Ph(a, b, c) {
  var d = Ih();
  return Nh(d, a, b, c);
}

function Qh(a) {
  var b = Hh();
  "function" === typeof a && (a = a());
  b.memoizedState = b.baseState = a;
  a = b.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: Jh,
    lastRenderedState: a
  };
  a = a.dispatch = Oh.bind(null, R, a);
  return [b.memoizedState, a];
}

function Rh(a, b, c, d) {
  a = {
    tag: a,
    create: b,
    destroy: c,
    deps: d,
    next: null
  };
  b = R.updateQueue;
  null === b ? (b = {
    lastEffect: null
  }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
  return a;
}

function Sh(a) {
  var b = Hh();
  a = {
    current: a
  };
  return b.memoizedState = a;
}

function Th() {
  return Ih().memoizedState;
}

function Uh(a, b, c, d) {
  var e = Hh();
  R.flags |= a;
  e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
}

function Vh(a, b, c, d) {
  var e = Ih();
  d = void 0 === d ? null : d;
  var f = void 0;

  if (null !== S) {
    var g = S.memoizedState;
    f = g.destroy;

    if (null !== d && Bh(d, g.deps)) {
      Rh(b, c, f, d);
      return;
    }
  }

  R.flags |= a;
  e.memoizedState = Rh(1 | b, c, f, d);
}

function Wh(a, b) {
  return Uh(516, 4, a, b);
}

function Xh(a, b) {
  return Vh(516, 4, a, b);
}

function Yh(a, b) {
  return Vh(4, 2, a, b);
}

function Zh(a, b) {
  if ("function" === typeof b) return a = a(), b(a), function () {
    b(null);
  };
  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
    b.current = null;
  };
}

function $h(a, b, c) {
  c = null !== c && void 0 !== c ? c.concat([a]) : null;
  return Vh(4, 2, Zh.bind(null, b, a), c);
}

function ai() {}

function bi(a, b) {
  var c = Ih();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Bh(b, d[1])) return d[0];
  c.memoizedState = [a, b];
  return a;
}

function ci(a, b) {
  var c = Ih();
  b = void 0 === b ? null : b;
  var d = c.memoizedState;
  if (null !== d && null !== b && Bh(b, d[1])) return d[0];
  a = a();
  c.memoizedState = [a, b];
  return a;
}

function di(a, b) {
  var c = eg();
  gg(98 > c ? 98 : c, function () {
    a(!0);
  });
  gg(97 < c ? 97 : c, function () {
    var c = wh.transition;
    wh.transition = 1;

    try {
      a(!1), b();
    } finally {
      wh.transition = c;
    }
  });
}

function Oh(a, b, c) {
  var d = Hg(),
      e = Ig(a),
      f = {
    lane: e,
    action: c,
    eagerReducer: null,
    eagerState: null,
    next: null
  },
      g = b.pending;
  null === g ? f.next = f : (f.next = g.next, g.next = f);
  b.pending = f;
  g = a.alternate;
  if (a === R || null !== g && g === R) zh = yh = !0;else {
    if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
      var h = b.lastRenderedState,
          k = g(h, c);
      f.eagerReducer = g;
      f.eagerState = k;
      if (He(k, h)) return;
    } catch (l) {} finally {}
    Jg(a, e, d);
  }
}

var Gh = {
  readContext: vg,
  useCallback: Ah,
  useContext: Ah,
  useEffect: Ah,
  useImperativeHandle: Ah,
  useLayoutEffect: Ah,
  useMemo: Ah,
  useReducer: Ah,
  useRef: Ah,
  useState: Ah,
  useDebugValue: Ah,
  useDeferredValue: Ah,
  useTransition: Ah,
  useMutableSource: Ah,
  useOpaqueIdentifier: Ah,
  unstable_isNewReconciler: !1
},
    Dh = {
  readContext: vg,
  useCallback: function useCallback(a, b) {
    Hh().memoizedState = [a, void 0 === b ? null : b];
    return a;
  },
  useContext: vg,
  useEffect: Wh,
  useImperativeHandle: function useImperativeHandle(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([a]) : null;
    return Uh(4, 2, Zh.bind(null, b, a), c);
  },
  useLayoutEffect: function useLayoutEffect(a, b) {
    return Uh(4, 2, a, b);
  },
  useMemo: function useMemo(a, b) {
    var c = Hh();
    b = void 0 === b ? null : b;
    a = a();
    c.memoizedState = [a, b];
    return a;
  },
  useReducer: function useReducer(a, b, c) {
    var d = Hh();
    b = void 0 !== c ? c(b) : b;
    d.memoizedState = d.baseState = b;
    a = d.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: a,
      lastRenderedState: b
    };
    a = a.dispatch = Oh.bind(null, R, a);
    return [d.memoizedState, a];
  },
  useRef: Sh,
  useState: Qh,
  useDebugValue: ai,
  useDeferredValue: function useDeferredValue(a) {
    var b = Qh(a),
        c = b[0],
        d = b[1];
    Wh(function () {
      var b = wh.transition;
      wh.transition = 1;

      try {
        d(a);
      } finally {
        wh.transition = b;
      }
    }, [a]);
    return c;
  },
  useTransition: function useTransition() {
    var a = Qh(!1),
        b = a[0];
    a = di.bind(null, a[1]);
    Sh(a);
    return [a, b];
  },
  useMutableSource: function useMutableSource(a, b, c) {
    var d = Hh();
    d.memoizedState = {
      refs: {
        getSnapshot: b,
        setSnapshot: null
      },
      source: a,
      subscribe: c
    };
    return Nh(d, a, b, c);
  },
  useOpaqueIdentifier: function useOpaqueIdentifier() {
    if (lh) {
      var a = !1,
          b = uf(function () {
        a || (a = !0, c("r:" + (tf++).toString(36)));
        throw Error(y(355));
      }),
          c = Qh(b)[1];
      0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {
        c("r:" + (tf++).toString(36));
      }, void 0, null));
      return b;
    }

    b = "r:" + (tf++).toString(36);
    Qh(b);
    return b;
  },
  unstable_isNewReconciler: !1
},
    Eh = {
  readContext: vg,
  useCallback: bi,
  useContext: vg,
  useEffect: Xh,
  useImperativeHandle: $h,
  useLayoutEffect: Yh,
  useMemo: ci,
  useReducer: Kh,
  useRef: Th,
  useState: function useState() {
    return Kh(Jh);
  },
  useDebugValue: ai,
  useDeferredValue: function useDeferredValue(a) {
    var b = Kh(Jh),
        c = b[0],
        d = b[1];
    Xh(function () {
      var b = wh.transition;
      wh.transition = 1;

      try {
        d(a);
      } finally {
        wh.transition = b;
      }
    }, [a]);
    return c;
  },
  useTransition: function useTransition() {
    var a = Kh(Jh)[0];
    return [Th().current, a];
  },
  useMutableSource: Ph,
  useOpaqueIdentifier: function useOpaqueIdentifier() {
    return Kh(Jh)[0];
  },
  unstable_isNewReconciler: !1
},
    Fh = {
  readContext: vg,
  useCallback: bi,
  useContext: vg,
  useEffect: Xh,
  useImperativeHandle: $h,
  useLayoutEffect: Yh,
  useMemo: ci,
  useReducer: Lh,
  useRef: Th,
  useState: function useState() {
    return Lh(Jh);
  },
  useDebugValue: ai,
  useDeferredValue: function useDeferredValue(a) {
    var b = Lh(Jh),
        c = b[0],
        d = b[1];
    Xh(function () {
      var b = wh.transition;
      wh.transition = 1;

      try {
        d(a);
      } finally {
        wh.transition = b;
      }
    }, [a]);
    return c;
  },
  useTransition: function useTransition() {
    var a = Lh(Jh)[0];
    return [Th().current, a];
  },
  useMutableSource: Ph,
  useOpaqueIdentifier: function useOpaqueIdentifier() {
    return Lh(Jh)[0];
  },
  unstable_isNewReconciler: !1
},
    ei = ra.ReactCurrentOwner,
    ug = !1;

function fi(a, b, c, d) {
  b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
}

function gi(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  tg(b, e);
  d = Ch(a, b, c, d, f, e);
  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
  b.flags |= 1;
  fi(a, b, d, e);
  return b.child;
}

function ii(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;
    if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);
    a = Vg(c.type, null, d, b, b.mode, f);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }

  g = a.child;
  if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);
  b.flags |= 1;
  a = Tg(g, d);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}

function ki(a, b, c, d, e, f) {
  if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);
  return li(a, b, c, d, f);
}

function mi(a, b, c) {
  var d = b.pendingProps,
      e = d.children,
      f = null !== a ? a.memoizedState : null;
  if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
    if (0 === (b.mode & 4)) b.memoizedState = {
      baseLanes: 0
    }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {
      baseLanes: 0
    }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
      baseLanes: a
    }, ni(b, a), null;
  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
  fi(a, b, e, c);
  return b.child;
}

function oi(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;
}

function li(a, b, c, d, e) {
  var f = Ff(c) ? Df : M.current;
  f = Ef(b, f);
  tg(b, e);
  c = Ch(a, b, c, d, f, e);
  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
  b.flags |= 1;
  fi(a, b, c, e);
  return b.child;
}

function pi(a, b, c, d, e) {
  if (Ff(c)) {
    var f = !0;
    Jf(b);
  } else f = !1;

  tg(b, e);
  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;
    g.props = h;
    var k = g.context,
        l = c.contextType;
    "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
    var n = c.getDerivedStateFromProps,
        A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
    A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);
    wg = !1;
    var p = b.memoizedState;
    g.state = p;
    Cg(b, d, g, e);
    k = b.memoizedState;
    h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
  } else {
    g = b.stateNode;
    yg(a, b);
    h = b.memoizedProps;
    l = b.type === b.elementType ? h : lg(b.type, h);
    g.props = l;
    A = b.pendingProps;
    p = g.context;
    k = c.contextType;
    "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
    var C = c.getDerivedStateFromProps;
    (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);
    wg = !1;
    p = b.memoizedState;
    g.state = p;
    Cg(b, d, g, e);
    var x = b.memoizedState;
    h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
  }
  return qi(a, b, c, d, f, e);
}

function qi(a, b, c, d, e, f) {
  oi(a, b);
  var g = 0 !== (b.flags & 64);
  if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);
  d = b.stateNode;
  ei.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.flags |= 1;
  null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);
  b.memoizedState = d.state;
  e && Kf(b, c, !0);
  return b.child;
}

function ri(a) {
  var b = a.stateNode;
  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
  eh(a, b.containerInfo);
}

var si = {
  dehydrated: null,
  retryLane: 0
};

function ti(a, b, c) {
  var d = b.pendingProps,
      e = P.current,
      f = !1,
      g;
  (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
  g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
  I(P, e & 1);

  if (null === a) {
    void 0 !== d.fallback && ph(b);
    a = d.children;
    e = d.fallback;
    if (f) return a = ui(b, a, e, c), b.child.memoizedState = {
      baseLanes: c
    }, b.memoizedState = si, a;
    if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {
      baseLanes: c
    }, b.memoizedState = si, b.lanes = 33554432, a;
    c = vi({
      mode: "visible",
      children: a
    }, b.mode, c, null);
    c.return = b;
    return b.child = c;
  }

  if (null !== a.memoizedState) {
    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
      baseLanes: c
    } : {
      baseLanes: e.baseLanes | c
    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
    c = xi(a, b, d.children, c);
    b.memoizedState = null;
    return c;
  }

  if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
    baseLanes: c
  } : {
    baseLanes: e.baseLanes | c
  }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
  c = xi(a, b, d.children, c);
  b.memoizedState = null;
  return c;
}

function ui(a, b, c, d) {
  var e = a.mode,
      f = a.child;
  b = {
    mode: "hidden",
    children: b
  };
  0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
  c = Xg(c, e, d, null);
  f.return = a;
  c.return = a;
  f.sibling = c;
  a.child = f;
  return c;
}

function xi(a, b, c, d) {
  var e = a.child;
  a = e.sibling;
  c = Tg(e, {
    mode: "visible",
    children: c
  });
  0 === (b.mode & 2) && (c.lanes = d);
  c.return = b;
  c.sibling = null;
  null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
  return b.child = c;
}

function wi(a, b, c, d, e) {
  var f = b.mode,
      g = a.child;
  a = g.sibling;
  var h = {
    mode: "hidden",
    children: c
  };
  0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
  null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);
  d.return = b;
  c.return = b;
  c.sibling = d;
  b.child = c;
  return d;
}

function yi(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  null !== c && (c.lanes |= b);
  sg(a.return, b);
}

function zi(a, b, c, d, e, f) {
  var g = a.memoizedState;
  null === g ? a.memoizedState = {
    isBackwards: b,
    rendering: null,
    renderingStartTime: 0,
    last: d,
    tail: c,
    tailMode: e,
    lastEffect: f
  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
}

function Ai(a, b, c) {
  var d = b.pendingProps,
      e = d.revealOrder,
      f = d.tail;
  fi(a, b, d.children, c);
  d = P.current;
  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {
    if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {
      if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {
        a.child.return = a;
        a = a.child;
        continue;
      }
      if (a === b) break a;

      for (; null === a.sibling;) {
        if (null === a.return || a.return === b) break a;
        a = a.return;
      }

      a.sibling.return = a.return;
      a = a.sibling;
    }
    d &= 1;
  }
  I(P, d);
  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {
    case "forwards":
      c = b.child;

      for (e = null; null !== c;) {
        a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;
      }

      c = e;
      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
      zi(b, !1, e, c, f, b.lastEffect);
      break;

    case "backwards":
      c = null;
      e = b.child;

      for (b.child = null; null !== e;) {
        a = e.alternate;

        if (null !== a && null === ih(a)) {
          b.child = e;
          break;
        }

        a = e.sibling;
        e.sibling = c;
        c = e;
        e = a;
      }

      zi(b, !0, c, null, f, b.lastEffect);
      break;

    case "together":
      zi(b, !1, null, null, void 0, b.lastEffect);
      break;

    default:
      b.memoizedState = null;
  }
  return b.child;
}

function hi(a, b, c) {
  null !== a && (b.dependencies = a.dependencies);
  Dg |= b.lanes;

  if (0 !== (c & b.childLanes)) {
    if (null !== a && b.child !== a.child) throw Error(y(153));

    if (null !== b.child) {
      a = b.child;
      c = Tg(a, a.pendingProps);
      b.child = c;

      for (c.return = b; null !== a.sibling;) {
        a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;
      }

      c.sibling = null;
    }

    return b.child;
  }

  return null;
}

var Bi, Ci, Di, Ei;

Bi = function Bi(a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
};

Ci = function Ci() {};

Di = function Di(a, b, c, d) {
  var e = a.memoizedProps;

  if (e !== d) {
    a = b.stateNode;
    dh(ah.current);
    var f = null;

    switch (c) {
      case "input":
        e = Ya(a, e);
        d = Ya(a, d);
        f = [];
        break;

      case "option":
        e = eb(a, e);
        d = eb(a, d);
        f = [];
        break;

      case "select":
        e = m({}, e, {
          value: void 0
        });
        d = m({}, d, {
          value: void 0
        });
        f = [];
        break;

      case "textarea":
        e = gb(a, e);
        d = gb(a, d);
        f = [];
        break;

      default:
        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);
    }

    vb(c, d);
    var g;
    c = null;

    for (l in e) {
      if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
        var h = e[l];

        for (g in h) {
          h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
        }
      } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
    }

    for (l in d) {
      var k = d[l];
      h = null != e ? e[l] : void 0;
      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
        if (h) {
          for (g in h) {
            !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
          }

          for (g in k) {
            k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
          }
        } else c || (f || (f = []), f.push(l, c)), c = k;
      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
    }

    c && (f = f || []).push("style", c);
    var l = f;
    if (b.updateQueue = l) b.flags |= 4;
  }
};

Ei = function Ei(a, b, c, d) {
  c !== d && (b.flags |= 4);
};

function Fi(a, b) {
  if (!lh) switch (a.tailMode) {
    case "hidden":
      b = a.tail;

      for (var c = null; null !== b;) {
        null !== b.alternate && (c = b), b = b.sibling;
      }

      null === c ? a.tail = null : c.sibling = null;
      break;

    case "collapsed":
      c = a.tail;

      for (var d = null; null !== c;) {
        null !== c.alternate && (d = c), c = c.sibling;
      }

      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
  }
}

function Gi(a, b, c) {
  var d = b.pendingProps;

  switch (b.tag) {
    case 2:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return null;

    case 1:
      return Ff(b.type) && Gf(), null;

    case 3:
      fh();
      H(N);
      H(M);
      uh();
      d = b.stateNode;
      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
      if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
      Ci(b);
      return null;

    case 5:
      hh(b);
      var e = dh(ch.current);
      c = b.type;
      if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {
        if (!d) {
          if (null === b.stateNode) throw Error(y(166));
          return null;
        }

        a = dh(ah.current);

        if (rh(b)) {
          d = b.stateNode;
          c = b.type;
          var f = b.memoizedProps;
          d[wf] = b;
          d[xf] = f;

          switch (c) {
            case "dialog":
              G("cancel", d);
              G("close", d);
              break;

            case "iframe":
            case "object":
            case "embed":
              G("load", d);
              break;

            case "video":
            case "audio":
              for (a = 0; a < Xe.length; a++) {
                G(Xe[a], d);
              }

              break;

            case "source":
              G("error", d);
              break;

            case "img":
            case "image":
            case "link":
              G("error", d);
              G("load", d);
              break;

            case "details":
              G("toggle", d);
              break;

            case "input":
              Za(d, f);
              G("invalid", d);
              break;

            case "select":
              d._wrapperState = {
                wasMultiple: !!f.multiple
              };
              G("invalid", d);
              break;

            case "textarea":
              hb(d, f), G("invalid", d);
          }

          vb(c, f);
          a = null;

          for (var g in f) {
            f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));
          }

          switch (c) {
            case "input":
              Va(d);
              cb(d, f, !0);
              break;

            case "textarea":
              Va(d);
              jb(d);
              break;

            case "select":
            case "option":
              break;

            default:
              "function" === typeof f.onClick && (d.onclick = jf);
          }

          d = a;
          b.updateQueue = d;
          null !== d && (b.flags |= 4);
        } else {
          g = 9 === e.nodeType ? e : e.ownerDocument;
          a === kb.html && (a = lb(c));
          a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
            is: d.is
          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
          a[wf] = b;
          a[xf] = d;
          Bi(a, b, !1, !1);
          b.stateNode = a;
          g = wb(c, d);

          switch (c) {
            case "dialog":
              G("cancel", a);
              G("close", a);
              e = d;
              break;

            case "iframe":
            case "object":
            case "embed":
              G("load", a);
              e = d;
              break;

            case "video":
            case "audio":
              for (e = 0; e < Xe.length; e++) {
                G(Xe[e], a);
              }

              e = d;
              break;

            case "source":
              G("error", a);
              e = d;
              break;

            case "img":
            case "image":
            case "link":
              G("error", a);
              G("load", a);
              e = d;
              break;

            case "details":
              G("toggle", a);
              e = d;
              break;

            case "input":
              Za(a, d);
              e = Ya(a, d);
              G("invalid", a);
              break;

            case "option":
              e = eb(a, d);
              break;

            case "select":
              a._wrapperState = {
                wasMultiple: !!d.multiple
              };
              e = m({}, d, {
                value: void 0
              });
              G("invalid", a);
              break;

            case "textarea":
              hb(a, d);
              e = gb(a, d);
              G("invalid", a);
              break;

            default:
              e = d;
          }

          vb(c, e);
          var h = e;

          for (f in h) {
            if (h.hasOwnProperty(f)) {
              var k = h[f];
              "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));
            }
          }

          switch (c) {
            case "input":
              Va(a);
              cb(a, d, !1);
              break;

            case "textarea":
              Va(a);
              jb(a);
              break;

            case "option":
              null != d.value && a.setAttribute("value", "" + Sa(d.value));
              break;

            case "select":
              a.multiple = !!d.multiple;
              f = d.value;
              null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
              break;

            default:
              "function" === typeof e.onClick && (a.onclick = jf);
          }

          mf(c, d) && (b.flags |= 4);
        }

        null !== b.ref && (b.flags |= 128);
      }
      return null;

    case 6:
      if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {
        if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));
        c = dh(ch.current);
        dh(ah.current);
        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
      }
      return null;

    case 13:
      H(P);
      d = b.memoizedState;
      if (0 !== (b.flags & 64)) return b.lanes = c, b;
      d = null !== d;
      c = !1;
      null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;
      if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {
        if (0 === V || 3 === V) V = 4;
        null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
      }
      if (d || c) b.flags |= 4;
      return null;

    case 4:
      return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;

    case 10:
      return rg(b), null;

    case 17:
      return Ff(b.type) && Gf(), null;

    case 19:
      H(P);
      d = b.memoizedState;
      if (null === d) return null;
      f = 0 !== (b.flags & 64);
      g = d.rendering;
      if (null === g) {
        if (f) Fi(d, !1);else {
          if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {
            g = ih(a);

            if (null !== g) {
              b.flags |= 64;
              Fi(d, !1);
              f = g.updateQueue;
              null !== f && (b.updateQueue = f, b.flags |= 4);
              null === d.lastEffect && (b.firstEffect = null);
              b.lastEffect = d.lastEffect;
              d = c;

              for (c = b.child; null !== c;) {
                f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                  lanes: a.lanes,
                  firstContext: a.firstContext
                }), c = c.sibling;
              }

              I(P, P.current & 1 | 2);
              return b.child;
            }

            a = a.sibling;
          }
          null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
        }
      } else {
        if (!f) if (a = ih(g), null !== a) {
          if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
        } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
        d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
      }
      return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;

    case 23:
    case 24:
      return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;
  }

  throw Error(y(156, b.tag));
}

function Li(a) {
  switch (a.tag) {
    case 1:
      Ff(a.type) && Gf();
      var b = a.flags;
      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

    case 3:
      fh();
      H(N);
      H(M);
      uh();
      b = a.flags;
      if (0 !== (b & 64)) throw Error(y(285));
      a.flags = b & -4097 | 64;
      return a;

    case 5:
      return hh(a), null;

    case 13:
      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

    case 19:
      return H(P), null;

    case 4:
      return fh(), null;

    case 10:
      return rg(a), null;

    case 23:
    case 24:
      return Ki(), null;

    default:
      return null;
  }
}

function Mi(a, b) {
  try {
    var c = "",
        d = b;

    do {
      c += Qa(d), d = d.return;
    } while (d);

    var e = c;
  } catch (f) {
    e = "\nError generating stack: " + f.message + "\n" + f.stack;
  }

  return {
    value: a,
    source: b,
    stack: e
  };
}

function Ni(a, b) {
  try {
    console.error(b.value);
  } catch (c) {
    setTimeout(function () {
      throw c;
    });
  }
}

var Oi = "function" === typeof WeakMap ? WeakMap : Map;

function Pi(a, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;

  c.callback = function () {
    Qi || (Qi = !0, Ri = d);
    Ni(a, b);
  };

  return c;
}

function Si(a, b, c) {
  c = zg(-1, c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;

  if ("function" === typeof d) {
    var e = b.value;

    c.payload = function () {
      Ni(a, b);
      return d(e);
    };
  }

  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
    var c = b.stack;
    this.componentDidCatch(b.value, {
      componentStack: null !== c ? c : ""
    });
  });
  return c;
}

var Ui = "function" === typeof WeakSet ? WeakSet : Set;

function Vi(a) {
  var b = a.ref;
  if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    Wi(a, c);
  } else b.current = null;
}

function Xi(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      return;

    case 1:
      if (b.flags & 256 && null !== a) {
        var c = a.memoizedProps,
            d = a.memoizedState;
        a = b.stateNode;
        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
        a.__reactInternalSnapshotBeforeUpdate = b;
      }

      return;

    case 3:
      b.flags & 256 && qf(b.stateNode.containerInfo);
      return;

    case 5:
    case 6:
    case 4:
    case 17:
      return;
  }

  throw Error(y(163));
}

function Yi(a, b, c) {
  switch (c.tag) {
    case 0:
    case 11:
    case 15:
    case 22:
      b = c.updateQueue;
      b = null !== b ? b.lastEffect : null;

      if (null !== b) {
        a = b = b.next;

        do {
          if (3 === (a.tag & 3)) {
            var d = a.create;
            a.destroy = d();
          }

          a = a.next;
        } while (a !== b);
      }

      b = c.updateQueue;
      b = null !== b ? b.lastEffect : null;

      if (null !== b) {
        a = b = b.next;

        do {
          var e = a;
          d = e.next;
          e = e.tag;
          0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));
          a = d;
        } while (a !== b);
      }

      return;

    case 1:
      a = c.stateNode;
      c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
      b = c.updateQueue;
      null !== b && Eg(c, b, a);
      return;

    case 3:
      b = c.updateQueue;

      if (null !== b) {
        a = null;
        if (null !== c.child) switch (c.child.tag) {
          case 5:
            a = c.child.stateNode;
            break;

          case 1:
            a = c.child.stateNode;
        }
        Eg(c, b, a);
      }

      return;

    case 5:
      a = c.stateNode;
      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
      return;

    case 6:
      return;

    case 4:
      return;

    case 12:
      return;

    case 13:
      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
      return;

    case 19:
    case 17:
    case 20:
    case 21:
    case 23:
    case 24:
      return;
  }

  throw Error(y(163));
}

function aj(a, b) {
  for (var c = a;;) {
    if (5 === c.tag) {
      var d = c.stateNode;
      if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {
        d = c.stateNode;
        var e = c.memoizedProps.style;
        e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;
        d.style.display = sb("display", e);
      }
    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }

    if (c === a) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === a) return;
      c = c.return;
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
}

function bj(a, b) {
  if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
    Mf.onCommitFiberUnmount(Lf, b);
  } catch (f) {}

  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      a = b.updateQueue;

      if (null !== a && (a = a.lastEffect, null !== a)) {
        var c = a = a.next;

        do {
          var d = c,
              e = d.destroy;
          d = d.tag;
          if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {
            d = b;

            try {
              e();
            } catch (f) {
              Wi(d, f);
            }
          }
          c = c.next;
        } while (c !== a);
      }

      break;

    case 1:
      Vi(b);
      a = b.stateNode;
      if ("function" === typeof a.componentWillUnmount) try {
        a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
      } catch (f) {
        Wi(b, f);
      }
      break;

    case 5:
      Vi(b);
      break;

    case 4:
      cj(a, b);
  }
}

function dj(a) {
  a.alternate = null;
  a.child = null;
  a.dependencies = null;
  a.firstEffect = null;
  a.lastEffect = null;
  a.memoizedProps = null;
  a.memoizedState = null;
  a.pendingProps = null;
  a.return = null;
  a.updateQueue = null;
}

function ej(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}

function fj(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (ej(b)) break a;
      b = b.return;
    }

    throw Error(y(160));
  }

  var c = b;
  b = c.stateNode;

  switch (c.tag) {
    case 5:
      var d = !1;
      break;

    case 3:
      b = b.containerInfo;
      d = !0;
      break;

    case 4:
      b = b.containerInfo;
      d = !0;
      break;

    default:
      throw Error(y(161));
  }

  c.flags & 16 && (pb(b, ""), c.flags &= -17);

  a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || ej(c.return)) {
        c = null;
        break a;
      }

      c = c.return;
    }

    c.sibling.return = c.return;

    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
      if (c.flags & 2) continue b;
      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }

    if (!(c.flags & 2)) {
      c = c.stateNode;
      break a;
    }
  }

  d ? gj(a, c, b) : hj(a, c, b);
}

function gj(a, b, c) {
  var d = a.tag,
      e = 5 === d || 6 === d;
  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) {
    gj(a, b, c), a = a.sibling;
  }
}

function hj(a, b, c) {
  var d = a.tag,
      e = 5 === d || 6 === d;
  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) {
    hj(a, b, c), a = a.sibling;
  }
}

function cj(a, b) {
  for (var c = b, d = !1, e, f;;) {
    if (!d) {
      d = c.return;

      a: for (;;) {
        if (null === d) throw Error(y(160));
        e = d.stateNode;

        switch (d.tag) {
          case 5:
            f = !1;
            break a;

          case 3:
            e = e.containerInfo;
            f = !0;
            break a;

          case 4:
            e = e.containerInfo;
            f = !0;
            break a;
        }

        d = d.return;
      }

      d = !0;
    }

    if (5 === c.tag || 6 === c.tag) {
      a: for (var g = a, h = c, k = h;;) {
        if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {
          if (k === h) break a;

          for (; null === k.sibling;) {
            if (null === k.return || k.return === h) break a;
            k = k.return;
          }

          k.sibling.return = k.return;
          k = k.sibling;
        }
      }

      f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
    } else if (4 === c.tag) {
      if (null !== c.child) {
        e = c.stateNode.containerInfo;
        f = !0;
        c.child.return = c;
        c = c.child;
        continue;
      }
    } else if (bj(a, c), null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }

    if (c === b) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
      4 === c.tag && (d = !1);
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
}

function ij(a, b) {
  switch (b.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
    case 22:
      var c = b.updateQueue;
      c = null !== c ? c.lastEffect : null;

      if (null !== c) {
        var d = c = c.next;

        do {
          3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next;
        } while (d !== c);
      }

      return;

    case 1:
      return;

    case 5:
      c = b.stateNode;

      if (null != c) {
        d = b.memoizedProps;
        var e = null !== a ? a.memoizedProps : d;
        a = b.type;
        var f = b.updateQueue;
        b.updateQueue = null;

        if (null !== f) {
          c[xf] = d;
          "input" === a && "radio" === d.type && null != d.name && $a(c, d);
          wb(a, e);
          b = wb(a, d);

          for (e = 0; e < f.length; e += 2) {
            var g = f[e],
                h = f[e + 1];
            "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
          }

          switch (a) {
            case "input":
              ab(c, d);
              break;

            case "textarea":
              ib(c, d);
              break;

            case "select":
              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
          }
        }
      }

      return;

    case 6:
      if (null === b.stateNode) throw Error(y(162));
      b.stateNode.nodeValue = b.memoizedProps;
      return;

    case 3:
      c = b.stateNode;
      c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
      return;

    case 12:
      return;

    case 13:
      null !== b.memoizedState && (jj = O(), aj(b.child, !0));
      kj(b);
      return;

    case 19:
      kj(b);
      return;

    case 17:
      return;

    case 23:
    case 24:
      aj(b, null !== b.memoizedState);
      return;
  }

  throw Error(y(163));
}

function kj(a) {
  var b = a.updateQueue;

  if (null !== b) {
    a.updateQueue = null;
    var c = a.stateNode;
    null === c && (c = a.stateNode = new Ui());
    b.forEach(function (b) {
      var d = lj.bind(null, a, b);
      c.has(b) || (c.add(b), b.then(d, d));
    });
  }
}

function mj(a, b) {
  return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
}

var nj = Math.ceil,
    oj = ra.ReactCurrentDispatcher,
    pj = ra.ReactCurrentOwner,
    X = 0,
    U = null,
    Y = null,
    W = 0,
    qj = 0,
    rj = Bf(0),
    V = 0,
    sj = null,
    tj = 0,
    Dg = 0,
    Hi = 0,
    uj = 0,
    vj = null,
    jj = 0,
    Ji = Infinity;

function wj() {
  Ji = O() + 500;
}

var Z = null,
    Qi = !1,
    Ri = null,
    Ti = null,
    xj = !1,
    yj = null,
    zj = 90,
    Aj = [],
    Bj = [],
    Cj = null,
    Dj = 0,
    Ej = null,
    Fj = -1,
    Gj = 0,
    Hj = 0,
    Ij = null,
    Jj = !1;

function Hg() {
  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
}

function Ig(a) {
  a = a.mode;
  if (0 === (a & 2)) return 1;
  if (0 === (a & 4)) return 99 === eg() ? 1 : 2;
  0 === Gj && (Gj = tj);

  if (0 !== kg.transition) {
    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
    a = Gj;
    var b = 4186112 & ~Hj;
    b &= -b;
    0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));
    return b;
  }

  a = eg();
  0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
  return a;
}

function Jg(a, b, c) {
  if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));
  a = Kj(a, b);
  if (null === a) return null;
  $c(a, b, c);
  a === U && (Hi |= b, 4 === V && Ii(a, W));
  var d = eg();
  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));
  vj = a;
}

function Kj(a, b) {
  a.lanes |= b;
  var c = a.alternate;
  null !== c && (c.lanes |= b);
  c = a;

  for (a = a.return; null !== a;) {
    a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
  }

  return 3 === c.tag ? c.stateNode : null;
}

function Mj(a, b) {
  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {
    var h = 31 - Vc(g),
        k = 1 << h,
        l = f[h];

    if (-1 === l) {
      if (0 === (k & d) || 0 !== (k & e)) {
        l = b;
        Rc(k);
        var n = F;
        f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
      }
    } else l <= b && (a.expiredLanes |= k);

    g &= ~k;
  }

  d = Uc(a, a === U ? W : 0);
  b = F;
  if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {
    if (null !== c) {
      if (a.callbackPriority === b) return;
      c !== Zf && Pf(c);
    }

    15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
    a.callbackPriority = b;
    a.callbackNode = c;
  }
}

function Nj(a) {
  Fj = -1;
  Hj = Gj = 0;
  if (0 !== (X & 48)) throw Error(y(327));
  var b = a.callbackNode;
  if (Oj() && a.callbackNode !== b) return null;
  var c = Uc(a, a === U ? W : 0);
  if (0 === c) return null;
  var d = c;
  var e = X;
  X |= 16;
  var f = Pj();
  if (U !== a || W !== d) wj(), Qj(a, d);

  do {
    try {
      Rj();
      break;
    } catch (h) {
      Sj(a, h);
    }
  } while (1);

  qg();
  oj.current = f;
  X = e;
  null !== Y ? d = 0 : (U = null, W = 0, d = V);
  if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {
    2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));
    if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
    a.finishedWork = a.current.alternate;
    a.finishedLanes = c;

    switch (d) {
      case 0:
      case 1:
        throw Error(y(345));

      case 2:
        Uj(a);
        break;

      case 3:
        Ii(a, c);

        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
          if (0 !== Uc(a, 0)) break;
          e = a.suspendedLanes;

          if ((e & c) !== c) {
            Hg();
            a.pingedLanes |= a.suspendedLanes & e;
            break;
          }

          a.timeoutHandle = of(Uj.bind(null, a), d);
          break;
        }

        Uj(a);
        break;

      case 4:
        Ii(a, c);
        if ((c & 4186112) === c) break;
        d = a.eventTimes;

        for (e = -1; 0 < c;) {
          var g = 31 - Vc(c);
          f = 1 << g;
          g = d[g];
          g > e && (e = g);
          c &= ~f;
        }

        c = e;
        c = O() - c;
        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;

        if (10 < c) {
          a.timeoutHandle = of(Uj.bind(null, a), c);
          break;
        }

        Uj(a);
        break;

      case 5:
        Uj(a);
        break;

      default:
        throw Error(y(329));
    }
  }
  Mj(a, O());
  return a.callbackNode === b ? Nj.bind(null, a) : null;
}

function Ii(a, b) {
  b &= ~uj;
  b &= ~Hi;
  a.suspendedLanes |= b;
  a.pingedLanes &= ~b;

  for (a = a.expirationTimes; 0 < b;) {
    var c = 31 - Vc(b),
        d = 1 << c;
    a[c] = -1;
    b &= ~d;
  }
}

function Lj(a) {
  if (0 !== (X & 48)) throw Error(y(327));
  Oj();

  if (a === U && 0 !== (a.expiredLanes & W)) {
    var b = W;
    var c = Tj(a, b);
    0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));
  } else b = Uc(a, 0), c = Tj(a, b);

  0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));
  if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
  a.finishedWork = a.current.alternate;
  a.finishedLanes = b;
  Uj(a);
  Mj(a, O());
  return null;
}

function Vj() {
  if (null !== Cj) {
    var a = Cj;
    Cj = null;
    a.forEach(function (a) {
      a.expiredLanes |= 24 & a.pendingLanes;
      Mj(a, O());
    });
  }

  ig();
}

function Wj(a, b) {
  var c = X;
  X |= 1;

  try {
    return a(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
}

function Xj(a, b) {
  var c = X;
  X &= -2;
  X |= 8;

  try {
    return a(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
}

function ni(a, b) {
  I(rj, qj);
  qj |= b;
  tj |= b;
}

function Ki() {
  qj = rj.current;
  H(rj);
}

function Qj(a, b) {
  a.finishedWork = null;
  a.finishedLanes = 0;
  var c = a.timeoutHandle;
  -1 !== c && (a.timeoutHandle = -1, pf(c));
  if (null !== Y) for (c = Y.return; null !== c;) {
    var d = c;

    switch (d.tag) {
      case 1:
        d = d.type.childContextTypes;
        null !== d && void 0 !== d && Gf();
        break;

      case 3:
        fh();
        H(N);
        H(M);
        uh();
        break;

      case 5:
        hh(d);
        break;

      case 4:
        fh();
        break;

      case 13:
        H(P);
        break;

      case 19:
        H(P);
        break;

      case 10:
        rg(d);
        break;

      case 23:
      case 24:
        Ki();
    }

    c = c.return;
  }
  U = a;
  Y = Tg(a.current, null);
  W = qj = tj = b;
  V = 0;
  sj = null;
  uj = Hi = Dg = 0;
}

function Sj(a, b) {
  do {
    var c = Y;

    try {
      qg();
      vh.current = Gh;

      if (yh) {
        for (var d = R.memoizedState; null !== d;) {
          var e = d.queue;
          null !== e && (e.pending = null);
          d = d.next;
        }

        yh = !1;
      }

      xh = 0;
      T = S = R = null;
      zh = !1;
      pj.current = null;

      if (null === c || null === c.return) {
        V = 1;
        sj = b;
        Y = null;
        break;
      }

      a: {
        var f = a,
            g = c.return,
            h = c,
            k = b;
        b = W;
        h.flags |= 2048;
        h.firstEffect = h.lastEffect = null;

        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
          var l = k;

          if (0 === (h.mode & 2)) {
            var n = h.alternate;
            n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
          }

          var A = 0 !== (P.current & 1),
              p = g;

          do {
            var C;

            if (C = 13 === p.tag) {
              var x = p.memoizedState;
              if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {
                var w = p.memoizedProps;
                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
              }
            }

            if (C) {
              var z = p.updateQueue;

              if (null === z) {
                var u = new Set();
                u.add(l);
                p.updateQueue = u;
              } else z.add(l);

              if (0 === (p.mode & 2)) {
                p.flags |= 64;
                h.flags |= 16384;
                h.flags &= -2981;
                if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {
                  var t = zg(-1, 1);
                  t.tag = 2;
                  Ag(h, t);
                }
                h.lanes |= 1;
                break a;
              }

              k = void 0;
              h = b;
              var q = f.pingCache;
              null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));

              if (!k.has(h)) {
                k.add(h);
                var v = Yj.bind(null, f, l, h);
                l.then(v, v);
              }

              p.flags |= 4096;
              p.lanes = b;
              break a;
            }

            p = p.return;
          } while (null !== p);

          k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
        }

        5 !== V && (V = 2);
        k = Mi(k, h);
        p = g;

        do {
          switch (p.tag) {
            case 3:
              f = k;
              p.flags |= 4096;
              b &= -b;
              p.lanes |= b;
              var J = Pi(p, f, b);
              Bg(p, J);
              break a;

            case 1:
              f = k;
              var K = p.type,
                  Q = p.stateNode;

              if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
                p.flags |= 4096;
                b &= -b;
                p.lanes |= b;
                var L = Si(p, f, b);
                Bg(p, L);
                break a;
              }

          }

          p = p.return;
        } while (null !== p);
      }

      Zj(c);
    } catch (va) {
      b = va;
      Y === c && null !== c && (Y = c = c.return);
      continue;
    }

    break;
  } while (1);
}

function Pj() {
  var a = oj.current;
  oj.current = Gh;
  return null === a ? Gh : a;
}

function Tj(a, b) {
  var c = X;
  X |= 16;
  var d = Pj();
  U === a && W === b || Qj(a, b);

  do {
    try {
      ak();
      break;
    } catch (e) {
      Sj(a, e);
    }
  } while (1);

  qg();
  X = c;
  oj.current = d;
  if (null !== Y) throw Error(y(261));
  U = null;
  W = 0;
  return V;
}

function ak() {
  for (; null !== Y;) {
    bk(Y);
  }
}

function Rj() {
  for (; null !== Y && !Qf();) {
    bk(Y);
  }
}

function bk(a) {
  var b = ck(a.alternate, a, qj);
  a.memoizedProps = a.pendingProps;
  null === b ? Zj(a) : Y = b;
  pj.current = null;
}

function Zj(a) {
  var b = a;

  do {
    var c = b.alternate;
    a = b.return;

    if (0 === (b.flags & 2048)) {
      c = Gi(c, b, qj);

      if (null !== c) {
        Y = c;
        return;
      }

      c = b;

      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
        for (var d = 0, e = c.child; null !== e;) {
          d |= e.lanes | e.childLanes, e = e.sibling;
        }

        c.childLanes = d;
      }

      null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
    } else {
      c = Li(b);

      if (null !== c) {
        c.flags &= 2047;
        Y = c;
        return;
      }

      null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
    }

    b = b.sibling;

    if (null !== b) {
      Y = b;
      return;
    }

    Y = b = a;
  } while (null !== b);

  0 === V && (V = 5);
}

function Uj(a) {
  var b = eg();
  gg(99, dk.bind(null, a, b));
  return null;
}

function dk(a, b) {
  do {
    Oj();
  } while (null !== yj);

  if (0 !== (X & 48)) throw Error(y(327));
  var c = a.finishedWork;
  if (null === c) return null;
  a.finishedWork = null;
  a.finishedLanes = 0;
  if (c === a.current) throw Error(y(177));
  a.callbackNode = null;
  var d = c.lanes | c.childLanes,
      e = d,
      f = a.pendingLanes & ~e;
  a.pendingLanes = e;
  a.suspendedLanes = 0;
  a.pingedLanes = 0;
  a.expiredLanes &= e;
  a.mutableReadLanes &= e;
  a.entangledLanes &= e;
  e = a.entanglements;

  for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {
    var k = 31 - Vc(f),
        l = 1 << k;
    e[k] = 0;
    g[k] = -1;
    h[k] = -1;
    f &= ~l;
  }

  null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);
  a === U && (Y = U = null, W = 0);
  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;

  if (null !== d) {
    e = X;
    X |= 32;
    pj.current = null;
    kf = fd;
    g = Ne();

    if (Oe(g)) {
      if ("selectionStart" in g) h = {
        start: g.selectionStart,
        end: g.selectionEnd
      };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
        h = l.anchorNode;
        f = l.anchorOffset;
        k = l.focusNode;
        l = l.focusOffset;

        try {
          h.nodeType, k.nodeType;
        } catch (va) {
          h = null;
          break a;
        }

        var n = 0,
            A = -1,
            p = -1,
            C = 0,
            x = 0,
            w = g,
            z = null;

        b: for (;;) {
          for (var u;;) {
            w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);
            w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);
            3 === w.nodeType && (n += w.nodeValue.length);
            if (null === (u = w.firstChild)) break;
            z = w;
            w = u;
          }

          for (;;) {
            if (w === g) break b;
            z === h && ++C === f && (A = n);
            z === k && ++x === l && (p = n);
            if (null !== (u = w.nextSibling)) break;
            w = z;
            z = w.parentNode;
          }

          w = u;
        }

        h = -1 === A || -1 === p ? null : {
          start: A,
          end: p
        };
      } else h = null;
      h = h || {
        start: 0,
        end: 0
      };
    } else h = null;

    lf = {
      focusedElem: g,
      selectionRange: h
    };
    fd = !1;
    Ij = null;
    Jj = !1;
    Z = d;

    do {
      try {
        ek();
      } catch (va) {
        if (null === Z) throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    } while (null !== Z);

    Ij = null;
    Z = d;

    do {
      try {
        for (g = a; null !== Z;) {
          var t = Z.flags;
          t & 16 && pb(Z.stateNode, "");

          if (t & 128) {
            var q = Z.alternate;

            if (null !== q) {
              var v = q.ref;
              null !== v && ("function" === typeof v ? v(null) : v.current = null);
            }
          }

          switch (t & 1038) {
            case 2:
              fj(Z);
              Z.flags &= -3;
              break;

            case 6:
              fj(Z);
              Z.flags &= -3;
              ij(Z.alternate, Z);
              break;

            case 1024:
              Z.flags &= -1025;
              break;

            case 1028:
              Z.flags &= -1025;
              ij(Z.alternate, Z);
              break;

            case 4:
              ij(Z.alternate, Z);
              break;

            case 8:
              h = Z;
              cj(g, h);
              var J = h.alternate;
              dj(h);
              null !== J && dj(J);
          }

          Z = Z.nextEffect;
        }
      } catch (va) {
        if (null === Z) throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    } while (null !== Z);

    v = lf;
    q = Ne();
    t = v.focusedElem;
    g = v.selectionRange;

    if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
      null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
      q = [];

      for (v = t; v = v.parentNode;) {
        1 === v.nodeType && q.push({
          element: v,
          left: v.scrollLeft,
          top: v.scrollTop
        });
      }

      "function" === typeof t.focus && t.focus();

      for (t = 0; t < q.length; t++) {
        v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
      }
    }

    fd = !!kf;
    lf = kf = null;
    a.current = c;
    Z = d;

    do {
      try {
        for (t = a; null !== Z;) {
          var K = Z.flags;
          K & 36 && Yi(t, Z.alternate, Z);

          if (K & 128) {
            q = void 0;
            var Q = Z.ref;

            if (null !== Q) {
              var L = Z.stateNode;

              switch (Z.tag) {
                case 5:
                  q = L;
                  break;

                default:
                  q = L;
              }

              "function" === typeof Q ? Q(q) : Q.current = q;
            }
          }

          Z = Z.nextEffect;
        }
      } catch (va) {
        if (null === Z) throw Error(y(330));
        Wi(Z, va);
        Z = Z.nextEffect;
      }
    } while (null !== Z);

    Z = null;
    $f();
    X = e;
  } else a.current = c;

  if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) {
    b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
  }
  d = a.pendingLanes;
  0 === d && (Ti = null);
  1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
  c = c.stateNode;
  if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
    Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
  } catch (va) {}
  Mj(a, O());
  if (Qi) throw Qi = !1, a = Ri, Ri = null, a;
  if (0 !== (X & 8)) return null;
  ig();
  return null;
}

function ek() {
  for (; null !== Z;) {
    var a = Z.alternate;
    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
    var b = Z.flags;
    0 !== (b & 256) && Xi(a, Z);
    0 === (b & 512) || xj || (xj = !0, hg(97, function () {
      Oj();
      return null;
    }));
    Z = Z.nextEffect;
  }
}

function Oj() {
  if (90 !== zj) {
    var a = 97 < zj ? 97 : zj;
    zj = 90;
    return gg(a, fk);
  }

  return !1;
}

function $i(a, b) {
  Aj.push(b, a);
  xj || (xj = !0, hg(97, function () {
    Oj();
    return null;
  }));
}

function Zi(a, b) {
  Bj.push(b, a);
  xj || (xj = !0, hg(97, function () {
    Oj();
    return null;
  }));
}

function fk() {
  if (null === yj) return !1;
  var a = yj;
  yj = null;
  if (0 !== (X & 48)) throw Error(y(331));
  var b = X;
  X |= 32;
  var c = Bj;
  Bj = [];

  for (var d = 0; d < c.length; d += 2) {
    var e = c[d],
        f = c[d + 1],
        g = e.destroy;
    e.destroy = void 0;
    if ("function" === typeof g) try {
      g();
    } catch (k) {
      if (null === f) throw Error(y(330));
      Wi(f, k);
    }
  }

  c = Aj;
  Aj = [];

  for (d = 0; d < c.length; d += 2) {
    e = c[d];
    f = c[d + 1];

    try {
      var h = e.create;
      e.destroy = h();
    } catch (k) {
      if (null === f) throw Error(y(330));
      Wi(f, k);
    }
  }

  for (h = a.current.firstEffect; null !== h;) {
    a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;
  }

  X = b;
  ig();
  return !0;
}

function gk(a, b, c) {
  b = Mi(c, b);
  b = Pi(a, b, 1);
  Ag(a, b);
  b = Hg();
  a = Kj(a, 1);
  null !== a && ($c(a, 1, b), Mj(a, b));
}

function Wi(a, b) {
  if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {
    if (3 === c.tag) {
      gk(c, a, b);
      break;
    } else if (1 === c.tag) {
      var d = c.stateNode;

      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
        a = Mi(b, a);
        var e = Si(c, a, 1);
        Ag(c, e);
        e = Hg();
        c = Kj(c, 1);
        if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
          d.componentDidCatch(b, a);
        } catch (f) {}
        break;
      }
    }

    c = c.return;
  }
}

function Yj(a, b, c) {
  var d = a.pingCache;
  null !== d && d.delete(b);
  b = Hg();
  a.pingedLanes |= a.suspendedLanes & c;
  U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
  Mj(a, b);
}

function lj(a, b) {
  var c = a.stateNode;
  null !== c && c.delete(b);
  b = 0;
  0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
  c = Hg();
  a = Kj(a, b);
  null !== a && ($c(a, b, c), Mj(a, c));
}

var ck;

ck = function ck(a, b, c) {
  var d = b.lanes;
  if (null !== a) {
    if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {
      ug = !1;

      switch (b.tag) {
        case 3:
          ri(b);
          sh();
          break;

        case 5:
          gh(b);
          break;

        case 1:
          Ff(b.type) && Jf(b);
          break;

        case 4:
          eh(b, b.stateNode.containerInfo);
          break;

        case 10:
          d = b.memoizedProps.value;
          var e = b.type._context;
          I(mg, e._currentValue);
          e._currentValue = d;
          break;

        case 13:
          if (null !== b.memoizedState) {
            if (0 !== (c & b.child.childLanes)) return ti(a, b, c);
            I(P, P.current & 1);
            b = hi(a, b, c);
            return null !== b ? b.sibling : null;
          }

          I(P, P.current & 1);
          break;

        case 19:
          d = 0 !== (c & b.childLanes);

          if (0 !== (a.flags & 64)) {
            if (d) return Ai(a, b, c);
            b.flags |= 64;
          }

          e = b.memoizedState;
          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
          I(P, P.current);
          if (d) break;else return null;

        case 23:
        case 24:
          return b.lanes = 0, mi(a, b, c);
      }

      return hi(a, b, c);
    }
  } else ug = !1;
  b.lanes = 0;

  switch (b.tag) {
    case 2:
      d = b.type;
      null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
      a = b.pendingProps;
      e = Ef(b, M.current);
      tg(b, c);
      e = Ch(null, b, d, a, e, c);
      b.flags |= 1;

      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;
        b.memoizedState = null;
        b.updateQueue = null;

        if (Ff(d)) {
          var f = !0;
          Jf(b);
        } else f = !1;

        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
        xg(b);
        var g = d.getDerivedStateFromProps;
        "function" === typeof g && Gg(b, d, g, a);
        e.updater = Kg;
        b.stateNode = e;
        e._reactInternals = b;
        Og(b, d, a, c);
        b = qi(null, b, d, !0, f, c);
      } else b.tag = 0, fi(null, b, e, c), b = b.child;

      return b;

    case 16:
      e = b.elementType;

      a: {
        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
        a = b.pendingProps;
        f = e._init;
        e = f(e._payload);
        b.type = e;
        f = b.tag = hk(e);
        a = lg(e, a);

        switch (f) {
          case 0:
            b = li(null, b, e, a, c);
            break a;

          case 1:
            b = pi(null, b, e, a, c);
            break a;

          case 11:
            b = gi(null, b, e, a, c);
            break a;

          case 14:
            b = ii(null, b, e, lg(e.type, a), d, c);
            break a;
        }

        throw Error(y(306, e, ""));
      }

      return b;

    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);

    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);

    case 3:
      ri(b);
      d = b.updateQueue;
      if (null === a || null === d) throw Error(y(282));
      d = b.pendingProps;
      e = b.memoizedState;
      e = null !== e ? e.element : null;
      yg(a, b);
      Cg(b, d, null, c);
      d = b.memoizedState.element;
      if (d === e) sh(), b = hi(a, b, c);else {
        e = b.stateNode;
        if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;

        if (f) {
          a = e.mutableSourceEagerHydrationData;
          if (null != a) for (e = 0; e < a.length; e += 2) {
            f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
          }
          c = Zg(b, null, d, c);

          for (b.child = c; c;) {
            c.flags = c.flags & -3 | 1024, c = c.sibling;
          }
        } else fi(a, b, d, c), sh();

        b = b.child;
      }
      return b;

    case 5:
      return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;

    case 6:
      return null === a && ph(b), null;

    case 13:
      return ti(a, b, c);

    case 4:
      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;

    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);

    case 7:
      return fi(a, b, b.pendingProps, c), b.child;

    case 8:
      return fi(a, b, b.pendingProps.children, c), b.child;

    case 12:
      return fi(a, b, b.pendingProps.children, c), b.child;

    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        g = b.memoizedProps;
        f = e.value;
        var h = b.type._context;
        I(mg, h._currentValue);
        h._currentValue = f;
        if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
          if (g.children === e.children && !N.current) {
            b = hi(a, b, c);
            break a;
          }
        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
          var k = h.dependencies;

          if (null !== k) {
            g = h.child;

            for (var l = k.firstContext; null !== l;) {
              if (l.context === d && 0 !== (l.observedBits & f)) {
                1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
                h.lanes |= c;
                l = h.alternate;
                null !== l && (l.lanes |= c);
                sg(h.return, c);
                k.lanes |= c;
                break;
              }

              l = l.next;
            }
          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;

          if (null !== g) g.return = h;else for (g = h; null !== g;) {
            if (g === b) {
              g = null;
              break;
            }

            h = g.sibling;

            if (null !== h) {
              h.return = g.return;
              g = h;
              break;
            }

            g = g.return;
          }
          h = g;
        }
        fi(a, b, e.children, c);
        b = b.child;
      }

      return b;

    case 9:
      return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;

    case 14:
      return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);

    case 15:
      return ki(a, b, b.type, b.pendingProps, d, c);

    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);

    case 19:
      return Ai(a, b, c);

    case 23:
      return mi(a, b, c);

    case 24:
      return mi(a, b, c);
  }

  throw Error(y(156, b.tag));
};

function ik(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.flags = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}

function nh(a, b, c, d) {
  return new ik(a, b, c, d);
}

function ji(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}

function hk(a) {
  if ("function" === typeof a) return ji(a) ? 1 : 0;

  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === Aa) return 11;
    if (a === Da) return 14;
  }

  return 2;
}

function Tg(a, b) {
  var c = a.alternate;
  null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childLanes = a.childLanes;
  c.lanes = a.lanes;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  b = a.dependencies;
  c.dependencies = null === b ? null : {
    lanes: b.lanes,
    firstContext: b.firstContext
  };
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}

function Vg(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case ua:
      return Xg(c.children, e, f, b);

    case Ha:
      g = 8;
      e |= 16;
      break;

    case wa:
      g = 8;
      e |= 1;
      break;

    case xa:
      return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;

    case Ba:
      return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;

    case Ca:
      return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;

    case Ia:
      return vi(c, e, f, b);

    case Ja:
      return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;

    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case ya:
          g = 10;
          break a;

        case za:
          g = 9;
          break a;

        case Aa:
          g = 11;
          break a;

        case Da:
          g = 14;
          break a;

        case Ea:
          g = 16;
          d = null;
          break a;

        case Fa:
          g = 22;
          break a;
      }
      throw Error(y(130, null == a ? a : typeof a, ""));
  }
  b = nh(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.lanes = f;
  return b;
}

function Xg(a, b, c, d) {
  a = nh(7, a, d, b);
  a.lanes = c;
  return a;
}

function vi(a, b, c, d) {
  a = nh(23, a, d, b);
  a.elementType = Ia;
  a.lanes = c;
  return a;
}

function Ug(a, b, c) {
  a = nh(6, a, null, b);
  a.lanes = c;
  return a;
}

function Wg(a, b, c) {
  b = nh(4, null !== a.children ? a.children : [], a.key, b);
  b.lanes = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}

function jk(a, b, c) {
  this.tag = b;
  this.containerInfo = a;
  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.pendingContext = this.context = null;
  this.hydrate = c;
  this.callbackNode = null;
  this.callbackPriority = 0;
  this.eventTimes = Zc(0);
  this.expirationTimes = Zc(-1);
  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = Zc(0);
  this.mutableSourceEagerHydrationData = null;
}

function kk(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: ta,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}

function lk(a, b, c, d) {
  var e = b.current,
      f = Hg(),
      g = Ig(e);

  a: if (c) {
    c = c._reactInternals;

    b: {
      if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));
      var h = c;

      do {
        switch (h.tag) {
          case 3:
            h = h.stateNode.context;
            break b;

          case 1:
            if (Ff(h.type)) {
              h = h.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

        }

        h = h.return;
      } while (null !== h);

      throw Error(y(171));
    }

    if (1 === c.tag) {
      var k = c.type;

      if (Ff(k)) {
        c = If(c, k, h);
        break a;
      }
    }

    c = h;
  } else c = Cf;

  null === b.context ? b.context = c : b.pendingContext = c;
  b = zg(f, g);
  b.payload = {
    element: a
  };
  d = void 0 === d ? null : d;
  null !== d && (b.callback = d);
  Ag(e, b);
  Jg(e, g, f);
  return g;
}

function mk(a) {
  a = a.current;
  if (!a.child) return null;

  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;

    default:
      return a.child.stateNode;
  }
}

function nk(a, b) {
  a = a.memoizedState;

  if (null !== a && null !== a.dehydrated) {
    var c = a.retryLane;
    a.retryLane = 0 !== c && c < b ? c : b;
  }
}

function ok(a, b) {
  nk(a, b);
  (a = a.alternate) && nk(a, b);
}

function pk() {
  return null;
}

function qk(a, b, c) {
  var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
  c = new jk(a, b, null != c && !0 === c.hydrate);
  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
  c.current = b;
  b.stateNode = c;
  xg(b);
  a[ff] = c.current;
  cf(8 === a.nodeType ? a.parentNode : a);
  if (d) for (a = 0; a < d.length; a++) {
    b = d[a];
    var e = b._getVersion;
    e = e(b._source);
    null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
  }
  this._internalRoot = c;
}

qk.prototype.render = function (a) {
  lk(a, this._internalRoot, null, null);
};

qk.prototype.unmount = function () {
  var a = this._internalRoot,
      b = a.containerInfo;
  lk(null, a, null, function () {
    b[ff] = null;
  });
};

function rk(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}

function sk(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
  if (!b) for (var c; c = a.lastChild;) {
    a.removeChild(c);
  }
  return new qk(a, 0, b ? {
    hydrate: !0
  } : void 0);
}

function tk(a, b, c, d, e) {
  var f = c._reactRootContainer;

  if (f) {
    var g = f._internalRoot;

    if ("function" === typeof e) {
      var h = e;

      e = function e() {
        var a = mk(g);
        h.call(a);
      };
    }

    lk(b, g, a, e);
  } else {
    f = c._reactRootContainer = sk(c, d);
    g = f._internalRoot;

    if ("function" === typeof e) {
      var k = e;

      e = function e() {
        var a = mk(g);
        k.call(a);
      };
    }

    Xj(function () {
      lk(b, g, a, e);
    });
  }

  return mk(g);
}

ec = function ec(a) {
  if (13 === a.tag) {
    var b = Hg();
    Jg(a, 4, b);
    ok(a, 4);
  }
};

fc = function fc(a) {
  if (13 === a.tag) {
    var b = Hg();
    Jg(a, 67108864, b);
    ok(a, 67108864);
  }
};

gc = function gc(a) {
  if (13 === a.tag) {
    var b = Hg(),
        c = Ig(a);
    Jg(a, c, b);
    ok(a, c);
  }
};

hc = function hc(a, b) {
  return b();
};

yb = function yb(a, b, c) {
  switch (b) {
    case "input":
      ab(a, c);
      b = c.name;

      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) {
          c = c.parentNode;
        }

        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

        for (b = 0; b < c.length; b++) {
          var d = c[b];

          if (d !== a && d.form === a.form) {
            var e = Db(d);
            if (!e) throw Error(y(90));
            Wa(d);
            ab(d, e);
          }
        }
      }

      break;

    case "textarea":
      ib(a, c);
      break;

    case "select":
      b = c.value, null != b && fb(a, !!c.multiple, b, !1);
  }
};

Gb = Wj;

Hb = function Hb(a, b, c, d, e) {
  var f = X;
  X |= 4;

  try {
    return gg(98, a.bind(null, b, c, d, e));
  } finally {
    X = f, 0 === X && (wj(), ig());
  }
};

Ib = function Ib() {
  0 === (X & 49) && (Vj(), Oj());
};

Jb = function Jb(a, b) {
  var c = X;
  X |= 2;

  try {
    return a(b);
  } finally {
    X = c, 0 === X && (wj(), ig());
  }
};

function uk(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  if (!rk(b)) throw Error(y(200));
  return kk(a, b, null, c);
}

var vk = {
  Events: [Cb, ue, Db, Eb, Fb, Oj, {
    current: !1
  }]
},
    wk = {
  findFiberByHostInstance: wc,
  bundleType: 0,
  version: "17.0.2",
  rendererPackageName: "react-dom"
};
var xk = {
  bundleType: wk.bundleType,
  version: wk.version,
  rendererPackageName: wk.rendererPackageName,
  rendererConfig: wk.rendererConfig,
  overrideHookState: null,
  overrideHookStateDeletePath: null,
  overrideHookStateRenamePath: null,
  overrideProps: null,
  overridePropsDeletePath: null,
  overridePropsRenamePath: null,
  setSuspenseHandler: null,
  scheduleUpdate: null,
  currentDispatcherRef: ra.ReactCurrentDispatcher,
  findHostInstanceByFiber: function findHostInstanceByFiber(a) {
    a = cc(a);
    return null === a ? null : a.stateNode;
  },
  findFiberByHostInstance: wk.findFiberByHostInstance || pk,
  findHostInstancesForRefresh: null,
  scheduleRefresh: null,
  scheduleRoot: null,
  setRefreshHandler: null,
  getCurrentFiber: null
};

if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (!yk.isDisabled && yk.supportsFiber) try {
    Lf = yk.inject(xk), Mf = yk;
  } catch (a) {}
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
exports.createPortal = uk;

exports.findDOMNode = function (a) {
  if (null == a) return null;
  if (1 === a.nodeType) return a;
  var b = a._reactInternals;

  if (void 0 === b) {
    if ("function" === typeof a.render) throw Error(y(188));
    throw Error(y(268, Object.keys(a)));
  }

  a = cc(b);
  a = null === a ? null : a.stateNode;
  return a;
};

exports.flushSync = function (a, b) {
  var c = X;
  if (0 !== (c & 48)) return a(b);
  X |= 1;

  try {
    if (a) return gg(99, a.bind(null, b));
  } finally {
    X = c, ig();
  }
};

exports.hydrate = function (a, b, c) {
  if (!rk(b)) throw Error(y(200));
  return tk(null, a, b, !0, c);
};

exports.render = function (a, b, c) {
  if (!rk(b)) throw Error(y(200));
  return tk(null, a, b, !1, c);
};

exports.unmountComponentAtNode = function (a) {
  if (!rk(a)) throw Error(y(40));
  return a._reactRootContainer ? (Xj(function () {
    tk(null, null, a, !1, function () {
      a._reactRootContainer = null;
      a[ff] = null;
    });
  }), !0) : !1;
};

exports.unstable_batchedUpdates = Wj;

exports.unstable_createPortal = function (a, b) {
  return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
};

exports.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
  if (!rk(c)) throw Error(y(200));
  if (null == a || void 0 === a._reactInternals) throw Error(y(38));
  return tk(a, b, c, !1, d);
};

exports.version = "17.0.2";

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(14);
} else {}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _f, g, h, k;

if ("object" === typeof performance && "function" === typeof performance.now) {
  var l = performance;

  exports.unstable_now = function () {
    return l.now();
  };
} else {
  var p = Date,
      q = p.now();

  exports.unstable_now = function () {
    return p.now() - q;
  };
}

if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
  var t = null,
      u = null,
      w = function w() {
    if (null !== t) try {
      var a = exports.unstable_now();
      t(!0, a);
      t = null;
    } catch (b) {
      throw setTimeout(w, 0), b;
    }
  };

  _f = function f(a) {
    null !== t ? setTimeout(_f, 0, a) : (t = a, setTimeout(w, 0));
  };

  g = function g(a, b) {
    u = setTimeout(a, b);
  };

  h = function h() {
    clearTimeout(u);
  };

  exports.unstable_shouldYield = function () {
    return !1;
  };

  k = exports.unstable_forceFrameRate = function () {};
} else {
  var x = window.setTimeout,
      y = window.clearTimeout;

  if ("undefined" !== typeof console) {
    var z = window.cancelAnimationFrame;
    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    "function" !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
  }

  var A = !1,
      B = null,
      C = -1,
      D = 5,
      E = 0;

  exports.unstable_shouldYield = function () {
    return exports.unstable_now() >= E;
  };

  k = function k() {};

  exports.unstable_forceFrameRate = function (a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;
  };

  var F = new MessageChannel(),
      G = F.port2;

  F.port1.onmessage = function () {
    if (null !== B) {
      var a = exports.unstable_now();
      E = a + D;

      try {
        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
      } catch (b) {
        throw G.postMessage(null), b;
      }
    } else A = !1;
  };

  _f = function _f(a) {
    B = a;
    A || (A = !0, G.postMessage(null));
  };

  g = function g(a, b) {
    C = x(function () {
      a(exports.unstable_now());
    }, b);
  };

  h = function h() {
    y(C);
    C = -1;
  };
}

function H(a, b) {
  var c = a.length;
  a.push(b);

  a: for (;;) {
    var d = c - 1 >>> 1,
        e = a[d];
    if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;
  }
}

function J(a) {
  a = a[0];
  return void 0 === a ? null : a;
}

function K(a) {
  var b = a[0];

  if (void 0 !== b) {
    var c = a.pop();

    if (c !== b) {
      a[0] = c;

      a: for (var d = 0, e = a.length; d < e;) {
        var m = 2 * (d + 1) - 1,
            n = a[m],
            v = m + 1,
            r = a[v];
        if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;
      }
    }

    return b;
  }

  return null;
}

function I(a, b) {
  var c = a.sortIndex - b.sortIndex;
  return 0 !== c ? c : a.id - b.id;
}

var L = [],
    M = [],
    N = 1,
    O = null,
    P = 3,
    Q = !1,
    R = !1,
    S = !1;

function T(a) {
  for (var b = J(M); null !== b;) {
    if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;
    b = J(M);
  }
}

function U(a) {
  S = !1;
  T(a);
  if (!R) if (null !== J(L)) R = !0, _f(V);else {
    var b = J(M);
    null !== b && g(U, b.startTime - a);
  }
}

function V(a, b) {
  R = !1;
  S && (S = !1, h());
  Q = !0;
  var c = P;

  try {
    T(b);

    for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {
      var d = O.callback;

      if ("function" === typeof d) {
        O.callback = null;
        P = O.priorityLevel;
        var e = d(O.expirationTime <= b);
        b = exports.unstable_now();
        "function" === typeof e ? O.callback = e : O === J(L) && K(L);
        T(b);
      } else K(L);

      O = J(L);
    }

    if (null !== O) var m = !0;else {
      var n = J(M);
      null !== n && g(U, n.startTime - b);
      m = !1;
    }
    return m;
  } finally {
    O = null, P = c, Q = !1;
  }
}

var W = k;
exports.unstable_IdlePriority = 5;
exports.unstable_ImmediatePriority = 1;
exports.unstable_LowPriority = 4;
exports.unstable_NormalPriority = 3;
exports.unstable_Profiling = null;
exports.unstable_UserBlockingPriority = 2;

exports.unstable_cancelCallback = function (a) {
  a.callback = null;
};

exports.unstable_continueExecution = function () {
  R || Q || (R = !0, _f(V));
};

exports.unstable_getCurrentPriorityLevel = function () {
  return P;
};

exports.unstable_getFirstCallbackNode = function () {
  return J(L);
};

exports.unstable_next = function (a) {
  switch (P) {
    case 1:
    case 2:
    case 3:
      var b = 3;
      break;

    default:
      b = P;
  }

  var c = P;
  P = b;

  try {
    return a();
  } finally {
    P = c;
  }
};

exports.unstable_pauseExecution = function () {};

exports.unstable_requestPaint = W;

exports.unstable_runWithPriority = function (a, b) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;

    default:
      a = 3;
  }

  var c = P;
  P = a;

  try {
    return b();
  } finally {
    P = c;
  }
};

exports.unstable_scheduleCallback = function (a, b, c) {
  var d = exports.unstable_now();
  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;

  switch (a) {
    case 1:
      var e = -1;
      break;

    case 2:
      e = 250;
      break;

    case 5:
      e = 1073741823;
      break;

    case 4:
      e = 1E4;
      break;

    default:
      e = 5E3;
  }

  e = c + e;
  a = {
    id: N++,
    callback: b,
    priorityLevel: a,
    startTime: c,
    expirationTime: e,
    sortIndex: -1
  };
  c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, _f(V)));
  return a;
};

exports.unstable_wrapCallback = function (a) {
  var b = P;
  return function () {
    var c = P;
    P = b;

    try {
      return a.apply(this, arguments);
    } finally {
      P = c;
    }
  };
};

/***/ }),
/* 15 */,
/* 16 */,
/* 17 */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var superPropBase = __webpack_require__(19);

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(5);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(23);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(5);

var isNativeReflectConstruct = __webpack_require__(25);

var possibleConstructorReturn = __webpack_require__(26);

function _createSuper(Derived) {
  var hasNativeReflectConstruct = isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return possibleConstructorReturn(this, result);
  };
}

module.exports = _createSuper;

/***/ }),
/* 25 */
/***/ (function(module, exports) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(27);

var assertThisInitialized = __webpack_require__(28);

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(30);

var iterableToArrayLimit = __webpack_require__(31);

var unsupportedIterableToArray = __webpack_require__(32);

var nonIterableRest = __webpack_require__(34);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),
/* 31 */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(33);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),
/* 33 */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),
/* 34 */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


__webpack_require__(4);

var f = __webpack_require__(0),
    g = 60103;

exports.Fragment = 60107;

if ("function" === typeof Symbol && Symbol.for) {
  var h = Symbol.for;
  g = h("react.element");
  exports.Fragment = h("react.fragment");
}

var m = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
    n = Object.prototype.hasOwnProperty,
    p = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function q(c, a, k) {
  var b,
      d = {},
      e = null,
      l = null;
  void 0 !== k && (e = "" + k);
  void 0 !== a.key && (e = "" + a.key);
  void 0 !== a.ref && (l = a.ref);

  for (b in a) {
    n.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
  }

  if (c && c.defaultProps) for (b in a = c.defaultProps, a) {
    void 0 === d[b] && (d[b] = a[b]);
  }
  return {
    $$typeof: g,
    type: c,
    key: e,
    ref: l,
    props: d,
    _owner: m.current
  };
}

exports.jsx = q;
exports.jsxs = q;

/***/ })
]]);
//# sourceMappingURL=2.52b96ec0.chunk.js.map