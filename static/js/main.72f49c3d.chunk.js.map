{"version":3,"sources":["lib/gpuRun.ts","page/light/GPUCircle.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gpu","GPU","GPURunner","N","width","hight","max_distance","circleInfos","calculate","this","newCalculate","createKernel","length","a","constants","TWO_PI","thread","z","Math","random","cosA","cos","sinA","sin","x","y","dx","dy","st","sqrt","distance","lightIndex","MIN_STEP_LEN","i","MAX_STEP","ox","oy","index","ddx","ddy","dt","PI","output","window","innerWidth","innerHeight","render","circles","lightInfos","r","g","b","color","setOutput","setGraphical","canvas","addCircleInfos","info","push","light","GPUCircle","useState","setN","console","log","useEffect","dom","document","getElementById","appendChild","runner","gpuCircle","infos","ret","circleInfosToGPUCircle","setCircles","lightInfo","run","id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.72f49c3d.chunk.js","sourcesContent":["import { GPU } from 'gpu.js'\nconst gpu = new GPU();\n\nexport default class GPURunner {\n\tN: number\n\twidth: number\n\thight: number\n\tmax_distance: number\n\tcircleInfos: number[][][]\n\tcalculate: any\n\tconstructor(N: number, width: number, hight: number) {\n\t\tthis.N = N\n\t\tthis.width = width\n\t\tthis.hight = hight\n\t\tthis.max_distance = hight > width ? hight : width;\n\t\tthis.circleInfos = []\n\t\tthis.calculate = this.newCalculate()\n\t}\n\n\tnewCalculate() {\n\t\treturn gpu.createKernel(function (circleInfos: number[][][], length: number) {\n\t\t\t/* @ts-ignore */\n\t\t\tconst a = this.constants.TWO_PI * (this.thread.z / 1.00 + Math.random()) / this.constants.N\n\t\t\tconst cosA = Math.cos(a)\n\t\t\tconst sinA = Math.sin(a)\n\t\t\tconst x = this.thread.x\n\t\t\tconst y = this.thread.y\n\t\t\t// \t/* @ts-ignore */\n\n\t\t\tlet dx = x - circleInfos[0][0][0]\n\t\t\tlet dy = y - circleInfos[0][0][1]\n\t\t\tlet st = Math.sqrt(dx * dx + dy * dy) - circleInfos[0][0][2]\n\n\t\t\tlet distance = 0\n\t\t\tlet lightIndex = -1\n\t\t\tif (st < this.constants.MIN_STEP_LEN) {\n\t\t\t\treturn 0\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < this.constants.MAX_STEP && distance < this.constants.max_distance; i++) {\n\t\t\t\t// \t/* @ts-ignore */\n\t\t\t\tlet ox = x + distance * cosA\n\t\t\t\tlet oy = y + distance * sinA\n\n\t\t\t\tfor (let index = 0; index < length; index++) {\n\t\t\t\t\tlet ddx = ox - circleInfos[index][0][0]\n\t\t\t\t\tlet ddy = oy - circleInfos[index][0][1]\n\t\t\t\t\tconst dt = Math.sqrt(ddx * ddx + ddy * ddy) - circleInfos[index][0][2]\n\t\t\t\t\tif (dt < st) {\n\t\t\t\t\t\tst = dt\n\t\t\t\t\t\tlightIndex = index\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/* @ts-ignore */\n\t\t\t\tif (st < this.constants.MIN_STEP_LEN) {\n\t\t\t\t\treturn lightIndex\n\t\t\t\t}\n\n\t\t\t\tdistance = distance + st\n\t\t\t}\n\n\t\t\treturn -1\n\t\t}, {\n\t\t\tconstants: {\n\t\t\t\tN: this.N,\n\t\t\t\tmax_distance: this.max_distance,\n\t\t\t\tPI: Math.PI,\n\t\t\t\tTWO_PI: 2 * Math.PI,\n\t\t\t\tMIN_STEP_LEN: 0.1,\n\t\t\t\tMAX_STEP: 50\n\t\t\t},\n\t\t\toutput: [this.hight, this.width, this.N],\n\t\t})\n\t}\n\n\tinit(N: number, width: number, hight: number) {\n\t\tthis.N = N\n\t\tthis.width = width\n\t\tthis.hight = hight\n\t\tthis.max_distance = hight > width ? hight : width;\n\t}\n\n\n\tsetCircles(circleInfos: number[][][]) {\n\t\tthis.circleInfos = circleInfos\n\t}\n\n\trun(): number[][][] {\n\t\treturn this.calculate(this.circleInfos, this.circleInfos.length)\n\t}\n}","import { GPU } from 'gpu.js';\nimport { useEffect, useState } from 'react';\nimport GPURunner from '../../lib/gpuRun';\nconst width = window.innerWidth\nconst hight = window.innerHeight\n\nconst gpu = new GPU();\n\nfunction circleInfosToGPUCircle(infos: Circle[]): number[][][] {\n\tconst ret = []\n\tfor (const info of infos) {\n\t\tret.push(\n\t\t\t[\n\t\t\t\t[info.x, info.y, info.r],\n\t\t\t\t[info.light.r, info.light.g, info.light.b]\n\t\t\t]\n\t\t)\n\t}\n\n\treturn ret\n}\n\n/* @ts-ignore */\nconst render = gpu.createKernel(function (circles: number[][][], lightInfos: number[][][], N: number) {\n\t/* @ts-ignore */\n\tlet r = 0\n\tlet g = 0\n\tlet b = 0\n\tfor (let index = 0; index < N; index++) {\n\t\tconst lightIndex = lightInfos[index][this.thread.x][this.thread.y]\n\t\tif (lightIndex >= 0) {\n\t\t\tr = r + circles[lightIndex][1][0]\n\t\t\tg = g + circles[lightIndex][1][1]\n\t\t\tb = b + circles[lightIndex][1][2]\n\t\t}\n\t}\n\tthis.color(r / N, g / N, b / N, 1);\n}).setOutput([width, hight])\n\t.setGraphical(true);\n\nconst canvas = render.canvas;\n\nconst circleInfos: Circle[] = []\n\nfunction addCircleInfos(info: Circle) {\n\tcircleInfos.push({\n\t\tx: info.x * hight,\n\t\ty: info.y * width,\n\t\tr: info.r * hight,\n\t\tlight: info.light\n\t})\n}\n\naddCircleInfos({\n\tx: 0.5,\n\ty: 0.5,\n\tr: 0.1,\n\tlight: { r: 2, g: 0, b: 2 },\n})\n\naddCircleInfos({\n\tx: 0.3,\n\ty: 0.3,\n\tr: 0.1,\n\tlight: { r: 0, g: 2, b: 0 },\n})\n\nexport default function GPUCircle() {\n\tconst [N, setN] = useState<number>(32)\n\tconsole.log(setN)\n\n\t// function Run() {\n\t// \trender();\n\t// \twindow.requestAnimationFrame(Run)\n\t// }\n\n\tuseEffect(() => {\n\t\tconst dom = window.document.getElementById('GPUCircle')\n\t\tif (dom) {\n\t\t\tdom.appendChild(canvas)!;\n\t\t\tconst runner = new GPURunner(N, width, hight)\n\t\t\tconst gpuCircle = circleInfosToGPUCircle(circleInfos)\n\t\t\trunner.setCircles(gpuCircle)\n\t\t\tconst lightInfo = runner.run()\n\t\t\tconsole.log(lightInfo, width, hight)\n\t\t\t/* @ts-ignore */\n\t\t\trender(gpuCircle, lightInfo, N)\n\t\t}\n\t}, [N])\n\n\treturn (\n\t\t<div id=\"GPUCircle\">\n\t\t</div>\n\t)\n}","import React from 'react';\nimport './App.css';\nimport GPUCircle from \"./page/light/GPUCircle\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GPUCircle />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}